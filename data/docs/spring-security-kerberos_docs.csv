"url","content"
"https://docs.spring.io/spring-security-kerberos/reference/2.1/index.html","Spring Security Kerberos: Spring Security Kerberos is an extension of Spring Security for application developers to Kerberos concepts with Spring."
"https://docs.spring.io/spring-security-kerberos/reference/2.1/introduction.html","Introduction: Spring Security Kerberos 2.1.1 is built and tested with JDK 17, Spring Security 6.3.0 and Spring Framework 6.1.8."
"https://docs.spring.io/spring-security-kerberos/reference/2.1/ssk.html","Spring and Spring Security Kerberos: This part of the reference documentation explains the core functionality that Spring Security Kerberos provides to any Spring based application. Authentication Provider(#ssk-authprovider) describes the authentication provider support. Spnego Negotiate(#ssk-spnego) describes the spnego negotiate support. Using KerberosRestTemplate(#ssk-resttemplate) describes the RestTemplate support. Authentication Provider: Provider configuration using JavaConfig. @Configuration @EnableWebSecurity public class WebSecurityConfig { @Value(""${app.service-principal}"") private String servicePrincipal; @Value(""${app.keytab-location}"") private String keytabLocation; @Bean public SecurityFilterChain filterChain(HttpSecurity http) throws Exception { KerberosAuthenticationProvider kerberosAuthenticationProvider = kerberosAuthenticationProvider(); KerberosServiceAuthenticationProvider kerberosServiceAuthenticationProvider = kerberosServiceAuthenticationProvider(); ProviderManager providerManager = new ProviderManager(kerberosAuthenticationProvider, kerberosServiceAuthenticationProvider); http .authorizeHttpRequests((authz) -> authz .requestMatchers(""/"", ""/home"").permitAll() .anyRequest().authenticated() ) .exceptionHandling() .authenticationEntryPoint(spnegoEntryPoint()) .and() .formLogin() .loginPage(""/login"").permitAll() .and() .logout() .permitAll() .and() .authenticationProvider(kerberosAuthenticationProvider()) .authenticationProvider(kerberosServiceAuthenticationProvider()) .addFilterBefore(spnegoAuthenticationProcessingFilter(providerManager), BasicAuthenticationFilter.class); return http.build(); } @Bean public KerberosAuthenticationProvider kerberosAuthenticationProvider() { KerberosAuthenticationProvider provider = new KerberosAuthenticationProvider(); SunJaasKerberosClient client = new SunJaasKerberosClient(); client.setDebug(true); provider.setKerberosClient(client); provider.setUserDetailsService(dummyUserDetailsService()); return provider; } @Bean public SpnegoEntryPoint spnegoEntryPoint() { return new SpnegoEntryPoint(""/login""); } public SpnegoAuthenticationProcessingFilter spnegoAuthenticationProcessingFilter( AuthenticationManager authenticationManager) { SpnegoAuthenticationProcessingFilter filter = new SpnegoAuthenticationProcessingFilter(); filter.setAuthenticationManager(authenticationManager); return filter; } @Bean public KerberosServiceAuthenticationProvider kerberosServiceAuthenticationProvider() { KerberosServiceAuthenticationProvider provider = new KerberosServiceAuthenticationProvider(); provider.setTicketValidator(sunJaasKerberosTicketValidator()); provider.setUserDetailsService(dummyUserDetailsService()); return provider; } @Bean public SunJaasKerberosTicketValidator sunJaasKerberosTicketValidator() { SunJaasKerberosTicketValidator ticketValidator = new SunJaasKerberosTicketValidator(); ticketValidator.setServicePrincipal(servicePrincipal); ticketValidator.setKeyTabLocation(new FileSystemResource(keytabLocation)); ticketValidator.setDebug(true); return ticketValidator; } @Bean public DummyUserDetailsService dummyUserDetailsService() { return new DummyUserDetailsService(); } } Spnego Negotiate: Spnego configuration using JavaConfig. @Configuration @EnableWebSecurity public class WebSecurityConfig { @Value(""${app.ad-domain}"") private String adDomain; @Value(""${app.ad-server}"") private String adServer; @Value(""${app.service-principal}"") private String servicePrincipal; @Value(""${app.keytab-location}"") private String keytabLocation; @Value(""${app.ldap-search-base}"") private String ldapSearchBase; @Value(""${app.ldap-search-filter}"") private String ldapSearchFilter; @Bean public SecurityFilterChain filterChain(HttpSecurity http) throws Exception { KerberosServiceAuthenticationProvider kerberosServiceAuthenticationProvider = kerberosServiceAuthenticationProvider(); ActiveDirectoryLdapAuthenticationProvider activeDirectoryLdapAuthenticationProvider = activeDirectoryLdapAuthenticationProvider(); ProviderManager providerManager = new ProviderManager(kerberosServiceAuthenticationProvider, activeDirectoryLdapAuthenticationProvider); http .authorizeHttpRequests((authz) -> authz .requestMatchers(""/"", ""/home"").permitAll() .anyRequest().authenticated() ) .exceptionHandling() .authenticationEntryPoint(spnegoEntryPoint()) .and() .formLogin() .loginPage(""/login"").permitAll() .and() .logout() .permitAll() .and() .authenticationProvider(activeDirectoryLdapAuthenticationProvider()) .authenticationProvider(kerberosServiceAuthenticationProvider()) .addFilterBefore(spnegoAuthenticationProcessingFilter(providerManager), BasicAuthenticationFilter.class); return http.build(); } @Bean public ActiveDirectoryLdapAuthenticationProvider activeDirectoryLdapAuthenticationProvider() { return new ActiveDirectoryLdapAuthenticationProvider(adDomain, adServer); } @Bean public SpnegoEntryPoint spnegoEntryPoint() { return new SpnegoEntryPoint(""/login""); } public SpnegoAuthenticationProcessingFilter spnegoAuthenticationProcessingFilter( AuthenticationManager authenticationManager) { SpnegoAuthenticationProcessingFilter filter = new SpnegoAuthenticationProcessingFilter(); filter.setAuthenticationManager(authenticationManager); return filter; } public KerberosServiceAuthenticationProvider kerberosServiceAuthenticationProvider() throws Exception { KerberosServiceAuthenticationProvider provider = new KerberosServiceAuthenticationProvider(); provider.setTicketValidator(sunJaasKerberosTicketValidator()); provider.setUserDetailsService(ldapUserDetailsService()); return provider; } @Bean public SunJaasKerberosTicketValidator sunJaasKerberosTicketValidator() { SunJaasKerberosTicketValidator ticketValidator = new SunJaasKerberosTicketValidator(); ticketValidator.setServicePrincipal(servicePrincipal); ticketValidator.setKeyTabLocation(new FileSystemResource(keytabLocation)); ticketValidator.setDebug(true); return ticketValidator; } @Bean public KerberosLdapContextSource kerberosLdapContextSource() throws Exception { KerberosLdapContextSource contextSource = new KerberosLdapContextSource(adServer); contextSource.setLoginConfig(loginConfig()); return contextSource; } public SunJaasKrb5LoginConfig loginConfig() throws Exception { SunJaasKrb5LoginConfig loginConfig = new SunJaasKrb5LoginConfig(); loginConfig.setKeyTabLocation(new FileSystemResource(keytabLocation)); loginConfig.setServicePrincipal(servicePrincipal); loginConfig.setDebug(true); loginConfig.setIsInitiator(true); loginConfig.afterPropertiesSet(); return loginConfig; } @Bean public LdapUserDetailsService ldapUserDetailsService() throws Exception { FilterBasedLdapUserSearch userSearch = new FilterBasedLdapUserSearch(ldapSearchBase, ldapSearchFilter, kerberosLdapContextSource()); LdapUserDetailsService service = new LdapUserDetailsService(userSearch, new ActiveDirectoryLdapAuthoritiesPopulator()); service.setUserDetailsMapper(new LdapUserDetailsMapper()); return service; } } Using KerberosRestTemplate: If there is a need to access Kerberos protected web resources programmatically we have KerberosRestTemplate which extends RestTemplate and does necessary login actions prior to delegating to actual RestTemplate methods. You basically have few options to configure this template. Leave keyTabLocation and userPrincipal empty if you want to use cached ticket. Use keyTabLocation and userPrincipal if you want to use keytab file. Use loginOptions if you want to customise Krb5LoginModule options. Use a customised httpClient. With ticket cache. public void doWithTicketCache() { KerberosRestTemplate restTemplate = new KerberosRestTemplate(); restTemplate.getForObject(""http://neo.example.org:8080/hello"", String.class); } With keytab file. public void doWithKeytabFile() { KerberosRestTemplate restTemplate = new KerberosRestTemplate(""/tmp/user2.keytab"", "" [email protected](/cdn-cgi/l/email-protection) ""); restTemplate.getForObject(""http://neo.example.org:8080/hello"", String.class); } Authentication with LDAP Services: With most of your samples weâ€™re using DummyUserDetailsService because there is not necessarily need to query a real user details once kerberos authentication is successful and we can use kerberos principal info to create that dummy user. However there is a way to access kerberized LDAP services in a say way and query user details from there. KerberosLdapContextSource can be used to bind into LDAP via kerberos which is at least proven to work well with Windows AD services. @Value(""${app.ad-server}"") private String adServer; @Value(""${app.service-principal}"") private String servicePrincipal; @Value(""${app.keytab-location}"") private String keytabLocation; @Value(""${app.ldap-search-base}"") private String ldapSearchBase; @Value(""${app.ldap-search-filter}"") private String ldapSearchFilter; @Bean public KerberosLdapContextSource kerberosLdapContextSource() { KerberosLdapContextSource contextSource = new KerberosLdapContextSource(adServer); SunJaasKrb5LoginConfig loginConfig = new SunJaasKrb5LoginConfig(); loginConfig.setKeyTabLocation(new FileSystemResource(keytabLocation)); loginConfig.setServicePrincipal(servicePrincipal); loginConfig.setDebug(true); loginConfig.setIsInitiator(true); contextSource.setLoginConfig(loginConfig); return contextSource; } @Bean public LdapUserDetailsService ldapUserDetailsService() { FilterBasedLdapUserSearch userSearch = new FilterBasedLdapUserSearch(ldapSearchBase, ldapSearchFilter, kerberosLdapContextSource()); LdapUserDetailsService service = new LdapUserDetailsService(userSearch); service.setUserDetailsMapper(new LdapUserDetailsMapper()); return service; } Sample Security Server Windows Auth Sample(samples.html#samples-sec-server-win-auth) is currently configured to query user details from AD if authentication happen via kerberos."
"https://docs.spring.io/spring-security-kerberos/reference/2.1/samples.html","Spring Security Kerberos Samples: This part of the reference documentation is introducing samples projects. Samples can be compiled manually by building main distribution from github.com/spring-projects/spring-security-kerberos(https://github.com/spring-projects/spring-security-kerberos) . If you run sample as is it will not work until a correct configuration is applied. See notes below for specific samples. Security Server Windows Auth Sample(#samples-sec-server-win-auth) sample for Windows environment Security Server Side Auth Sample(#samples-sec-server-client-auth) sample using server side authenticator Security Server Spnego and Form Auth Sample(#samples-sec-server-spnego-form-auth) sample using ticket validation with spnego and form Security Server Spnego and Form Auth Xml Sample(#samples-sec-server-spnego-form-auth-xml) sample using ticket validation with spnego and form (xml config) Security Client KerberosRestTemplate Sample(#samples-sec-client-rest-template) sample for KerberosRestTemplate Security Server Windows Auth Sample: Goals of this sample: In windows environment, User will be able to logon to application with Windows Active directory Credential which has been entered during log on to windows. There should not be any ask for userid/password credentials. In non-windows environment, User will be presented with a screen to provide Active directory credentials. server: port: 8080 app: ad-domain: EXAMPLE.ORG ad-server: ldap://WIN-EKBO0EQ7TS7.example.org/ service-principal: HTTP/ [email protected](/cdn-cgi/l/email-protection) keytab-location: /tmp/tomcat.keytab ldap-search-base: dc=example,dc=org ldap-search-filter: ""(| (userPrincipalName={0}) (sAMAccountName={0}))"" In above you can see the default configuration for this sample. You can override these settings using a normal Spring Boot tricks like using command-line options or custom application.yml file. Run a server. $ java -jar sec-server-win-auth-2.1.1.jar You may need to use custom kerberos config with Linux either by using -Djava.security.krb5.conf=/path/to/krb5.ini or GlobalSunJaasKerberosConfig bean. See Setup Windows Domain Controller(appendix.html#setupwinkerberos) for more instructions how to work with windows kerberos environment. Login to Windows 8.1 using domain credentials and access sample Access sample application from a non windows vm and use domain credentials manually. Security Server Side Auth Sample: This sample demonstrates how server is able to authenticate user against kerberos environment using his credentials passed in via a form login. Run a server. $ java -jar sec-server-client-auth-2.1.1.jar server: port: 8080 Security Server Spnego and Form Auth Sample: This sample demonstrates how a server can be configured to accept a Spnego based negotiation from a browser while still being able to fall back to a form based authentication. Using a user1 principal Setup MIT Kerberos(appendix.html#setupmitkerberos) , do a kerberos login manually using credentials. $ kinit user1 Password for [email protected](/cdn-cgi/l/email-protection) : $ klist Ticket cache: FILE:/tmp/krb5cc_1000 Default principal: [email protected](/cdn-cgi/l/email-protection) Valid starting Expires Service principal 10/03/15 17:18:45 11/03/15 03:18:45 krbtgt/ [email protected](/cdn-cgi/l/email-protection) renew until 11/03/15 17:18:40 or using a keytab file. $ kinit -kt user2.keytab user1 $ klist Ticket cache: FILE:/tmp/krb5cc_1000 Default principal: [email protected](/cdn-cgi/l/email-protection) Valid starting Expires Service principal 10/03/15 17:25:03 11/03/15 03:25:03 krbtgt/ [email protected](/cdn-cgi/l/email-protection) renew until 11/03/15 17:25:03 Run a server. $ java -jar sec-server-spnego-form-auth-2.1.1.jar Now you should be able to open your browser and let it do Spnego authentication with existing ticket. See Configure Browsers for Spnego Negotiation(appendix.html#browserspnegoconfig) for more instructions for configuring browsers to use Spnego. server: port: 8080 app: service-principal: HTTP/ [email protected](/cdn-cgi/l/email-protection) keytab-location: /tmp/tomcat.keytab Security Server Spnego and Form Auth Xml Sample: This is a same sample than Security Server Spnego and Form Auth Sample(#samples-sec-server-spnego-form-auth) but using xml based configuration instead of JavaConfig. Run a server. $ java -jar sec-server-spnego-form-auth-xml-2.1.1.jar Security Client KerberosRestTemplate Sample: This is a sample using a Spring RestTemplate to access Kerberos protected resource. You can use this together with Security Server Spnego and Form Auth Sample(#samples-sec-server-spnego-form-auth) . Default application is configured as shown below. app: user-principal: [email protected](/cdn-cgi/l/email-protection) keytab-location: /tmp/user2.keytab access-url: http://neo.example.org:8080/hello Using a user1 principal Setup MIT Kerberos(appendix.html#setupmitkerberos) , do a kerberos login manually using credentials. $ java -jar sec-client-rest-template-2.1.1.jar --app.user-principal --app.keytab-location In above we simply set app.user-principal and app.keytab-location to empty values which disables a use of keytab file. If operation is succesfull you should see below output with [email protected](/cdn-cgi/l/email-protection) . <html xmlns=""http://www.w3.org/1999/xhtml"" xmlns:sec=""http://www.thymeleaf.org/thymeleaf-extras-springsecurity3""> <head> <title>Spring Security Kerberos Example</title> </head> <body> <h1>Hello [email protected](/cdn-cgi/l/email-protection) !</h1> </body> </html> Or use a user2 with a keytab file. $ java -jar sec-client-rest-template-2.1.1.jar If operation is succesfull you should see below output with [email protected](/cdn-cgi/l/email-protection) . <html xmlns=""http://www.w3.org/1999/xhtml"" xmlns:sec=""http://www.thymeleaf.org/thymeleaf-extras-springsecurity3""> <head> <title>Spring Security Kerberos Example</title> </head> <body> <h1>Hello [email protected](/cdn-cgi/l/email-protection) !</h1> </body> </html>"
"https://docs.spring.io/spring-security-kerberos/reference/2.1/appendix.html","Appendices: Appendix A: Material Used in this Document: Dummy UserDetailsService used in samples because we donâ€™t have a real user source. public class DummyUserDetailsService implements UserDetailsService { @Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException { return new User(username, ""notUsed"", true, true, true, true, AuthorityUtils.createAuthorityList(""ROLE_USER"")); } } Appendix B: Crash Course to Kerberos: In any authentication process there are usually a three parties involved. First is a client which sometimes is a client computer but in most of the scenarios it is the actual user sitting on a computer and trying to access resources. Then there is the resource user is trying to access. In this example it is a web server. Then there is a Key Distribution Center or KDC . In a case of Windows environment this would be a Domain Controller . KDC is the one which really brings everything together and thus is the most critical component in your environment. Because of this it is also considered as a single point of failure. Initially when Kerberos environment is setup and domain user principals created into a database, encryption keys are also created. These encryption keys are based on shared secrets(i.e. user password) and actual passwords are never kept in a clear text. Effectively KDC has its own key and other keys for domain users. Interestingly there is no communication between a resource and a KDC during the authentication process. When client wants to authenticate itself with a resource it first needs to communicate with a KDC . Client will craft a special package which contains encrypted and unencrypted parts. Unencrypted part contains i.e. information about a user and encrypted part other information which is part of a protocol. Client will encrypt package data with its own key. When KDC receives this authentication package from a client it checks who this client claims to be from an unencrypted part and based on that information it uses client decryption key it already have in its database. If this decryption is succesfull KDC knows that this client is the one it claims to be. What KDC returns to a client is a ticket called Ticket Granting Ticket which is signed by a KDCâ€™s own private key. Later when client sends back this ticket it can try to decrypt it and if that operation is succesfull it knows that it was a ticket it itself originally signed and gave to a client . When client wants to get a ticket which it can use to authenticate with a service, TGT is sent to KDC which then signs a service ticket with serviceâ€™s own key. This a moment when a trust between client and service is created. This service ticket contains data which only service itself is able to decrypt. When client is authenticating with a service it sends previously received service ticket to a service which then thinks that I donâ€™t know anything about this guy but he gave me an authentication ticket. What service can do next is try to decrypt that ticket and if that operation is succesfull it knows that only other party who knows my credentials is the KDC and because I trust him I can also trust that this client is a one he claims to be. Appendix C: Setup Kerberos Environments: Doing a production setup of Kerberos environment is out of scope of this document but this appendix provides some help to get you started for setting up needed components for development. Setup MIT Kerberos: First action is to setup a new realm and a database. # kdb5_util create -s -r EXAMPLE.ORG Loading random data Initializing database '/var/lib/krb5kdc/principal' for realm 'EXAMPLE.ORG', master key name 'K/ [email protected](/cdn-cgi/l/email-protection) ' You will be prompted for the database Master Password. It is important that you NOT FORGET this password. Enter KDC database master key: Re-enter KDC database master key to verify: kadmin command can be used to administer Kerberos environment but you canâ€™t yet use it because there are no admin users in a database. root@neo:/etc/krb5kdc# kadmin Authenticating as principal root/ [email protected](/cdn-cgi/l/email-protection) with password. kadmin: Client not found in Kerberos database while initializing kadmin interface Lets use kadmin.local command to create one. root@neo:/etc/krb5kdc# kadmin.local Authenticating as principal root/ [email protected](/cdn-cgi/l/email-protection) with password. kadmin.local: listprincs K/ [email protected](/cdn-cgi/l/email-protection) kadmin/ [email protected](/cdn-cgi/l/email-protection) kadmin/ [email protected](/cdn-cgi/l/email-protection) kadmin/ [email protected](/cdn-cgi/l/email-protection) krbtgt/ [email protected](/cdn-cgi/l/email-protection) kadmin.local: addprinc root/ [email protected](/cdn-cgi/l/email-protection) WARNING: no policy specified for root/ [email protected](/cdn-cgi/l/email-protection) ; defaulting to no policy Enter password for principal ""root/ [email protected](/cdn-cgi/l/email-protection) "": Re-enter password for principal ""root/ [email protected](/cdn-cgi/l/email-protection) "": Principal ""root/ [email protected](/cdn-cgi/l/email-protection) "" created. Then enable admins by modifying kadm5.acl file and restart Kerberos services. # cat /etc/krb5kdc/kadm5.acl # This file Is the access control list for krb5 administration. */admin * Now you can use kadmin with previously created root/admin principal. Lets create our first user user1 . kadmin: addprinc user1 WARNING: no policy specified for [email protected](/cdn-cgi/l/email-protection) ; defaulting to no policy Enter password for principal "" [email protected](/cdn-cgi/l/email-protection) "": Re-enter password for principal "" [email protected](/cdn-cgi/l/email-protection) "": Principal "" [email protected](/cdn-cgi/l/email-protection) "" created. Lets create our second user user2 and export a keytab file. kadmin: addprinc user2 WARNING: no policy specified for [email protected](/cdn-cgi/l/email-protection) ; defaulting to no policy Enter password for principal "" [email protected](/cdn-cgi/l/email-protection) "": Re-enter password for principal "" [email protected](/cdn-cgi/l/email-protection) "": Principal "" [email protected](/cdn-cgi/l/email-protection) "" created. kadmin: ktadd -k /tmp/user2.keytab [email protected](/cdn-cgi/l/email-protection) Entry for principal [email protected](/cdn-cgi/l/email-protection) with kvno 2, encryption type aes256-cts-hmac-sha1-96 added to keytab WRFILE:/tmp/user2.keytab. Entry for principal [email protected](/cdn-cgi/l/email-protection) with kvno 2, encryption type arcfour-hmac added to keytab WRFILE:/tmp/user2.keytab. Entry for principal [email protected](/cdn-cgi/l/email-protection) with kvno 2, encryption type des3-cbc-sha1 added to keytab WRFILE:/tmp/user2.keytab. Entry for principal [email protected](/cdn-cgi/l/email-protection) with kvno 2, encryption type des-cbc-crc added to keytab WRFILE:/tmp/user2.keytab. Lets create a service ticket for tomcat and export credentials to a keytab file named tomcat.keytab . kadmin: addprinc -randkey HTTP/ [email protected](/cdn-cgi/l/email-protection) WARNING: no policy specified for HTTP/ [email protected](/cdn-cgi/l/email-protection) ; defaulting to no policy Principal ""HTTP/ [email protected](/cdn-cgi/l/email-protection) "" created. kadmin: ktadd -k /tmp/tomcat.keytab HTTP/ [email protected](/cdn-cgi/l/email-protection) Entry for principal HTTP/ [email protected](/cdn-cgi/l/email-protection) with kvno 2, encryption type aes256-cts-hmac-sha1-96 added to keytab WRFILE:/tmp/tomcat2.keytab. Entry for principal HTTP/ [email protected](/cdn-cgi/l/email-protection) with kvno 2, encryption type arcfour-hmac added to keytab WRFILE:/tmp/tomcat2.keytab. Entry for principal HTTP/ [email protected](/cdn-cgi/l/email-protection) with kvno 2, encryption type des3-cbc-sha1 added to keytab WRFILE:/tmp/tomcat2.keytab. Entry for principal HTTP/ [email protected](/cdn-cgi/l/email-protection) with kvno 2, encryption type des-cbc-crc added to keytab WRFILE:/tmp/tomcat2.keytab. Setup Windows Domain Controller: This was tested using Windows Server 2012 R2 Internet is full of good articles and videos how to setup Windows AD but these two are quite usefull Rackspace(http://www.rackspace.com/knowledge_center/article/installing-active-directory-on-windows-server-2012) and Microsoft Technet(http://social.technet.microsoft.com/wiki/contents/articles/12370.windows-server-2012-set-up-your-first-domain-controller-step-by-step.aspx) . Normal domain controller and active directory setup was done. Used dns domain example.org and windows domain EXAMPLE . I created various domain users like user1 , user2 , user3 , tomcat and set passwords to Password# . I eventually also added all ipâ€™s of my vmâ€™s to ADâ€™s dns server for that not to cause any trouble. Name: WIN-EKBO0EQ7TS7.example.org Address: 172.16.101.135 Name: win8vm.example.org Address: 172.16.101.136 Name: neo.example.org Address: 172.16.101.1 Service Principal Name(SPN) needs to be setup with HTTP and a server name neo.example.org where tomcat servlet container is run. This is used with tomcat domain user and its keytab is then used as a service credential. PS C:\> setspn -A HTTP/neo.example.org tomcat I exported keytab file which is copied to linux server running tomcat. PS C:\> ktpass /out c:\tomcat.keytab /mapuser [email protected](/cdn-cgi/l/email-protection) /princ HTTP/ [email protected](/cdn-cgi/l/email-protection) /pass Password# /ptype KRB5_NT_PRINCIPAL /crypto All Targeting domain controller: WIN-EKBO0EQ7TS7.example.org Using legacy password setting method Successfully mapped HTTP/neo.example.org to tomcat. Appendix D: Troubleshooting: This appendix provides generic information about troubleshooting errors and problems. If you think environment and configuration is correctly setup, do double check and ask other person to check possible obvious mistakes or typos. Kerberos setup is generally very brittle and it is not always very easy to debug where the problem lies. Cannot find key of appropriate type to decrypt GSSException: Failure unspecified at GSS-API level (Mechanism level: Invalid argument (400) - Cannot find key of appropriate type to decrypt AP REP - RC4 with HMAC) If you see abore error indicating missing key type, this will happen with two different use cases. Firstly your JVM may not support appropriate encryption type or it is disabled in your krb5.conf file. default_tkt_enctypes = rc4-hmac default_tgs_enctypes = rc4-hmac Second case is less obvious and hard to track because it will lead into same error. This specific GSSException is throws also if you simply donâ€™t have a required encryption key which then may be caused by a misconfiguration in your kerberos server or a simply typo in your principal. Using wrong kerberos configuration â€‹ In most system all commands and libraries will search kerberos configuration either from a default locations or special locations like JDKs. Itâ€™s easy to get mixed up especially if working from unix systems, which already may have default settings to work with MIT kerberos, towards Windows domains. This is a specific example what happens with ldapsearch trying to query Windows AD using kerberos authentication. $ ldapsearch -H ldap://WIN-EKBO0EQ7TS7.example.org -b ""dc=example,dc=org"" SASL/GSSAPI authentication started ldap_sasl_interactive_bind_s: Local error (-2) additional info: SASL(-1): generic failure: GSSAPI Error: Unspecified GSS failure. Minor code may provide more information (No Kerberos credentials available) Well that doesnâ€™t look good and is a simple indication that I donâ€™t have a valid kerberos tickets as shown below. $ klist klist: Credentials cache file '/tmp/krb5cc_1000' not found We already have a keytab file we exported from Windows AD to be used with tomcat running on Linux. Lets try to use that to authenticate with Windows AD. You can have a dedicated config file which usually can be used with native Linux commands and JVMs via system propertys. $ cat krb5.ini [libdefaults] default_realm = EXAMPLE.ORG default_keytab_name = /tmp/tomcat.keytab forwardable=true [realms] EXAMPLE.ORG = { kdc = WIN-EKBO0EQ7TS7.example.org:88 } [domain_realm] example.org=EXAMPLE.ORG .example.org=EXAMPLE.ORG Lets use that config and a keytab to get initial credentials. $ env KRB5_CONFIG=/path/to/krb5.ini kinit -kt tomcat.keytab HTTP/ [email protected](/cdn-cgi/l/email-protection) $ klist Ticket cache: FILE:/tmp/krb5cc_1000 Default principal: HTTP/ [email protected](/cdn-cgi/l/email-protection) Valid starting Expires Service principal 26/03/15 09:04:37 26/03/15 19:04:37 krbtgt/ [email protected](/cdn-cgi/l/email-protection) renew until 27/03/15 09:04:37 Lets see what happens if we now try to do a simple query against Windows AD. $ ldapsearch -H ldap://WIN-EKBO0EQ7TS7.example.org -b ""dc=example,dc=org"" SASL/GSSAPI authentication started ldap_sasl_interactive_bind_s: Local error (-2) additional info: SASL(-1): generic failure: GSSAPI Error: Unspecified GSS failure. Minor code may provide more information (KDC returned error string: PROCESS_TGS) This may be simply because ldapsearch is getting confused and simply using wrong configuration. You can tell ldapsearch to use a different configuration via KRB5_CONFIG env variable just like we did with kinit . You can also use KRB5_TRACE=/dev/stderr to get more verbose output of what native libraries are doing. $ env KRB5_CONFIG=/path/to/krb5.ini ldapsearch -H ldap://WIN-EKBO0EQ7TS7.example.org -b ""dc=example,dc=org"" $ klist Ticket cache: FILE:/tmp/krb5cc_1000 Default principal: HTTP/ [email protected](/cdn-cgi/l/email-protection) Valid starting Expires Service principal 26/03/15 09:11:03 26/03/15 19:11:03 krbtgt/ [email protected](/cdn-cgi/l/email-protection) renew until 27/03/15 09:11:03 26/03/15 09:11:44 26/03/15 19:11:03 ldap/ [email protected](/cdn-cgi/l/email-protection) renew until 27/03/15 09:11:03 Above you can see what happened if query was successful by looking kerberos tickets. Now you can experiment with further query commands i.e. if you working with KerberosLdapContextSource . $ ldapsearch -H ldap://WIN-EKBO0EQ7TS7.example.org \ -b ""dc=example,dc=org"" \ ""(| ( [email protected](/cdn-cgi/l/email-protection) ) ( [email protected](/cdn-cgi/l/email-protection) ))"" \ dn ... # test user, example.org dn: CN=test user,DC=example,DC=org Appendix E: Configure Browsers for Spnego Negotiation: Firefox: Complete following steps to ensure that your Firefox browser is enabled to perform Spnego authentication. Open Firefox. At address field, type about:config . In filter/search, type negotiate . Parameter network.negotiate-auth.trusted-uris may be set to default https:// which doesnâ€™t work for you. Generally speaking this parameter has to replaced with the server address if Kerberos delegation is required. It is recommended to use https for all communication. Chrome: With Google Chrome you generally need to set command-line parameters order to white list servers with Chrome will negotiate. on Windows machines (clients): Chrome shares the configuration with Internet Explorer so if all changes were applied to IE (as described in E.3), nothing has to be passed via command-line parameters. on Linux/Mac OS machines (clients): the command-line parameter --auth-negotiate-delegate-whitelist should only used if Kerberos delegation is required (otherwise do not set this parameter). It is recommended to use https for all communication. --auth-server-whitelist=""*.example.com"" --auth-negotiate-delegate-whitelist=""*.example.com"" You can see which policies are enable by typing chrome://policy/ into Chromeâ€™s address bar. With Linux Chrome will also read policy files from /etc/opt/chrome/policies/managed directory. mypolicy.json { ""AuthServerWhitelist"" : ""*.example.org"", ""AuthNegotiateDelegateWhitelist"" : ""*.example.org"", ""DisableAuthNegotiateCnameLookup"" : true, ""EnableAuthNegotiatePort"" : true } Internet Explorer: Complete following steps to ensure that your Internet Explorer browser is enabled to perform Spnego authentication. Open Internet Explorer. Click Tools > Intenet Options > Security tab. In Local intranet section make sure your server is trusted by i.e. adding it into a list."
