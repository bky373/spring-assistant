"Spring Cloud Kubernetes는 무엇인가요?","Spring Cloud Kubernetes는 개발자가 Kubernetes에서 Spring Cloud 애플리케이션을 구축하고 실행할 수 있도록 잘 알려진 Spring Cloud 인터페이스의 구현을 제공하는 프로젝트입니다. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/index.html)"
"Spring Cloud Kubernetes를 사용해야 하는 이유는 무엇인가요?","Spring Cloud Kubernetes는 Kubernetes에서 클라우드 네이티브 애플리케이션을 구축할 때 유용하지만, Spring Boot 앱을 Kubernetes에 배포하는 데 필수적인 것은 아닙니다. Kubernetes에서 Spring Boot 앱을 실행하기 시작하려면 기본 Spring Boot 앱과 Kubernetes 자체만으로 많은 작업을 수행할 수 있습니다. 자세한 내용은 Spring Boot 참조 문서에서 Kubernetes 배포에 대한 내용을 읽고(https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#cloud-deployment-kubernetes) Spring 및 Kubernetes 워크샵 자료를 참조하세요(https://hackmd.io/@ryanjbaxter/spring-on-k8s-workshop). (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/index.html)"
"Spring Cloud Kubernetes에서 구성 속성을 어떻게 확인할 수 있나요?","모든 Kubernetes 관련 구성 속성의 목록을 보려면 부록 페이지(appendix.html)를 확인하세요. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/index.html)"
"스프링 클라우드에서 스타터(Starters)란 무엇인가요?","스프링 클라우드에서 스타터(Starters)는 애플리케이션에 포함할 수 있는 편리한 의존성 설명자입니다. 스타터를 포함하면 해당 기능 세트에 대한 의존성과 스프링 부트 자동 구성을 얻을 수 있습니다. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/htmlsingle/)"
"스프링 클라우드에서 Fabric8 Kubernetes Java Client와 Kubernetes Java Client를 함께 사용할 수 있나요?","아니요, Fabric8과 Kubernetes Java Client의 스타터를 함께 사용할 수는 없습니다. 사용할 라이브러리를 선택하고 해당 라이브러리의 스타터만 사용해야 합니다. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/htmlsingle/)"
"스프링 클라우드에서 Kubernetes ConfigMaps와 Secrets에서 애플리케이션 속성을 로드하는 방법은 무엇인가요?","Fabric8 또는 Kubernetes Client 스타터와 spring-cloud-starter-kubernetes-fabric8-config 또는 spring-cloud-starter-kubernetes-client-config를 사용하여 Kubernetes ConfigMaps와 Secrets에서 애플리케이션 속성을 로드할 수 있습니다. 해당 스타터를 사용하면 ConfigMap 또는 Secret이 변경될 때 애플리케이션 속성을 다시 로드할 수도 있습니다. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/htmlsingle/)"
"스프링 클라우드에서 Kubernetes용 DiscoveryClient는 무엇인가요?","스프링 클라우드의 DiscoveryClient for Kubernetes는 Kubernetes API 서버에서 서비스를 이름으로 조회할 수 있는 구현체입니다. 이 클라이언트는 주로 Spring Boot 애플리케이션에서 사용되며, Kubernetes API 서버에서 서비스를 찾을 수 있습니다. 이 클라이언트는 ExternalName 서비스 타입도 찾을 수 있습니다. 이를 사용하려면 spring.cloud.kubernetes.discovery.include-external-name-services 속성을 true로 설정해야 합니다."
"스프링 클라우드에서 Kubernetes용 DiscoveryClient를 활성화하려면 어떻게 해야 하나요?","스프링 클라우드에서 Kubernetes용 DiscoveryClient를 활성화하려면 해당 구성 또는 애플리케이션 클래스에 @EnableDiscoveryClient를 추가하면 됩니다. 그리고 @Autowired를 사용하여 코드에 클라이언트를 주입할 수 있습니다."
"Kubernetes용 DiscoveryClient에서 필터링과 네임스페이스 선택은 어떻게 이루어지나요?","Kubernetes용 DiscoveryClient는 서비스 레이블과 SpEL 표현식을 사용하여 필터링할 수 있으며, 스프링.클라우드.쿠버네티스.디스커버리.네임스페이스 속성을 사용하여 네임스페이스를 선택할 수 있습니다. 기본적으로 DiscoveryClient는 모든 네임스페이스에서 서비스를 검색하지만, selective namespaces, all-namespaces 또는 one namespace를 선택하여 검색할 수도 있습니다."
"Kubernetes에서 네이티브 서비스 디스커버리를 사용하는 이유는 무엇인가요?","Istio와 같은 추가 도구와의 호환성을 보장하고, 로드 밸런싱, 서킷 브레이커, 장애 조치 등의 기능을 제공하기 때문입니다. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/discovery-kubernetes-native.html)"
"Kubernetes 네이티브 서비스 디스커버리를 사용하여 호출자에서 서비스에 어떻게 접근할 수 있나요?","호출자 서비스는 특정 Kubernetes 클러스터에서 해결 가능한 이름을 참조하면 됩니다. 예를 들어, RestTemplate을 사용하여 {service-name}.{namespace}.svc.{cluster}.local:{service-port}와 같은 정규화된 도메인 이름을 사용할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/discovery-kubernetes-native.html)"
"Kubernetes 네이티브 서비스 디스커버리와 함께 Hystrix를 사용하는 목적은 무엇인가요?","호출자 측에서 서킷 브레이커 구현을 제공하고, 해당 메서드에 @HystrixCommand 어노테이션을 사용하여 장애 조치 기능을 추가할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/discovery-kubernetes-native.html)"
"Spring Cloud Kubernetes에서 Kubernetes ConfigMap을 PropertySource로 사용하는 방법은 무엇인가요?","Spring Cloud Kubernetes 프로젝트는 애플리케이션 시작 시 Kubernetes ConfigMap 인스턴스를 사용할 수 있게 하며, 관찰된 ConfigMap 인스턴스에서 변경 사항이 감지되면 빈 또는 Spring 컨텍스트의 핫 리로딩을 트리거합니다. ConfigMap은 애플리케이션에 전달할 매개 변수를 키-값 쌍 또는 임베디드 application.properties 또는 application.yaml 파일 형태로 외부화하는 데 사용됩니다. ConfigMap PropertySource를 사용하려면 spring.cloud.kubernetes.config.enabled 속성을 true로 설정해야 합니다."
"Spring Cloud Kubernetes에서 ConfigMap을 사용하여 여러 ConfigMap 인스턴스를 처리하는 방법은 무엇인가요?","spring.cloud.kubernetes.config.sources 목록을 사용하여 여러 ConfigMap 인스턴스를 사용할 수 있습니다. ConfigMap 인스턴스의 metadata.name은 spring.cloud.kubernetes.config.name 값, Spring 애플리케이션의 값 또는 문자열 리터럴 'application' 중 하나와 일치해야 합니다. 일치하는 ConfigMap이 발견되면 개별 구성 속성을 적용하고, spring.application.name 값으로 명명된 속성의 내용을 application.yaml/properties로 처리하며, spring.application.name + 각 활성 프로필의 내용을 properties 파일로 적용합니다."
"Spring Cloud Kubernetes에서 ConfigMap을 사용하여 활성 프로필에 따라 Spring Boot 애플리케이션을 구성하는 방법은 무엇인가요?","ConfigMap에 프로필별 값을 지정하여 다른 프로필에 대해 다른 속성 값을 제공할 수 있습니다. 각 프로필은 자체 문서(--- 시퀀스로 표시)에 지정됩니다. ConfigMap을 읽을 때 프로필별 소스는 비프로필별 소스보다 우선하며, 일반 속성은 프로필 및 비프로필별 소스보다 우선합니다."
"보안상의 이유로 Kubernetes의 Secrets를 API를 통해 소비하는 것은 기본적으로 활성화되어 있나요?","아니요, 보안상의 이유로 기본적으로 비활성화되어 있습니다. 권한 'list'는 클라이언트가 지정된 네임스페이스에서 시크릿 값을 검사할 수 있도록 허용합니다. 대신 컨테이너가 마운트된 볼륨을 통해 시크릿을 공유하는 것이 권장됩니다. API를 통해 시크릿을 소비하도록 활성화하는 경우, RBAC와 같은 권한 정책을 사용하여 시크릿에 대한 액세스를 제한하는 것이 좋습니다. API를 통해 시크릿을 소비할 때 발생하는 위험과 모범 사례에 대한 자세한 내용은 다음 문서를 참조하십시오: https://kubernetes.io/docs/concepts/configuration/secret/#best-practices. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/property-source-config/secrets-propertysource.html)"
"Kubernetes의 Secrets를 Spring Boot 애플리케이션에서 사용하려면 어떻게 활성화해야 하나요?","spring.cloud.kubernetes.secrets.enabled 속성을 설정하여 이 기능을 명시적으로 활성화하거나 비활성화할 수 있습니다. 활성화되면 Fabric8SecretsPropertySource는 다음 소스에서 Kubernetes의 Secrets를 검색합니다: 시크릿 마운트에서 재귀적으로 읽기, 애플리케이션 이름과 일치하는 이름, 일부 레이블과 일치하는 이름. 기본적으로 API를 통해 시크릿을 소비하는 것은 보안상의 이유로 활성화되어 있지 않습니다. API를 통해 시크릿을 소비하도록 활성화하는 경우 RBAC와 같은 권한 정책을 사용하여 시크릿에 대한 액세스를 제한하는 것이 좋습니다. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/property-source-config/secrets-propertysource.html)"
"Spring Boot 애플리케이션에서 Secrets를 소비하려면 어떤 방법을 사용할 수 있나요?","여러 가지 방법으로 Secrets를 소비할 수 있습니다. 시크릿이 매핑된 디렉토리를 나열하거나, 이름 있는 시크릿을 설정하거나, 레이블 목록을 정의할 수 있습니다. 고급 구성에서는 여러 시크릿 인스턴스를 사용할 수 있으며, spring.cloud.kubernetes.secrets.sources 목록을 사용하여 이를 가능하게 할 수 있습니다. 예를 들어, 다음과 같이 시크릿 인스턴스를 정의할 수 있습니다: spring.cloud.kubernetes.secrets.sources = [name: s1, namespace: n2, name: s3, namespace: n3]. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/property-source-config/secrets-propertysource.html)"
"스프링 클라우드 카부스(Kubernetes)에서 애플리케이션 네임스페이스를 찾는 방법은 무엇인가요?","스프링 클라우드 카부스(Kubernetes)에서 애플리케이션 네임스페이스를 찾는 방법은 최선의 노력으로 이루어집니다. 이를 위해 몇 가지 단계를 반복합니다. 가장 쉽고 일반적인 방법은 적절한 구성에서 지정하는 것입니다. 예를 들어, spring.cloud.kubernetes.client.namespace 속성을 설정하거나, 지정된 클라이언트 메서드 호출(예: fabric8의 KubernetesClient::getNamespace)을 통해 설정할 수 있습니다. 실패 시 예외가 발생합니다. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/html/#namespace-resolution)"
"스프링 클라우드 카부스(Kubernetes)에서 네임스페이스를 지정하지 않았을 때 어떤 순서로 읽히나요?","스프링 클라우드 카부스(Kubernetes)에서 네임스페이스를 지정하지 않았을 때, spring.cloud.kubernetes.client.namespace 속성, spring.cloud.kubernetes.client.serviceAccountNamespacePath 속성에 지정된 파일에 있는 문자열, /var/run/secrets/kubernetes.io/serviceaccount/namespace 파일(카부스 기본 네임스페이스 경로), 지정된 클라이언트 메서드 호출(예: fabric8의 KubernetesClient::getNamespace) 순으로 읽힙니다. 클라이언트 문서를 참조하여 정확한 세부 정보를 확인하세요. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/html/#namespace-resolution)"
"스프링 클라우드 카부스(Kubernetes)에서 네임스페이스를 찾을 수 없을 때 어떤 동작이 발생하나요?","스프링 클라우드 카부스(Kubernetes)에서 네임스페이스를 찾을 수 없을 때 예외가 발생합니다. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/html/#namespace-resolution)"
"Spring Cloud Kubernetes에서 ConfigMaps와 Secrets가 모두 활성화된 경우, 공통 속성이 있는 경우 어떤 값이 우선되나요?","ConfigMap의 값이 우선되어 Secrets에 있는 값들을 덮어씁니다. (Source: https://docs.spring.io/spring-cloud-kubernetes/reference/html/#property-source-config-order-configmaps-secrets)"
"Spring Cloud Kubernetes에서 ConfigMaps와 Secrets의 차이점은 무엇인가요?","ConfigMaps는 설정 정보를 저장하고, Secrets는 민감한 정보를 안전하게 저장하고 관리합니다. (Source: https://docs.spring.io/spring-cloud-kubernetes/reference/html/#property-source-config-configmaps-secrets)"
"Spring Cloud Kubernetes에서 ConfigMaps와 Secrets는 어떻게 설정되나요?","ConfigMaps와 Secrets는 Kubernetes 클러스터에서 각각 configmaps와 secrets 리소스를 생성하여 설정할 수 있습니다. (Source: https://docs.spring.io/spring-cloud-kubernetes/reference/html/#property-source-config-configmaps-secrets)"
"스프링 클라우드 카브의 리로드 기능은 어떻게 동작하며 어떤 시나리오에서 유용할까요?","스프링 클라우드 카브의 리로드 기능은 관련 ConfigMap 또는 Secret이 변경될 때 애플리케이션 리로드를 트리거할 수 있습니다. 이 기능은 기본적으로 비활성화되어 있으며, spring.cloud.kubernetes.reload.enabled=true 구성 속성을 사용하여 활성화할 수 있습니다. 리로드 기능은 refresh, restart_context, shutdown 세 가지 수준을 지원합니다. 기본적으로 refresh 모드가 사용되며, ConfigMap이 변경될 때 @ConfigurationProperties 또는 @RefreshScope로 주석이 달린 구성 빈만 다시 로드됩니다. ConfigMap이 변경될 때 어떤 빈이 리로드되는지 확인하려면 @ConfigurationProperties 어노테이션의 prefix 필드에 정의된 값으로 접두사가 붙은 속성과 관련된 변경 사항을 감지하고 애플리케이션에 반영해야 합니다. ConfigMap을 Pod와 연결하려면 이 장의 이전에 설명된 configmap-propertysource.html을 참조하십시오."
"스프링 클라우드 카브의 리로드는 어떤 모드를 지원하며 어떤 역할을 하는 건가요?","스프링 클라우드 카브의 리로드 기능은 Event(기본값) 및 Polling 두 가지 모드를 지원합니다. Event 모드는 Kubernetes API(웹소켓)를 사용하여 ConfigMap 또는 Secret의 변경 사항을 감시합니다. Polling 모드는 ConfigMap 및 Secret에서 구성을 주기적으로 다시 생성하여 변경 사항을 확인합니다. Event 모드는 config map 변경 사항을 듣기 위해 서비스 계정에 view 역할이 필요하며, secrets의 경우 더 높은 수준의 역할(예: edit)이 필요합니다. Polling 모드에서는 모니터링되는 속성 소스에 필요한 역할이 동일합니다. 이는 예를 들어 파일 기반 Secret 소스에 대한 폴링을 사용할 때 특별한 권한이 필요하지 않음을 의미합니다."
"스프링 클라우드 카브의 리로드 기능은 이전 버전과의 호환성을 어떻게 제공하나요?","PropertySource Reload 기능은 2020.0 버전에서 사용되지 않습니다. 대신, 동일한 기능을 달성하기 위해 spring-cloud-kubernetes-configuration-watcher.html의 null 컨트롤러를 참조하십시오. 일부 애플리케이션은 외부 속성 소스의 변경 사항을 감지하고 새 구성을 반영하도록 내부 상태를 업데이트해야 할 수 있습니다. 이전 버전의 PropertySource Reload를 사용하는 경우, 대체 방법을 위해 해당 컨트롤러를 참조하십시오."
"Spring Boot의 HealthIndicator는 어떻게 사용되나요?","Spring Boot의 HealthIndicator는 애플리케이션의 상태에 대한 정보를 노출하는 데 사용됩니다. 이를 통해 사용자에게 상태 관련 정보를 노출하고, 준비성 프로브로 사용하기에 적합합니다. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/html/#pod-health-indicator)"
"Kubernetes 건강 표시기는 어떤 정보를 노출하나요?","Kubernetes 건강 표시기는 팟 이름, IP 주소, 네임스페이스, 서비스 계정, 노드 이름 및 IP 주소, 그리고 Spring Boot 애플리케이션이 Kubernetes 내부 또는 외부인지 여부를 나타내는 플래그를 노출합니다. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/html/#pod-health-indicator)"
"Kubernetes 건강 표시기를 비활성화하는 방법은 무엇인가요?","Kubernetes 건강 표시기를 비활성화하려면 application.properties 또는 application.yaml 파일에서 management.health.kubernetes.enabled 속성을 false로 설정하면 됩니다. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/html/#pod-health-indicator)"
"스프링 클라우드 카프카에서 리더 선거란 무엇인가요?","스프링 클라우드 카프카에서 리더 선거은 동일한 클러스터에서 동일한 역할을 가진 다수의 애플리케이션 인스턴스가 있을 때, 하나의 인스턴스만이 리더 역할을 수행하도록 하는 메커니즘입니다. 이를 위해 Kubernetes ConfigMap을 사용하여 구현됩니다."
"리더 선거에서 애플리케이션 인스턴스는 어떻게 경쟁하나요?","리더 선거에서 애플리케이션 인스턴스는 주기적으로 리더십을 획득하려고 시도하며, 첫 번째로 호출된 인스턴스에게 리더십이 부여됩니다. 이 인스턴스는 리더십 컨텍스트를 가진 OnGrantedEvent 애플리케이션 이벤트를 받습니다."
"리더십을 획득한 인스턴스는 어떻게 리더로 유지되나요?","리더십을 획득한 인스턴스는 클러스터에서 제거되거나 리더십을 포기할 때까지 리더로 유지됩니다. 리더십 제거가 발생하면 이전 리더는 OnRevokedEvent 애플리케이션 이벤트를 받고, 그 후에는 클러스터 내의 다른 인스턴스가 새로운 리더가 될 수 있습니다."
"스프링 클라우드에서 쿠버네티스 로드 밸런싱을 위해 어떤 의존성을 포함해야 하나요?","Fabric8 구현의 경우, 의존성으로 'org.springframework.cloud:spring-cloud-starter-kubernetes-fabric8-loadbalancer'를 포함해야 합니다. Kubernetes Java Client 구현의 경우, 'org.springframework.cloud:spring-cloud-starter-kubernetes-client-loadbalancer'를 포함해야 합니다. (출처: <https://docs.spring.io/spring-cloud-kubernetes/reference/html/#load-balancer-getting-started>)"
"스프링 클라우드에서 쿠버네티스 로드 밸런서는 어떤 모드로 동작할 수 있나요?","스프링 클라우드에서 쿠버네티스 로드 밸런서는 POD 모드와 SERVICE 모드로 동작할 수 있습니다. 모드는 'spring.cloud.kubernetes.loadbalancer.mode' 속성을 통해 설정할 수 있으며, 기본값은 POD입니다. (출처: <https://docs.spring.io/spring-cloud-kubernetes/reference/html/#load-balancer-getting-started>)"
"POD 모드에서 스프링 클라우드 로드 밸런서는 어떤 HTTP 포트를 사용하여 서비스를 호출하나요?","POD 모드에서 스프링 클라우드 로드 밸런서는 서비스의 포트 이름과 일치하는 'spring.cloud.kubernetes.loadbalancer.portName' 속성을 사용합니다. 일치하는 항목을 찾을 수 없는 경우, 목록에서 첫 번째 포트를 사용합니다. (출처: <https://docs.spring.io/spring-cloud-kubernetes/reference/html/#load-balancer-getting-started>)"
"Kubernetes에서 Spring Cloud 애플리케이션의 서비스 등록은 누가 제어하나요?","Spring Cloud 애플리케이션의 서비스 등록은 Kubernetes 플랫폼에서 제어됩니다. (Source: https://docs.spring.io/spring-cloud-kubernetes/reference/service-registry.html)"
"Kubernetes에서 spring.cloud.service-registry.auto-registration.enabled 속성은 어떤 영향을 미치나요?","Kubernetes에서 spring.cloud.service-registry.auto-registration.enabled 또는 @EnableDiscoveryClient(autoRegister=false)를 설정하는 것은 Spring Cloud Kubernetes에서 영향을 미치지 않습니다. (Source: https://docs.spring.io/spring-cloud-kubernetes/reference/service-registry.html)"
"Kubernetes에서 Spring Cloud 애플리케이션의 서비스 등록에 대해 어떤 설정이 영향을 미치나요?","Kubernetes에서는 Spring Cloud Kubernetes에 특화된 설정인 spring.cloud.kubernetes.enabled 속성이 서비스 등록 및 발견에 영향을 미칩니다. (Source: https://docs.spring.io/spring-cloud-kubernetes/reference/html/#getting-started)"
"Spring Cloud Kubernetes Configuration Watcher는 무엇이며, 어떤 역할을 하나요?","Spring Cloud Kubernetes Configuration Watcher는 Kubernetes 클러스터에서 Spring Cloud 앱의 구성을 모니터링하고, ConfigMap 또는 Secret의 변경 사항을 감지하면 /refresh 액추에이터 엔드포인트를 호출하여 애플리케이션 컨텍스트를 새로고침하는 컨트롤러입니다. 이는 Docker Hub에서 컨테이너로 제공되거나, 사용자가 GitHub의 소스 코드에서 직접 이미지를 빌드하여 사용할 수 있습니다. 배포.yaml 파일에서 환경 변수를 제공하여 구성할 수 있습니다."
"Spring Cloud Kubernetes Configuration Watcher를 사용자 정의하려면 어떻게 해야 하나요?","Spring Cloud Kubernetes Configuration Watcher를 사용자 정의하려면 GitHub의 소스 코드에서 직접 이미지를 빌드하거나, 배포.yaml 파일에 환경 변수를 제공하여 구성할 수 있습니다. DEBUG 로깅 레벨을 활성화하고, 모니터링할 네임스페이스를 선택하고, ConfigMap 또는 Secret의 변경 사항을 감지하기 위한 레이블을 설정하는 등의 구성이 가능합니다."
"Spring Cloud Kubernetes Configuration Watcher는 어떻게 애플리케이션에 변경 사항을 알릴 수 있나요?","Spring Cloud Kubernetes Configuration Watcher는 애플리케이션에 변경 사항을 알리는 두 가지 방법이 있습니다. 첫 번째는 HTTP를 통해 애플리케이션의 /refresh 액추에이터 엔드포인트를 호출하는 것이고, 두 번째는 Spring Cloud Bus를 사용하여 메시지 브로커를 통해 애플리케이션에 알리는 것입니다. 메시지 브로커를 사용하는 경우, RabbitMQ 또는 Kafka를 구성할 수 있습니다."
"스프링 클라우드 컨피그 서버를 쿠버네티스에서 사용하기 위해 어떤 프로파일을 활성화해야 하나요?","스프링 클라우드 컨피그 서버를 쿠버네티스에서 사용하기 위해서는 `kubernetes` 프로파일을 활성화해야 합니다. 이는 `spring.cloud.kubernetes.secrets.enableApi`와 `spring.cloud.kubernetes.config.enableApi` 속성을 사용하여 Secrets와 Config Maps를 사용할 수 있도록 설정할 수 있습니다. 또한, `spring.cloud.kubernetes.configserver.config-map-namespaces`와 `spring.cloud.kubernetes.configserver.secrets-namespaces`를 설정하여 추가 네임스페이스에서 Config Maps와 Secrets를 가져올 수 있습니다. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/html/#_enabling_the_kubernetes_environment_repository)"
"스프링 클라우드 컨피그 서버를 쿠버네티스에 배포하는 방법은 무엇인가요?","스프링 클라우드 컨피그 서버를 쿠버네티스에 배포하기 위해서는 Docker Hub에서 기본 이미지를 사용하거나, GitHub에서 소스 코드를 가져와 직접 이미지를 빌드할 수 있습니다. 배포를 위해서는 Deployment, Service, Service Account 및 RoleBinding 등의 구성을 설정해야 합니다. 또한, Config Server가 Config Maps와 Secrets를 가져올 수 있도록 적절한 액세스 제어를 설정해야 합니다. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/html/#_deployment_yaml)"
"스프링 클라우드 컨피그 서버에서 Config Maps와 Secrets를 사용하지 않도록 설정하는 방법은 무엇인가요?","스프링 클라우드 컨피그 서버에서 Config Maps와 Secrets를 사용하지 않도록 설정하려면, 각각 `spring.cloud.kubernetes.config.enableApi`와 `spring.cloud.kubernetes.secrets.enableApi` 속성을 false로 설정하면 됩니다. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/html/#_enabling_the_kubernetes_environment_repository)"
"스프링 클라우드 쿠버네티스 디스커버리 서버는 어떤 역할을 하나요?","스프링 클라우드 쿠버네티스 디스커버리 서버는 HTTP 엔드포인트를 제공하여 애플리케이션을 통해 쿠버네티스 클러스터 내에서 사용 가능한 서비스에 대한 정보를 수집할 수 있습니다. 이 서버는 spring-cloud-starter-kubernetes-discoveryclient를 사용하는 애플리케이션에서 해당 스타터에서 제공하는 DiscoveryClient 구현에 데이터를 제공합니다."
"스프링 클라우드 디스커버리 서버는 어떤 권한이 필요한가요?","스프링 클라우드 디스커버리 서버는 Pod, Service 및 Endpoint 리소스에 대한 데이터를 가져오기 위해 쿠버네티스 API 서버를 사용하므로, 해당 엔드포인트를 사용하기 위해 list, watch 및 get 권한이 필요합니다. 이러한 권한을 구성하는 방법에 대한 예제는 아래 샘플 쿠버네티스 배포 YAML을 참조하십시오."
"스프링 클라우드 쿠버네티스 디스커버리 서버의 엔드포인트는 무엇인가요?","서버에서 노출되는 세 가지 엔드포인트가 있습니다. /apps는 사용 가능한 서비스 목록을 반환하고, /apps/{name}은 특정 서비스의 인스턴스 데이터를 가져오며, /app/{name}/{instanceid}는 지정된 서비스의 특정 인스턴스에 대한 인스턴스 데이터를 반환합니다. 이러한 엔드포인트의 응답 예제는 정보 섹션에 제공됩니다."
"Spring Cloud Kubernetes에서 Spring Cloud interfaces를 따르는 것이 어떤 이점이 있나요?","Spring Cloud interfaces를 따르면 Spring Cloud Kubernetes는 Kubernetes Native Services를 애플리케이션에서 투명하게 소비할 수 있도록 도와줍니다. 이를 통해 애플리케이션은 Eureka discovery client와 같은 다른 의존성을 제거하고, spring-cloud-kubernetes-discovery 및 spring-cloud-kubernetes-config 의존성을 추가하여 Kubernetes에서 서비스 발견 및 구성을 관리할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/html/#_examples)"
"Spring Cloud Kubernetes를 사용하는 방법에 대한 예제는 어디에서 찾을 수 있나요?","Spring Cloud Kubernetes를 사용하는 방법에 대한 예제는 Spring Cloud Kubernetes Examples 저장소, Minions and Boss Minion 및 Boss 저장소, Spring Cloud Kubernetes Full Example 저장소, 그리고 Showcase Admin Tool 저장소에서 찾을 수 있습니다. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/html/#_examples)"
"Spring Cloud Kubernetes를 사용할 때 어떤 의존성을 제거해야 하나요?","Spring Cloud Kubernetes를 사용할 때 DiscoveryClient 구현체를 포함하는 다른 의존성(예: Eureka discovery client)과 PropertySourceLocator 구현체를 포함하는 다른 의존성(예: configuration server client)을 제거해야 합니다. 대신 spring-cloud-kubernetes-discovery 및 spring-cloud-kubernetes-config 의존성을 추가해야 합니다. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/html/#_examples)"
"Spring Cloud Kubernetes에 대한 추가 자료는 어디에서 찾을 수 있나요?","Spring Cloud Kubernetes에 대한 추가 자료는 프레젠테이션(슬라이드) 및 비디오와 같은 다른 자료를 나열한 섹션에서 찾을 수 있습니다. 예를 들어, 'S1P Spring Cloud on PKS(https://salaboy.com/2018/09/27/the-s1p-experience/)', 'Spring Cloud, Docker, Kubernetes → London Java Community July 2018(https://salaboy.com/2018/07/18/ljc-july-18-spring-cloud-docker-k8s/)' 등이 있습니다. 다른 자료를 제출하려면 이 저장소(https://github.com/spring-cloud/spring-cloud-kubernetes)의 풀 리퀘스트를 통해 자유롭게 제출할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/html/other-resources.html)"
"Spring Cloud, Docker, Kubernetes에 대한 프레젠테이션은 어디에서 찾을 수 있나요?","Spring Cloud, Docker, Kubernetes에 대한 프레젠테이션은 'Spring Cloud, Docker, Kubernetes → London Java Community July 2018(https://salaboy.com/2018/07/18/ljc-july-18-spring-cloud-docker-k8s/)'에서 찾을 수 있습니다. 이 프레젠테이션은 2018년 7월 런던 자바 커뮤니티에서 발표되었습니다. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/html/other-resources.html)"
"Spring Cloud Kubernetes에 대한 추가 자료를 제출하려면 어떻게 해야 하나요?","Spring Cloud Kubernetes에 대한 추가 자료를 제출하려면 이 저장소(https://github.com/spring-cloud/spring-cloud-kubernetes)의 풀 리퀘스트를 통해 자유롭게 제출할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-kubernetes/reference/html/other-resources.html)"
