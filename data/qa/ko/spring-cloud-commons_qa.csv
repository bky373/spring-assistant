"스프링 클라우드의 라이선스 유형은 무엇인가요?","스프링 클라우드는 Apache 2.0 라이선스로 배포됩니다. (출처: {https://docs.spring.io/spring-cloud-commons/reference/htmlsingle/})"
"스프링 클라우드 문서에 기여하거나 오류를 수정하려면 어떻게 해야 하나요?","스프링 클라우드 문서에 기여하거나 오류를 수정하려면 해당 프로젝트의 소스 코드와 이슈 트래커가 있는 GitHub(https://github.com/spring-cloud/spring-cloud-commons/issues/)에서 참여할 수 있습니다. (출처: {https://docs.spring.io/spring-cloud-commons/reference/htmlsingle/})"
"스프링 클라우드의 공식 문서 위치는 어디인가요?","스프링 클라우드의 공식 문서는 다음 링크에서 확인할 수 있습니다: {https://docs.spring.io/spring-cloud-commons/reference/htmlsingle/}. (출처: {https://docs.spring.io/spring-cloud-commons/reference/htmlsingle/})"
"클라우드 네이티브란 무엇이며, 지속적인 제공과 가치 중심 개발의 모범 사례를 쉽게 채택할 수 있는 방법은 무엇인가요?","클라우드 네이티브는 지속적인 제공과 가치 중심 개발의 모범 사례를 쉽게 채택할 수 있는 애플리케이션 개발 스타일입니다. 이를 위해 Spring Cloud는 분산 시스템의 모든 구성 요소가 쉽게 액세스할 수 있는 기능 세트를 제공합니다. 이러한 기능 중 많은 부분은 Spring Boot에서 다루어지며, Spring Cloud는 이를 기반으로 구축됩니다. 또한, Spring Cloud는 Spring Cloud Context와 Spring Cloud Commons라는 두 개의 라이브러리를 통해 추가 기능을 제공합니다. Spring Cloud Context는 Spring Cloud 애플리케이션의 ApplicationContext에 대한 유틸리티와 특수 서비스를 제공하며, Spring Cloud Commons는 Spring Cloud 구현에서 사용되는 추상화와 공통 클래스 세트입니다. (출처: https://docs.spring.io/spring-cloud-commons/reference/intro.html)"
"클라우드 네이티브 개발에서 12 요소 애플리케이션과 관련된 학문은 무엇인가요?","클라우드 네이티브 개발에서 12 요소 애플리케이션과 관련된 학문은 선언적 프로그래밍 및 관리 및 모니터링과 같은 개발 관행이 제공 및 운영 목표와 일치하는 12 요소 애플리케이션 구축입니다. (출처: https://docs.spring.io/spring-cloud-commons/reference/intro.html)"
"Spring Cloud Context와 Spring Cloud Commons는 어떤 기능을 제공하며, Spring Cloud에서 어떻게 사용되나요?","Spring Cloud Context는 Spring Cloud 애플리케이션의 ApplicationContext에 대한 유틸리티와 특수 서비스를 제공하며, Spring Cloud Commons는 Spring Cloud 구현에서 사용되는 추상화와 공통 클래스 세트입니다. 이들은 Spring Cloud에서 클라우드 네이티브 개발 스타일을 지원하는 두 가지 라이브러리입니다. (출처: https://docs.spring.io/spring-cloud-commons/reference/intro.html)"
"스프링 클라우드 부트 애플리케이션에서 외부 설정 속성을 로드하는 데 사용되는 컨텍스트는 무엇인가요?","부트스트랩 컨텍스트는 외부 설정 속성을 로드하는 데 사용됩니다."
"부트스트랩 컨텍스트와 메인 애플리케이션 컨텍스트 간의 차이점은 무엇인가요?","부트스트랩 컨텍스트는 메인 애플리케이션의 부모 컨텍스트이며, 외부 소스에서 설정 속성을 로드하고 로컬 외부 설정 파일에서 속성을 해독하는 역할을 합니다. 메인 애플리케이션 컨텍스트는 부트스트랩 컨텍스트에서 추가된 속성 소스를 포함한 모든 Spring 애플리케이션의 외부 속성 소스인 Environment를 공유합니다."
"부트스트랩 컨텍스트에서 원격 속성에 대한 로컬 오버라이드를 활성화하려면 어떻게 해야 하나요?","원격 속성에 대한 로컬 오버라이드를 활성화하려면 spring.cloud.config.allowOverride=true를 설정해야 합니다."
"Spring Cloud Commons에서 @EnableDiscoveryClient 어노테이션의 역할은 무엇인가요?","Spring Cloud Commons에서 @EnableDiscoveryClient 어노테이션은 DiscoveryClient 및 ReactiveDiscoveryClient 인터페이스의 구현을 META-INF/spring.factories에서 검색합니다. DiscoveryClient 구현체는 spring.factories의 org.springframework.cloud.client.discovery.EnableDiscoveryClient 키 아래에 구성 클래스를 추가합니다."
"Spring Cloud Commons에서 Spring Boot 애플리케이션이 서비스 디스커버리 서버에 등록되는 방법은 무엇인가요?","Spring Cloud Commons에서 DiscoveryClient 구현체의 기본 동작은 로컬 Spring Boot 서버를 원격 디스커버리 서버에 자동으로 등록하는 것입니다. 이 동작은 @EnableDiscoveryClient의 autoRegister=false를 설정하여 비활성화할 수 있습니다."
"Spring Cloud Commons에서 사용 가능한 Spring Boot 건강 표시기의 몇 가지 예시를 알려주세요.","Spring Cloud Commons에서 사용 가능한 Spring Boot 건강 표시기의 몇 가지 예시는 DiscoveryClientHealthIndicator 및 DiscoveryCompositeHealthContributor가 있습니다. DiscoveryClientHealthIndicator는 현재 등록된 DiscoveryClient 구현체를 기반으로 하며, DiscoveryCompositeHealthContributor는 등록된 모든 DiscoveryHealthIndicator 빈을 기반으로 합니다."
"Spring Cloud LoadBalancer가 어떤 로드 밸런싱 메커니즘을 제공하나요?","Spring Cloud LoadBalancer는 ReactiveLoadBalancer 인터페이스를 제공하며, Round-Robin 및 Random 구현을 포함합니다."
"Spring Cloud LoadBalancer의 로드 밸런싱 알고리즘을 변경하는 방법은 무엇인가요?","사용자 정의 LoadBalancer 구성을 사용하여 로드 밸런싱 알고리즘을 변경할 수 있습니다. 예를 들어, @LoadBalancerClient 어노테이션을 사용하여 RandomLoadBalancer를 사용하도록 전환할 수 있습니다."
"Spring Cloud LoadBalancer에서 LoadBalancer 캐싱이란 무엇인가요?","LoadBalancer 캐싱은 서비스 발견을 통해 인스턴스를 검색할 때마다 검색하는 대신, 서비스 인스턴스 목록을 캐시하여 성능을 향상시키는 메커니즘입니다. Caffeine-based 및 default 두 가지 캐싱 구현을 제공합니다."
"Spring Cloud Context의 CachedRandomPropertySource는 어떤 역할을 하나요?","Spring Cloud Context의 CachedRandomPropertySource는 키를 기반으로 랜덤 값을 캐시하는 PropertySource를 제공합니다. 이 캐싱 기능은 Spring Boot의 RandomValuePropertySource와 동일한 방식으로 작동합니다. 이 랜덤 값은 Spring Application 컨텍스트가 재시작된 후에도 일관성을 유지합니다. 속성 값은 cachedrandom.[yourkey].[type] 형식을 따르며, yourkey는 캐시의 키이고 type은 Spring Boot의 RandomValuePropertySource에서 지원하는 모든 타입일 수 있습니다. 예를 들어, myrandom=${cachedrandom.appname.value}와 같이 사용할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-commons/reference/html/cachedrandompropertysource.html)"
"CachedRandomPropertySource의 사용 사례는 어떤 것이 있나요?","CachedRandomPropertySource는 Spring Application 컨텍스트가 재시작된 후에도 일관된 랜덤 값이 필요한 경우에 유용합니다. 예를 들어, 애플리케이션의 고유 식별자를 생성하거나 테스트 시나리오에서 랜덤 값을 사용할 때 사용할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-commons/reference/html/cachedrandompropertysource.html)"
"CachedRandomPropertySource의 속성 값 형식은 어떻게 되나요?","CachedRandomPropertySource의 속성 값은 cachedrandom.[yourkey].[type] 형식을 따릅니다. 여기서 yourkey는 캐시의 키이고 type은 Spring Boot의 RandomValuePropertySource에서 지원하는 모든 타입일 수 있습니다. 예를 들어, myrandom=${cachedrandom.appname.value}와 같이 사용할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-commons/reference/html/cachedrandompropertysource.html)"
"OAuth2 SSO 및 리소스 서버 기능은 Spring 부트에서 어떤 버전에 이동되었나요?","OAuth2 SSO 및 리소스 서버 기능은 Spring Boot 1.3에서 이동되었습니다. (출처: https://docs.spring.io/spring-cloud-commons/reference/htmlsingle/#security)"
"사용자 대면 OAuth2 클라이언트에서 OAuth2ClientContext를 어떻게 얻을 수 있나요?","사용자 대면 OAuth2 클라이언트에서는 Spring Boot에서 제공하는 OAuth2ClientContext를 요청 범위에서 얻을 수 있습니다. 이를 사용하여 OAuth2RestTemplate을 생성하고, 자동으로 액세스 토큰을 전달하고 갱신할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-commons/reference/htmlsingle/#security)"
"리소스 서버에서 들어오는 토큰을 하위 서비스로 전달하려면 어떻게 해야 하나요?","리소스 서버에서는 RestTemplate을 사용하여 하위 서비스와 통신할 때, 올바른 컨텍스트로 템플릿을 생성하는 방법만 알면 됩니다. UserInfoTokenServices를 사용하여 들어오는 토큰을 인증하는 경우, 자동으로 인증 프로세스에 의해 채워지는 OAuth2RestTemplate을 생성할 수 있습니다. 또는 Spring Boot 1.4 이상에서는 UserInfoRestTemplateFactory를 주입하여 OAuth2RestTemplate을 가져올 수 있습니다. (출처: https://docs.spring.io/spring-cloud-commons/reference/htmlsingle/#security)"
"Spring Cloud Circuit Breaker는 무엇인가요?","Spring Cloud Circuit breaker는 다양한 서킷 브레이커 구현에 대한 추상화를 제공하는 프로젝트입니다. 이를 통해 애플리케이션에서 일관된 API를 사용하여 서킷 브레이커 구현을 선택할 수 있습니다. (출처: <https://docs.spring.io/spring-cloud-commons/reference/html/#spring-cloud-circuitbreaker-introduction>)"
"Spring Cloud에서 지원하는 서킷 브레이커 구현은 무엇인가요?","Spring Cloud는 다음과 같은 서킷 브레이커 구현을 지원합니다: Resilience4J, Sentinel, Spring Retry. (출처: <https://docs.spring.io/spring-cloud-commons/reference/html/#spring-cloud-circuitbreaker-supported-implementations>)"
"Spring Cloud에서 서킷 브레이커를 생성하는 방법은 무엇인가요?","Spring Cloud에서 서킷 브레이커를 생성하려면 CircuitBreakerFactory API를 사용할 수 있습니다. 이 API를 구현하는 빈이 클래스패스에 Spring Cloud Circuit Breaker 스타터가 포함되면 자동으로 생성됩니다. CircuitBreakerFactory.create API를 사용하여 CircuitBreaker 또는 ReactiveCircuitBreakerFactory를 생성할 수 있습니다. (출처: <https://docs.spring.io/spring-cloud-commons/reference/html/#spring-cloud-circuitbreaker-core-concepts>)"
"스프링 클라우드 커먼즈에서 애플리케이션 속성을 지정하는 방법은 무엇인가요?","스프링 클라우드 커먼즈에서 애플리케이션 속성을 지정하는 방법은 application.properties 파일, application.yml 파일 또는 명령줄 스위치를 사용하는 것입니다. 이 문서는 일반적인 스프링 클라우드 커먼즈 속성 목록과 해당 속성을 소비하는 기본 클래스에 대한 참조를 제공합니다."
"스프링 클라우드 커먼즈에서 Circuit Breaker의 동작을 관찰하기 위해 어떤 메트릭과 스패너가 사용되나요?","스프링 클라우드 커먼즈에서 Circuit Breaker의 동작을 관찰하기 위해 timer 유형의 메트릭 spring.cloud.circuitbreaker와 long task timer 유형의 메트릭 spring.cloud.circuitbreaker.active가 사용됩니다. 또한, Circuit Breaker Function Observation Span과 Circuit Breaker Supplier Observation Span이라는 두 가지 스패너가 사용됩니다. 이 스패너들은 spring.cloud.circuitbreaker.type 태그 키를 사용하여 Circuit Breaker에 의해 래핑된 람다의 유형을 정의합니다."
"스프링 클라우드 커먼즈에서 Circuit Breaker의 동작을 관찰하기 위해 어떤 컨벤션 클래스가 사용되나요?","스프링 클라우드 커먼즈에서 Circuit Breaker의 동작을 관찰하기 위해 DefaultCircuitBreakerObservationConvention이라는 컨벤션 클래스가 사용됩니다. 이 클래스는 메트릭과 스패너의 이름을 정의하는 데 사용됩니다."
"스프링 클라우드 호환성 검증 기능을 활성화하려면 어떤 구성 속성을 사용해야 하나요?","스프링 클라우드 호환성 검증 기능을 활성화하려면 `spring.cloud.compatibility-verifier.enabled` 속성을 true로 설정하면 됩니다. (출처: https://docs.spring.io/spring-cloud-commons/reference/configprops.html)"
"스프링 클라우드 부트에서 컨텍스트 리프레시 이벤트 시 부트스트랩 구성을 초기화하려면 어떤 구성 속성을 사용해야 하나요?","스프링 클라우드 부트에서 컨텍스트 리프레시 이벤트 시 부트스트랩 구성을 초기화하려면 `spring.cloud.config.initialize-on-context-refresh` 속성을 true로 설정하면 됩니다. (출처: https://docs.spring.io/spring-cloud-commons/reference/configprops.html)"
"스프링 클라우드 부트에서 시스템 속성을 오버라이드할 수 있는지 여부를 제어하려면 어떤 구성 속성을 사용해야 하나요?","스프링 클라우드 부트에서 시스템 속성을 오버라이드할 수 있는지 여부를 제어하려면 `spring.cloud.config.allow-override` 속성을 사용하면 됩니다. (출처: https://docs.spring.io/spring-cloud-commons/reference/configprops.html)"
