"Spring Cloud Config란 무엇인가요?","Spring Cloud Config는 분산 시스템에서 외부화된 구성을 위한 서버 측 및 클라이언트 측 지원을 제공하는 도구입니다. (출처: https://docs.spring.io/spring-cloud-config/reference/htmlsingle/)"
"Spring Cloud Config를 사용하여 구성을 관리하는 방법은 무엇인가요?","Spring Cloud Config Server를 사용하여 애플리케이션의 외부 속성을 모든 환경에서 중앙에서 관리할 수 있으며, 클라이언트는 서버에서 속성을 가져옵니다. (출처: https://docs.spring.io/spring-cloud-config/reference/htmlsingle/)"
"Spring Cloud Config의 저장소 백엔드로 사용되는 기본 구현은 무엇인가요?","Spring Cloud Config의 저장소 백엔드로 사용되는 기본 구현은 git입니다. (출처: https://docs.spring.io/spring-cloud-config/reference/htmlsingle/)"
"Spring Config Server에서 Environment 객체를 제공하는 역할을 하는 전략은 무엇인가요?","EnvironmentRepository (출처: https://docs.spring.io/spring-cloud-config/reference/server/environment-repository.html)"
"Environment 객체는 Spring Environment에서 어떤 특징을 가지고 있나요?","propertySources가 주요 특징입니다. (출처: https://docs.spring.io/spring-cloud-config/reference/server/environment-repository.html)"
"Repository 구현은 어떤 동작을 일반적으로 하나요?","Spring Boot 애플리케이션처럼 동작하여, {application} 매개변수와 {profiles} 매개변수에 해당하는 구성 파일을 로드합니다. (출처: https://docs.spring.io/spring-cloud-config/reference/server/environment-repository.html)"
"Spring Cloud Config Server에서 패턴 매칭과 다중 리포지토리를 구성하려면 어떻게 해야 하나요?","패턴 매칭과 다중 리포지토리를 구성하려면, {application} 및 {profile} 매개변수를 사용하여 리포지토리 URI에 와일드카드를 사용할 수 있습니다. 또한, 'special' 문자열을 사용하여 슬래시가 포함된 라벨을 지정할 수 있습니다. 'special' 문자열을 사용하여 여러 조직을 지원할 수도 있습니다. 리포지토리마다 config 파일을 하위 디렉토리에 저장하고, search-paths를 사용하여 해당 디렉토리를 검색할 수도 있습니다. 또한, Config Server의 시작 시 리포지토리를 클론하도록 구성할 수 있습니다. HTTPS proxy 설정은 ~/.git/config 또는 시스템 속성( -Dhttps.proxyHost 및 -Dhttps.proxyPort)으로 설정할 수 있습니다. RSA 키는 PEM 형식이 필요합니다. AWS CodeCommit 및 Google Cloud Source에 대한 인증도 지원됩니다. SSH 구성은 ~/.ssh/known_hosts 및 /etc/ssh/ssh_config를 사용하지만, 클라우드 환경에서는 Java 속성을 사용하여 SSH 구성을 설정할 수 있습니다. Git URI가 AWS CodeCommit 패턴과 일치하는 경우, AWS CodeCommit 자격 증명 공급자가 생성됩니다. Google Cloud Source 자격 증명 공급자는 Git URI가 http 또는 https 프로토콜을 사용하고 도메인 이름이 source.developers.google.com인 경우 사용됩니다. Git 검색 경로에 플레이스홀더를 사용할 수도 있습니다. Git 리포지토리에서 강제 풀을 구성하려면 force-pull 속성을 사용할 수 있습니다. Git 리포지토리에서 추적되지 않은 브랜치를 삭제하려면 deleteUntrackedBranches 속성을 사용할 수 있습니다. Git 갱신 속성을 사용하여 Config Server가 Git 백엔드에서 업데이트된 구성 데이터를 가져올 빈도를 제어할 수 있습니다. Git의 기본 레이블은 main이며, 이 동작을 비활성화하려면 spring.cloud.config.server.git.tryMasterBranch를 false로 설정할 수 있습니다. (출처: <https://docs.spring.io/spring-cloud-config/reference/html/#spring-cloud-config-server-environment-repository-git-backend>)"
"Spring Cloud Config Server에서 SSH 구성을 구성하려면 어떻게 해야 하나요?","Spring Cloud Config Server에서 SSH 구성을 구성하려면, ~/.ssh/known_hosts 및 /etc/ssh/ssh_config를 사용하거나 Java 속성을 사용하여 SSH 구성을 설정할 수 있습니다. Cloud Foundry와 같은 클라우드 환경에서는 ephemeral하거나 쉽게 액세스할 수 없는 로컬 파일 시스템을 사용할 수 있습니다. 이러한 경우, Java 속성을 사용하여 SSH 구성을 설정할 수 있습니다. 속성 기반 SSH 구성을 활성화하려면, spring.cloud.config.server.git.ignoreLocalSshSettings 속성을 true로 설정해야 합니다. privateKey, hostKey, hostKeyAlgorithm, strictHostKeyChecking, knownHostsFile 및 preferredAuthentications 속성을 사용하여 SSH 구성을 설정할 수 있습니다. (출처: <https://docs.spring.io/spring-cloud-config/reference/html/#spring-cloud-config-server-environment-repository-git-backend>)"
"Spring Cloud Config Server에서 Git 리포지토리에서 강제 풀을 구성하려면 어떻게 해야 하나요?","Git 리포지토리에서 강제 풀을 구성하려면, spring.cloud.config.server.git.force-pull 속성을 true로 설정하면 됩니다. 이 속성은 기본 복사본이 더러워진 경우(예: OS 프로세스에 의해 폴더 내용이 변경된 경우) Config Server가 원격 리포지토리에서 강제 푸시하도록 만듭니다. 다중 리포지토리 구성이 있는 경우, 각 리포지토리마다 force-pull 속성을 구성할 수 있습니다. force-pull 속성의 기본값은 false입니다. (출처: <https://docs.spring.io/spring-cloud-config/reference/html/#spring-cloud-config-server-environment-repository-git-backend>)"
"VCS 기반 백엔드(git, svn)에서 Spring Cloud Config Server가 파일을 체크아웃하거나 클론하는 위치는 어디인가요?","VCS 기반 백엔드(git, svn)에서 Spring Cloud Config Server가 파일을 체크아웃하거나 클론할 때, 기본적으로 시스템 임시 디렉토리에 config-repo- 접두사가 붙은 디렉토리에 파일을 저장합니다. 예를 들어, 리눅스에서는 /tmp/config-repo-<randomid>와 같은 경로에 저장될 수 있습니다. (출처: https://docs.spring.io/spring-cloud-config/reference/server/environment-repository/version-control-backend-filesystem-use.html)"
"Spring Cloud Config Server가 사용하는 디렉토리를 시스템 임시 디렉토리에서 변경하려면 어떻게 해야 하나요?","Spring Cloud Config Server가 사용하는 디렉토리를 시스템 임시 디렉토리에서 변경하려면, spring.cloud.config.server.git.basedir 또는 spring.cloud.config.server.svn.basedir 속성을 설정하여 시스템 임시 구조에 속하지 않는 디렉토리로 변경할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-config/reference/server/environment-repository/version-control-backend-filesystem-use.html)"
"Spring Cloud Config Server가 시스템 임시 디렉토리에 저장된 파일을 사용하는 경우, 어떤 문제가 발생할 수 있나요?","Spring Cloud Config Server가 시스템 임시 디렉토리에 저장된 파일을 사용하는 경우, 일부 운영 체제에서는 임시 디렉토리를 정기적으로 정리할 수 있어, 프로퍼티 파일이 사라지는 등의 문제가 발생할 수 있습니다. 이 문제를 방지하기 위해, Config Server가 사용하는 디렉토리를 시스템 임시 디렉토리가 아닌 다른 디렉토리로 변경해야 합니다. (출처: https://docs.spring.io/spring-cloud-config/reference/server/environment-repository/version-control-backend-filesystem-use.html)"
"스프링 클라우드 Config Server에서 'native' 프로필은 어떤 역할을 하며, 어떻게 활성화할 수 있나요?","스프링 클라우드 Config Server에서 'native' 프로필은 Git을 사용하지 않고 로컬 클래스패스나 파일 시스템에서 구성 파일을 로드하는 프로필입니다. 이 프로필을 사용하려면 Config Server를 spring.profiles.active=native로 실행하면 됩니다. 파일 리소스에는 file: 접두사를 사용하는 것을 기억하세요. (접두사가 없는 경우 기본적으로 클래스패스가 사용됩니다.)"
"파일 시스템 백엔드를 사용하여 Config Server를 프로덕션에서 사용하는 방법은 무엇인가요?","파일 시스템 백엔드를 사용하여 Config Server를 프로덕션에서 사용하려면 파일 시스템이 Config Server의 모든 인스턴스에서 공유되고 안정적인지 확인해야 합니다. searchLocations에는 {application}, {profile}, {label}에 대한 플레이스홀더를 포함할 수 있으며, 이를 통해 경로에서 디렉토리를 분리하고 애플리케이션당 하위 디렉토리 또는 프로필당 하위 디렉토리와 같은 전략을 선택할 수 있습니다."
"스프링 클라우드 Config Server에서 파일 시스템 백엔드를 사용할 때, searchLocations에 플레이스홀더를 포함하지 않으면 어떤 동작이 발생하나요?","스프링 클라우드 Config Server에서 파일 시스템 백엔드를 사용할 때 searchLocations에 플레이스홀더를 포함하지 않으면, 리포지토리는 검색 경로에 레이블 매개변수를 추가하고 레이블과 동일한 이름의 하위 디렉토리에서 속성 파일을 로드합니다. 따라서 플레이스홀더가 없는 기본 동작은 /{label}/으로 끝나는 검색 위치를 추가하는 것과 동일합니다. 예를 들어, file:/tmp/config는 file:/tmp/config,file:/tmp/config/{label}와 동일합니다. 이 동작은 spring.cloud.cloud.config.server.native.addLabelLocations=false로 설정하여 비활성화할 수 있습니다."
"Spring Cloud Config Server에서 Vault 백엔드를 사용하려면 어떻게 해야 하나요?","config server의 application.properties 파일에 spring.profiles.active=vault를 추가하여 vault 프로필로 config server를 실행하면 됩니다. 기본적으로 Spring Cloud Config Server는 Vault에서 구성을 가져오기 위해 Token 기반 인증을 사용합니다."
"Spring Cloud Config Server에서 Vault 백엔드를 사용할 때 어떤 구성 가능한 속성을 사용할 수 있나요?","host, port, scheme, backend, defaultKey, profileSeparator, kvVersion, skipSslValidation, timeout, namespace 등의 속성을 구성할 수 있습니다. 이러한 속성은 모두 spring.cloud.config.server.vault 접두사를 붙여야 합니다."
"Spring Cloud Config Server와 Vault 간의 인증에 Spring Vault Core를 어떻게 사용하나요?","Config Server 앱에 spring-vault-core 종속성을 추가하면 TOKEN 또는 X-Config-Token 헤더 이외의 인증 방법을 사용할 수 있습니다. Spring Cloud Vault에서 지원하는 것과 동일한 구성 속성을 사용하여 인증 방법을 설정할 수 있습니다."
"스프링 클라우드 Config 서버에서 Git 또는 Vault 백엔드에 프록시를 통해 액세스하려면 어떻게 설정해야 하나요?","스프링 클라우드 Config 서버에서 Git 또는 Vault 백엔드에 프록시를 통해 액세스하려면 proxy.http 및 proxy.https 설정 아래의 설정을 구성해야 합니다. 또한, 각 백엔드에 대해 프록시 설정을 구성해야 합니다. HTTP 및 HTTPS URL에 대해 별도의 프록시 서버가 필요한 경우, 단일 백엔드에 대해 HTTP 및 HTTPS 프록시 설정을 모두 구성할 수 있습니다. 이 경우, http 액세스는 http 프록시를 사용하고, https 액세스는 https 프록시를 사용합니다. 또한, 프로토콜 정의 프로토콜을 사용하여 두 프로토콜에 대해 하나의 공통 프록시를 지정할 수 있습니다. 다음 표는 HTTP 및 HTTPS 프록시의 프록시 구성 속성을 설명합니다. 이러한 속성은 모두 proxy.http 또는 proxy.https로 접두사가 지정되어야 합니다."
"스프링 클라우드 Config 서버에서 Git 또는 Vault 백엔드에 대한 프록시 구성 속성은 무엇인가요?","스프링 클라우드 Config 서버에서 Git 또는 Vault 백엔드에 대한 프록시 구성 속성은 다음과 같습니다: host, port, nonProxyHosts, username, password. 이러한 속성은 모두 proxy.http 또는 proxy.https로 접두사가 지정되어야 합니다. 이러한 속성에 대한 자세한 설명은 제공된 정보에서 확인할 수 있습니다."
"스프링 클라우드 Config 서버에서 Git 또는 Vault 백엔드에 대한 프록시 설정을 구성하는 방법은 무엇인가요?","스프링 클라우드 Config 서버에서 Git 또는 Vault 백엔드에 대한 프록시 설정을 구성하려면 다음과 같은 속성을 설정해야 합니다: host, port, nonProxyHosts, username, password. 이러한 속성은 모두 proxy.http 또는 proxy.https로 접두사가 지정되어야 합니다. 또한, HTTP 및 HTTPS URL에 대해 별도의 프록시 서버가 필요한 경우, 단일 백엔드에 대해 HTTP 및 HTTPS 프록시 설정을 모두 구성할 수 있습니다. 이 경우, http 액세스는 http 프록시를 사용하고, https 액세스는 https 프록시를 사용합니다. 또한, 프로토콜 정의 프로토콜을 사용하여 두 프로토콜에 대해 하나의 공통 프록시를 지정할 수 있습니다."
"AWS Parameter Store를 백엔드로 사용할 때, /application 계층 내에 속성을 배치하여 어떻게 모든 애플리케이션과 구성을 공유할 수 있나요?","AWS Parameter Store를 백엔드로 사용할 때, /config/application 계층 내에 속성을 배치하여 모든 애플리케이션과 구성을 공유할 수 있습니다. 예를 들어, /config/application/foo.bar 및 /config/application-default/fred.baz와 같은 이름의 매개변수를 추가하면, 구성 서버를 사용하는 모든 애플리케이션에서 foo.bar 및 fred.baz 속성을 사용할 수 있습니다."
"AWS Parameter Store에서 /application 계층 내에 속성을 추가하여 어떤 애플리케이션에서 사용할 수 있나요?","AWS Parameter Store에서 /application 계층 내에 속성을 추가하면, 구성 서버를 사용하는 모든 애플리케이션에서 해당 속성을 사용할 수 있습니다."
"AWS Parameter Store를 백엔드로 사용할 때, /application-default 계층 내에 속성을 추가해야 하는 이유는 무엇인가요?","AWS Parameter Store를 백엔드로 사용할 때, /application-default 계층 내에 속성을 추가하면 기본값을 설정할 수 있으며, /application 계층 내에 속성이 없는 애플리케이션에서는 /application-default 계층의 속성을 사용합니다."
"Spring Cloud Config Server에서 JDBC 백엔드를 사용하려면 어떤 단계를 따라야 하나요?","먼저, spring-boot-starter-data-jdbc를 classpath에 추가하고 jdbc profile을 사용하거나 JdbcEnvironmentRepository 유형의 빈을 생성하여 JDBC 백엔드를 활성화할 수 있습니다. 그런 다음, 적절한 종속성을 classpath에 포함시켜 Spring Boot가 데이터 소스를 구성하도록 할 수 있습니다. JdbcEnvironmentRepository에 대한 자동 구성을 비활성화하려면 spring.cloud.config.server.jdbc.enabled 속성을 false로 설정하세요. 마지막으로, APPLICATION, PROFILE, LABEL, KEY 및 VALUE 열이 있는 PROPERTIES 테이블을 데이터베이스에 생성하세요."
"Spring Cloud Config Server에서 JDBC 백엔드의 기본 레이블은 무엇인가요?","Spring Cloud Config Server에서 JDBC 백엔드의 기본 레이블은 master입니다. 이를 변경하려면 spring.cloud.config.server.jdbc.defaultLabel 속성을 설정하세요."
"Spring Cloud Config Server에서 JDBC 백엔드의 속성 값은 어떻게 처리되나요?","Spring Cloud Config Server에서 JDBC 백엔드의 속성 값은 Spring Boot 속성 파일에서 가져온 값과 동일한 방식으로 처리됩니다. 이는 암호화 및 복호화를 포함하여 모든 처리가 후처리 단계로 적용됩니다(즉, 저장소 구현 자체에서는 적용되지 않습니다)."
"Spring Cloud Config Server에서 AWS Parameter Store 백엔드를 활성화하려면 어떻게 해야 하나요?","AWS Java SDK for SSM에 대한 종속성을 추가하여 Spring Cloud Config Server에서 AWS Parameter Store 백엔드를 활성화할 수 있습니다. 이를 위해 pom.xml에 <dependency> <groupId>software.amazon.awssdk</groupId> <artifactId>ssm</artifactId> </dependency> 라인을 추가하면 됩니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/spring-cloud-config-server.html#_aws_parameter_store_backend)"
"AWS Parameter Store 클라이언트가 사용하는 지역을 설정하는 방법은 무엇인가요?","AWS Parameter Store 클라이언트가 사용하는 지역을 설정하려면 spring.cloud.config.server.aws.region 속성을 사용할 수 있습니다. 이 속성은 필수이며, 명시적으로 설정하지 않으면 SDK는 Default Region Provider Chain을 사용하여 사용할 지역을 결정하려고 시도합니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/spring-cloud-config-server.html#_aws_parameter_store_backend)"
"AWS Parameter Store 백엔드의 경우 버전 관리된 매개변수를 지원하는 방법은 무엇인가요?","AWS Parameter Store 백엔드의 경우 버전 관리된 매개변수를 지원하려면 기본적으로 최신 버전을 반환하는 동작을 사용하면 됩니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/spring-cloud-config-server.html#_aws_parameter_store_backend)"
"Spring Cloud Config Server에서 AWS Secrets Manager를 백엔드로 사용하려면 어떤 종속성을 추가해야 하나요?","AWS Java SDK for Secrets Manager 종속성을 추가해야 합니다. <dependency> <groupId>software.amazon.awssdk</groupId> <artifactId>secretsmanager</artifactId> </dependency> (출처: https://docs.spring.io/spring-cloud-config/reference/server/environment-repository/aws-secrets-manager-backend.html)"
"Spring Cloud Config Server에서 AWS Secrets Manager를 사용하여 구성 속성에 액세스하려면 어떤 구성이 필요한가요?","spring.profiles.active를 awssecretsmanager로 설정하고, cloud.config.server.aws-secretsmanager.region, endpoint, origin 속성을 구성해야 합니다. (출처: https://docs.spring.io/spring-cloud-config/reference/server/environment-repository/aws-secrets-manager-backend.html)"
"Spring Cloud Config Server에서 AWS Secrets Manager API 자격 증명은 어떻게 결정되나요?","AWS Secrets Manager API 자격 증명은 Default Credential Provider Chain을 사용하여 결정됩니다. (출처: https://docs.spring.io/spring-cloud-config/reference/server/environment-repository/aws-secrets-manager-backend.html)"
"스프링 클라우드 컨피그 서버에서 여러 환경 리포지토리에서 구성 데이터를 가져오려면 어떻게 해야 하나요?","컨피그 서버의 application.properties 또는 application.yml 파일에서 composite 프로필을 활성화하고, composite 키 아래에 리포지토리를 나열하여 우선순위를 지정합니다. spring.cloud.config.server.composite 속성을 사용하여 리포지토리의 순서를 설정할 수 있습니다. 각 리포지토리의 유형에 해당하는 프로필을 활성화하여 서로 다른 유형의 리포지토리에서만 구성 데이터를 가져올 수도 있습니다. Vault 토큰은 이전 예제와 같은 복합 환경에 Vault 서버가 포함된 경우 컨피그 서버에 대한 모든 요청에 포함되어야 합니다. 환경 리포지토리에서 값을 검색하는 데 실패하면 전체 복합 환경에 대한 실패가 발생합니다. 리포지토리가 실패하더라도 복합체가 계속되도록 하려면 spring.cloud.config.server.failOnCompositeError를 false로 설정할 수 있습니다. 복합 환경에는 동일한 레이블이 포함된 모든 리포지토리가 있어야 합니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/spring-cloud-config-server.html#spring-cloud-config-server-composite-repositories)"
"스프링 클라우드 컨피그 서버에서 복합 환경 리포지토리를 사용할 때 사용자 정의 EnvironmentRepository 빈을 포함하려면 어떻게 해야 하나요?","bean은 EnvironmentRepository 인터페이스를 구현해야 하며, 복합 환경 내에서 사용자 정의 EnvironmentRepository의 우선 순위를 제어하려면 Ordered 인터페이스를 구현하고 getOrdered 메서드를 재정의해야 합니다. Ordered 인터페이스를 구현하지 않으면 EnvironmentRepository는 가장 낮은 우선 순위를 갖습니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/spring-cloud-config-server.html#spring-cloud-config-server-composite-repositories)"
"스프링 클라우드 컨피그 서버에서 복합 환경 리포지토리의 우선순위는 어떻게 결정되나요?","우선순위는 composite 키 아래에 리포지토리가 나열되는 순서에 따라 결정됩니다. composite 속성을 사용하여 리포지토리의 순서를 설정할 수 있습니다. order 속성을 사용하여 모든 리포지토리에 대한 우선순위 순서를 지정할 수 있습니다. order 속성의 숫자 값이 낮을수록 우선순위가 높아집니다. 리포지토리의 우선순위 순서는 동일한 속성에 대한 값을 포함하는 리포지토리 간의 잠재적인 충돌을 해결하는 데 도움이 됩니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/spring-cloud-config-server.html#spring-cloud-config-server-composite-repositories)"
"스프링 클라우드 구성 서버에서 외부 환경 저장소에서 클라이언트 설정이 구성을 덮어쓰도록 활성화하려면 어떤 두 가지 속성이 필요한가요?","spring.cloud.config.allowOverride=true 및 spring.cloud.config.overrideNone=true입니다. (출처: https://docs.spring.io/spring-cloud-config/reference/server/environment-repository/using-bootstrap-to-override-properties.html)"
"스프링 클라우드 구성 서버를 사용하여 클라이언트 애플리케이션 구성을 덮어쓰려면 어떻게 해야 하나요?","config first bootstrap을 활성화하고, 애플리케이션의 구성에 두 가지 속성을 추가하여 외부 환경 저장소에 위치시킵니다. (출처: https://docs.spring.io/spring-cloud-config/reference/server/environment-repository/using-bootstrap-to-override-properties.html)"
"스프링 클라우드 구성 서버에서 구성 덮어쓰기가 활성화되면 어떤 동작이 발생하나요?","클라이언트 애플리케이션의 구성에서 구성 서버의 구성을 덮어쓸 수 있습니다. (출처: https://docs.spring.io/spring-cloud-config/reference/server/environment-repository/using-bootstrap-to-override-properties.html)"
"Spring Cloud Config Server에서 어떻게 속성을 오버라이드할 수 있나요?","Spring Cloud Config Server에서 속성을 오버라이드하는 더 깔끔한 방법은 Config Server에서 오는 구성에서 속성 플레이스홀더를 사용하는 것입니다. 예를 들어, Config Server에서 오는 구성이 다음 속성을 포함하는 경우 hello=${app.hello:Hello From Config Server!} 로컬 애플리케이션 구성에서 app.hello를 설정하여 Config Server에서 오는 hello의 값을 오버라이드할 수 있습니다. app.hello=Hello From Application!"
"Spring Cloud Config Server에서 속성을 오버라이드하는 다른 방법은 무엇인가요?","Spring Cloud Config Server에서 속성을 오버라이드하는 다른 방법은 config first bootstrap을 활성화하고 로컬 애플리케이션 구성의 속성이 Config Server의 속성보다 우선하도록 하는 것입니다."
"Spring Cloud Config Server에서 속성을 오버라이드하는 데 사용되는 속성 플레이스홀더의 구문은 무엇인가요?","Spring Cloud Config Server에서 속성을 오버라이드하는 데 사용되는 속성 플레이스홀더의 구문은 ${property:defaultValue}입니다. 여기서 'property'는 값을 오버라이드하려는 속성의 이름이고 'defaultValue'는 해당 속성에 대한 기본값입니다."
"Spring Cloud Config Server에서 클라이언트 애플리케이션에서 속성을 재정의하는 방법은 무엇인가요?","Spring Cloud Config Server에서 클라이언트 애플리케이션에서 속성을 재정의하는 방법은 프로필별 구성 파일에 지정하는 것입니다. 예를 들어, Config Server에서 다음과 같은 구성이 있다고 가정해 봅시다: hello='Hello From Config Server!'. 클라이언트 애플리케이션에서 hello 속성의 값을 재정의하려면 hello를 프로필별 구성 파일에 설정한 다음 해당 프로필을 활성화하면 됩니다. application-overrides.properties hello='Hello From Application!'. 위의 예에서는 overrides 프로필을 활성화해야 합니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/#overriding-properties-using-profiles)"
"Spring Cloud Config Server에서 속성을 재정의하는 데 사용되는 프로필별 구성 파일의 형식은 무엇인가요?","Spring Cloud Config Server에서 속성을 재정의하는 데 사용되는 프로필별 구성 파일은 .properties 형식이어야 합니다. 예를 들어, application-overrides.properties입니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/#overriding-properties-using-profiles)"
"Spring Cloud Config Server에서 속성을 재정의하는 데 사용되는 프로필을 활성화하는 방법은 무엇인가요?","Spring Cloud Config Server에서 속성을 재정의하는 데 사용되는 프로필을 활성화하는 방법은 VM 인수 또는 환경에서 활성 프로필을 설정하는 것입니다. 예를 들어, -Dspring.profiles.active=overrides 또는 SPRING_PROFILES_ACTIVE 환경 변수를 settings.overrides로 설정할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/#overriding-properties-using-profiles)"
"스프링 클라우드 Config Server에서 Health Indicator의 기본 동작은 무엇인가요?","스프링 클라우드 Config Server에서 Health Indicator는 기본적으로 EnvironmentRepository가 작동하는지 확인합니다. application이 'app'이고, default profile이며, default label을 사용합니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/multitenancy.html#_health_indicator)"
"Config Server의 Health Indicator를 사용자 정의하는 방법은 무엇인가요?","Config Server의 Health Indicator는 다양한 application과 custom profiles, custom labels를 확인하도록 구성할 수 있습니다. 예를 들어, spring.cloud.config.server.health.repositories 속성을 사용하면 가능합니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/multitenancy.html#_health_indicator)"
"Config Server의 Health Indicator를 비활성화하는 방법은 무엇인가요?","Config Server의 Health Indicator는 management.health.config.enabled 속성을 false로 설정하여 비활성화할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/multitenancy.html#_health_indicator)"
"Spring Cloud Config Server에서 actuator와 security를 어떻게 구성해야 하나요?","actuator를 의존성으로 추가하고, actuator 엔드포인트에 접근하는 사용자가 Config Server API에 접근할 수 없도록 구성해야 합니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/#actuator-and-security)"
"Spring Cloud Config Server의 actuator 엔드포인트에 접근하는 사용자를 어떻게 제한할 수 있나요?","actuator 엔드포인트에 접근하는 사용자가 Config Server API에 접근할 수 없도록 구성해야 합니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/#actuator-and-security)"
"Spring Cloud Config Server에서 actuator 엔드포인트에 접근하는 사용자가 Config Server API에 접근하는 것을 방지하는 방법은 무엇인가요?","actuator 엔드포인트에 접근하는 사용자가 Config Server API에 접근할 수 없도록 구성해야 합니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/#actuator-and-security)"
"Spring Cloud Config Server에서 암호화 및 복호화를 사용하려면 어떤 전제 조건이 필요한가요?","Spring Cloud Config Server에서 암호화 및 복호화 기능을 사용하려면 JVM에 전체 강도 JCE가 설치되어 있어야 합니다. Oracle에서 'Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files'를 다운로드하고 설치 지침에 따라 JRE lib/security 디렉토리의 두 정책 파일을 다운로드한 파일로 바꿔야 합니다."
"Spring Cloud Config Server에서 원격 속성 소스의 암호화된 내용은 어떻게 처리되나요?","Spring Cloud Config Server에서 원격 속성 소스의 암호화된 내용은 HTTP를 통해 클라이언트로 전송되기 전에 복호화됩니다. 이 설정의 주요 장점은 속성 값이 '휴식 중'일 때 (예: Git 저장소에) 평문으로 표시되지 않아도 된다는 것입니다."
"Spring Cloud Config Server에서 속성 파일에서 암호화된 값을 사용할 때 따옴표로 묶어야 하나요?","아니요, Spring Cloud Config Server에서 속성 파일에서 암호화된 값을 사용할 때 따옴표로 묶어서는 안 됩니다. 값을 복호화하지 못하게 됩니다."
"Spring Config Server에서 키 관리를 위해 어떤 유형의 키를 사용할 수 있나요?","Spring Config Server는 대칭(공유) 키 또는 비대칭 키(RSA 키 쌍)를 사용할 수 있습니다. 비대칭 키는 보안 측면에서는 우수하지만, 대칭 키를 사용하는 것이 더 편리합니다. 대칭 키를 사용하려면 encrypt.key 속성을 비밀 문자열로 설정하거나 환경 변수 ENCRYPT_KEY를 사용하여 평문 구성 파일에서 제외해야 합니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/server.html#server-key-management)"
"Spring Config Server에서 비대칭 키를 구성하는 방법은 무엇인가요?","Spring Config Server에서 비대칭 키를 구성하려면 키스토어(예: JDK에 포함된 keytool 유틸리티로 생성된 키스토어)를 사용해야 합니다. 키스토어 속성은 encrypt.keyStore.location, encrypt.keyStore.password, encrypt.keyStore.alias, encrypt.keyStore.type이며, 기본값은 jks입니다. 암호화는 공개 키로 수행되며, 복호화에는 개인 키가 필요합니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/server.html#server-key-management)"
"Spring Config Server에서 대칭 키를 구성하는 방법은 무엇인가요?","Spring Config Server에서 대칭 키를 구성하려면 encrypt.key 속성을 비밀 문자열로 설정하거나 환경 변수 ENCRYPT_KEY를 사용하여 평문 구성 파일에서 제외해야 합니다. bootstrap.properties에서 구성해야 하는 경우 spring.cloud.bootstrap.enabled=true를 시스템 속성으로 설정해야 합니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/server.html#server-key-management)"
"Spring Config Server에서 암호화된 속성 값의 키를 어떻게 변경하나요?","Spring Config Server에서 암호화된 속성 값의 키를 변경하려면, 클라이언트가 소스 구성 파일(예: git)을 변경하고 모든 암호문에 새로운 {key:...} 접두사를 사용해야 합니다. 또한, 클라이언트는 먼저 Config Server 키스토어에서 해당 키 별칭이 있는지 확인해야 합니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/using-multiple-keys-and-key-rotation.html)"
"Spring Config Server에서 암호화된 속성 값의 비밀을 어떻게 변경하나요?","Spring Config Server에서 암호화된 속성 값의 비밀을 변경하려면, 클라이언트가 소스 구성 파일(예: git)을 변경하고 모든 암호문에 새로운 {secret:...} 접두사를 사용해야 합니다. 또한, 클라이언트는 먼저 Config Server 키스토어에서 해당 키 별칭이 있는지 확인해야 합니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/using-multiple-keys-and-key-rotation.html)"
"Spring Config Server에서 암호화된 속성 값의 키를 로테이트하는 방법은 무엇인가요?","Spring Config Server에서 암호화된 속성 값의 키를 로테이트하려면, 클라이언트가 소스 구성 파일(예: git)을 변경하고 모든 암호문에 새로운 {key:...} 접두사를 사용해야 합니다. 또한, 클라이언트는 먼저 Config Server 키스토어에서 해당 키 별칭이 있는지 확인해야 합니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/using-multiple-keys-and-key-rotation.html)"
"서버에서 암호화된 속성을 클라이언트에서 해독하려면 어떻게 해야 하나요?","서버에서 암호화된 속성을 클라이언트에서 해독하려면 spring.cloud.config.server.encrypt.enabled=false를 bootstrap.yml 또는 bootstrap.properties에 설정하면 됩니다. 이렇게 하면 나가는 속성의 복호화가 꺼집니다. 또는 /encrypt 및 /decrypt 엔드포인트에 대해 신경 쓰지 않는다면 키 또는 활성화 플래그를 구성하지 않아도 작동해야 합니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/#serving-encrypted-properties)"
"서버에서 나가는 속성을 복호화하지 않으려면 어떻게 해야 하나요?","서버에서 나가는 속성을 복호화하지 않으려면 spring.cloud.config.server.encrypt.enabled=false를 bootstrap.yml 또는 bootstrap.properties에 설정하면 됩니다. 이렇게 하면 나가는 속성의 복호화가 꺼집니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/#serving-encrypted-properties)"
"서버에서 /encrypt 및 /decrypt 엔드포인트를 사용하려면 어떤 구성이 필요한가요?","서버에서 /encrypt 및 /decrypt 엔드포인트를 사용하려면 encrypt.* 구성을 제공하여 키를 찾아야 합니다. 또한 spring.cloud.config.server.encrypt.enabled=false를 bootstrap.yml 또는 bootstrap.properties에 설정하여 나가는 속성의 복호화를 명시적으로 꺼야 합니다. 또는 엔드포인트에 대해 신경 쓰지 않는다면 키 또는 활성화 플래그를 구성하지 않아도 작동해야 합니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/#serving-encrypted-properties)"
"스프링 애플리케이션에서 환경 엔드포인트를 다른 형식으로 소비할 수 있나요?","네, 환경 엔드포인트는 YAML 또는 Java properties로 소비할 수 있습니다. 리소스 경로에 접미사(“.yml”, “.yaml” 또는 “.properties”)를 추가하여 소비할 수 있습니다. 이는 JSON 엔드포인트의 구조나 추가 메타데이터에 관심이 없는 애플리케이션에서 소비하는 데 유용할 수 있습니다. YAML 및 properties 표현에는 소스 문서의 자리 표시자(표준 Spring ${...} 형식)를 가능한 경우 렌더링하기 전에 출력에서 해결해야 함을 신호로 보내는 추가 플래그(resolvePlaceholders라는 부울 쿼리 매개 변수로 제공)가 있습니다."
"YAML 또는 properties 형식을 사용하는 데 제한이 있나요?","네, YAML 또는 properties 형식을 사용하는 데 제한이 있습니다. 주로 메타데이터 손실과 관련하여 제한이 있습니다. 예를 들어, JSON은 소스와의 상관 관계가 있는 이름과 함께 속성 소스의 정렬된 목록으로 구성됩니다. YAML 및 properties 형태는 값의 원본이 여러 소스를 갖더라도 단일 맵으로 통합되며, 원래 소스 파일의 이름이 손실됩니다. 또한 YAML 표현은 백업 저장소의 YAML 소스를 충실히 나타내는 것은 아닙니다. 평면 속성 소스의 목록에서 구성되며 키 형식에 대한 가정이 이루어져야 합니다."
"YAML 및 properties 표현에는 어떤 추가 플래그가 있나요?","YAML 및 properties 표현에는 소스 문서의 자리 표시자(표준 Spring ${...} 형식)를 가능한 경우 렌더링하기 전에 출력에서 해결해야 함을 신호로 보내는 추가 플래그(resolvePlaceholders라는 부울 쿼리 매개 변수로 제공)가 있습니다. 이는 Spring 자리 표시자 규칙에 대해 알지 못하는 소비자에게 유용한 기능입니다."
"Spring Cloud Config Server에서 일반 환경 엔드포인트와 어떤 차이가 있나요?","Spring Cloud Config Server의 일반 환경 엔드포인트는 모든 매칭 리소스를 집계하지만, 일반 텍스트 구성 파일 엔드포인트는 첫 번째 매칭 리소스만 반환합니다. 또한, 일반 텍스트 구성 파일 엔드포인트는 정규화된 형식 ${…​}의 플레이스홀더를 사용하여 지정된 애플리케이션 이름, 프로파일 및 레이블에 대한 효과적인 환경을 사용하여 해결합니다. 일반 텍스트 구성 파일 엔드포인트는 환경 엔드포인트와 긴밀하게 통합되어 있습니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/spring-cloud-config-serving-plain-text.html)"
"Spring Cloud Config Server에서 일반 텍스트 구성 파일을 제공하는 엔드포인트의 경로는 어떤 요소를 포함하나요?","Spring Cloud Config Server에서 일반 텍스트 구성 파일을 제공하는 엔드포인트의 경로는 애플리케이션, 프로파일, 레이블 및 파일 이름에 대한 경로를 포함합니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/spring-cloud-config-serving-plain-text.html)"
"Spring Cloud Config Server에서 일반 텍스트 구성 파일을 제공하는 엔드포인트에서 리소스 파일 이름과 일치하는 프로파일을 지정하는 방법은 무엇인가요?","Spring Cloud Config Server에서 일반 텍스트 구성 파일을 제공하는 엔드포인트에서 리소스 파일 이름과 일치하는 프로파일을 지정하려면, 파일 이름에 프로파일 특정 접미사를 추가하면 됩니다. 예를 들어, /*/development/*/logback.xml은 logback-development.xml이라는 파일로 해결될 수 있습니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/spring-cloud-config-serving-plain-text.html)"
"Spring Config Server에서 바이너리 파일을 제공하기 위해 어떤 헤더를 보내야 하나요?","application/octet-stream 헤더를 보내야 합니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/serving-binary-files.html)"
"Spring Config Server에서 Git, SVN 또는 Native 백엔드에 대한 구성 예시는 무엇인가요?","application.yml 및 nginx.conf 파일이 예시로 사용될 수 있습니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/serving-binary-files.html)"
"Spring Config Server에서 AWS S3에 대한 일반 텍스트 제공을 활성화하려면 어떤 종속성을 포함해야 하나요?","io.awspring.cloud:spring-cloud-aws-context 종속성을 포함해야 합니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/serving-binary-files.html)"
"스프링 클라우드 Config Server를 다른 애플리케이션에 포함시킬 수 있나요?","네, Config Server는 독립 실행형 애플리케이션으로 실행되는 것이 가장 좋지만, 필요한 경우 다른 애플리케이션에 포함시킬 수 있습니다. 이를 위해 @EnableConfigServer 어노테이션을 사용하세요. (출처: https://docs.spring.io/spring-cloud-config/reference/html/#embedding)"
"스프링 클라우드 Config Server를 다른 애플리케이션에 포함시킬 때 spring.cloud.config.server.bootstrap 속성은 어떤 역할을 하나요?","spring.cloud.config.server.bootstrap 속성은 플래그로, 서버가 자체 원격 저장소에서 구성되어야 하는지 여부를 나타냅니다. 기본적으로 플래그는 꺼져 있으며, 시작 시간을 지연시킬 수 있습니다. 그러나 다른 애플리케이션에 포함될 때 다른 애플리케이션과 동일한 방식으로 초기화하는 것이 합리적입니다. spring.cloud.config.server.bootstrap을 true로 설정하면 복합 환경 저장소 구성을 사용해야 합니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/#embedding)"
"스프링 클라우드 Config Server를 다른 애플리케이션에 포함시킬 때 endpoint를 비활성화할 수 있나요?","네, @EnableConfigServer 어노테이션을 사용하지 않고(spring.cloud.config.server.bootstrap=true로 설정) endpoint를 완전히 비활성화할 수 있습니다. 이렇게 하면 백엔드 저장소에서 직접 애플리케이션의 구성을 읽을 수 있는 endpoint 없는 임베디드 Config Server가 생성됩니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/#embedding)"
"스프링 클라우드 구성 서버에서 푸시 알림을 어떻게 구성하고 사용할 수 있나요?","스프링 클라우드 구성 서버에서 푸시 알림을 구성하려면, 웹훅을 지원해야 하는 Github, Gitlab, Gitea, Gitee, Gogs 또는 Bitbucket과 같은 소스 코드 저장소 제공업체를 사용해야 합니다. 제공업체의 사용자 인터페이스를 통해 웹훅을 URL과 관심 있는 이벤트 집합으로 구성합니다. /monitor 엔드포인트를 활성화하려면 spring-cloud-config-monitor 라이브러리에 대한 종속성을 추가하고 구성 서버에서 Spring Cloud Bus를 활성화해야 합니다. 변경 감지 전략은 PropertyPathNotificationExtractor를 사용하여 기본 동작을 재정의할 수 있으며, 요청 헤더와 본문을 매개변수로 사용하고 변경된 파일 경로 목록을 반환합니다. 기본 구성은 Github, Gitlab, Gitea, Gitee, Gogs 또는 Bitbucket과 함께 작동하며, /monitor 엔드포인트에 POST하여 local git 저장소의 파일 시스템 변경 사항을 감지할 수도 있습니다. RefreshRemoteApplicationEvent는 구성 서버와 클라이언트 애플리케이션 모두에서 spring-cloud-bus가 활성화된 경우에만 전송됩니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/#_push_notifications_and_spring_cloud_bus)"
"스프링 클라우드 구성 서버에서 푸시 알림과 Spring Cloud Bus를 사용하는 방법은 무엇인가요?","스프링 클라우드 구성 서버에서 푸시 알림과 Spring Cloud Bus를 사용하려면, webhook을 지원하는 Github, Gitlab, Gitea, Gitee, Gogs 또는 Bitbucket과 같은 소스 코드 저장소 제공업체를 사용해야 합니다. 제공업체의 사용자 인터페이스를 통해 webhook을 URL과 관심 있는 이벤트 집합으로 구성합니다. /monitor 엔드포인트를 활성화하려면 spring-cloud-config-monitor 라이브러리에 대한 종속성을 추가하고 구성 서버에서 Spring Cloud Bus를 활성화해야 합니다. 변경 감지 전략은 PropertyPathNotificationExtractor를 사용하여 기본 동작을 재정의할 수 있으며, 요청 헤더와 본문을 매개변수로 사용하고 변경된 파일 경로 목록을 반환합니다. 기본 구성은 Github, Gitlab, Gitea, Gitee, Gogs 또는 Bitbucket과 함께 작동하며, /monitor 엔드포인트에 POST하여 local git 저장소의 파일 시스템 변경 사항을 감지할 수도 있습니다. RefreshRemoteApplicationEvent는 구성 서버와 클라이언트 애플리케이션 모두에서 spring-cloud-bus가 활성화된 경우에만 전송됩니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/#_push_notifications_and_spring_cloud_bus)"
"스프링 클라우드 구성 서버에서 푸시 알림을 어떻게 사용자 정의할 수 있나요?","스프링 클라우드 구성 서버에서 푸시 알림을 사용자 정의하려면, PropertyPathNotificationExtractor를 사용하여 기본 동작을 재정의할 수 있는 변경 감지 전략을 구현할 수 있습니다. 이 전략은 요청 헤더와 본문을 매개변수로 사용하고 변경된 파일 경로 목록을 반환해야 합니다. 또한, /monitor 엔드포인트에 POST하여 JSON 알림 외에도 GitHub, GitLab, Gitee 또는 Bitbucket에서 변경 알림을 트리거할 수 있습니다. RefreshRemoteApplicationEvent는 구성 서버와 클라이언트 애플리케이션 모두에서 spring-cloud-bus가 활성화된 경우에만 전송됩니다. (출처: https://docs.spring.io/spring-cloud-config/reference/html/#_push_notifications_and_spring_cloud_bus)"
"Spring Cloud Config Server에서 AOT 변환 및 네이티브 이미지 지원이 언제부터 가능해졌나요?","Spring Cloud Config Server에서 AOT 변환 및 네이티브 이미지 지원은 4.0.0 버전부터 가능해졌습니다. (출처: https://docs.spring.io/spring-cloud-config/reference/server/aot-and-native-image-support.html)"
"GraalVM 네이티브 이미지에서 Spring Cloud Config Server를 실행하려면 어떤 버전의 GraalVM이 필요한가요?","GraalVM 21 버전 이상이 필요합니다. (출처: https://docs.spring.io/spring-cloud-config/reference/server/aot-and-native-image-support.html)"
"GraalVM의 FileSystemProvider 버그를 우회하기 위해 어떤 구성 우회 방법을 추가해야 하나요?","GraalVM 빌드 플러그인 설정에 다음 옵션을 추가해야 합니다: -H:-AddAllFileSystemProviders --strict-image-heap --initialize-at-build-time=org.bouncycastle --initialize-at-build-time=net.i2p.crypto.eddsa.EdDSASecurityProvider --initialize-at-run-time=org.bouncycastle.jcajce.provider.drbg.DRBG$Default --initialize-at-run-time=org.bouncycastle.jcajce.provider.drbg.DRBG$NonceAndIV. 자세한 내용은 GraalVM Maven 또는 Gradle 플러그인 문서를 참조하세요. (출처: https://docs.spring.io/spring-cloud-config/reference/server/aot-and-native-image-support.html)"
"스프링 부트 애플리케이션이 Config Server에 즉시 연결하려면 어떻게 해야 하나요?","스프링 부트 애플리케이션이 Config Server에 즉시 연결하려면 application.properties 파일에서 다음을 설정하면 됩니다: `spring.config.import=optional:configserver:`. 이렇게 하면 Config Server가 `http://localhost:8888`의 기본 위치에서 연결됩니다. (출처: https://docs.spring.io/spring-cloud-config/reference/client.html)"
"스프링 클라우드 Config Client에서 부트스트랩의 동작 방식은 무엇인가요?","스프링 클라우드 Config Client에서 부트스트랩은 Config Server에 연결하고 원격 속성 소스로 Spring Environment를 초기화하는 역할을 합니다. 이 동작의 결과로, Config Server를 소비하려는 모든 클라이언트 애플리케이션은 `spring.cloud.config.uri` 속성에 서버 주소가 설정된 `bootstrap.yml` 파일 또는 환경 변수가 필요합니다. (출처: https://docs.spring.io/spring-cloud-config/reference/client.html)"
"Config Server의 위치를 지정하기 위해 `spring.cloud.config.discovery.enabled` 속성을 사용하는 방법은 무엇인가요?","Config Server의 위치를 지정하기 위해 `spring.cloud.config.discovery.enabled` 속성을 사용하려면, 구성 속성에 `optional:` 접두사가 있는 `spring.config.import` 속성을 포함해야 합니다. 예를 들어, `spring.config.import=optional:configserver:`. 그런 다음 `spring.cloud.config.discovery.enabled=true`를 설정하여 DiscoveryClient를 사용하여 Config Server를 찾도록 지정할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-config/reference/client.html)"
