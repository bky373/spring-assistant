"Spring Pulsar 프로젝트의 현재 버전은 무엇인가요?","Spring Pulsar 프로젝트의 현재 버전은 1.1.4입니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/index.html)"
"Spring Pulsar 프로젝트는 어떤 회사에서 개발되었나요?","Spring Pulsar 프로젝트는 VMware, Inc.에서 개발되었습니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/index.html)"
"Spring Pulsar 문서에서 복사본을 만들 때 어떤 주의사항이 있나요?","Spring Pulsar 문서에서 복사본을 만들 때는 요금을 부과하지 않아야 하며, 각 복사본에는 이 저작권 고지가 포함되어야 합니다. 이는 인쇄물이나 전자 형태로 배포될 때에도 적용됩니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/index.html)"
"Spring for Apache Pulsar 1.1 버전에서 추가된 새로운 기능은 무엇인가요?","Spring for Apache Pulsar 1.1 버전에서는 Auto Schema 지원, 메시지 어노테이션을 통한 기본 토픽 및 스키마 지정, 체크된 예외 제거, 테스트 지원 등의 기능이 추가되었습니다. (출처: <https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/whats-new.html>)"
"Auto Schema 기능을 사용하여 PulsarTemplate, @PulsarListener, ReactivePulsarTemplate, @ReactivePulsarListener, @PulsarReader에서 어떻게 작동하나요?","Auto Schema 기능은 Pulsar 토픽의 스키마를 미리 알 수 없는 경우에 사용되며, 브로커와 일반적인 레코드를 생산/소비할 수 있습니다. 이 기능은 PulsarTemplate, @PulsarListener, ReactivePulsarTemplate, @ReactivePulsarListener, @PulsarReader에서 각각 해당 섹션에서 자세히 설명되어 있습니다. (출처: <https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/whats-new.html>)"
"Spring for Apache Pulsar 1.1 버전에서 변경된 예외 처리 방식은 어떻게 되나요?","Spring for Apache Pulsar 1.1 버전에서는 프레임워크에서 제공하는 API에서 체크된 PulsarClientException 대신 체크되지 않은 PulsarException을 throw합니다. 예외를 처리하지 않는 경우 catch 또는 throws 절을 제거할 수 있으며, 예외를 처리하는 경우에는 catch 절에서 PulsarClientException을 PulsarException으로 대체해야 합니다. (출처: <https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/whats-new.html>)"
"Spring for Apache Pulsar는 Apache Pulsar(https://pulsar.apache.org/) 애플리케이션을 개발하기 위한 기본 Spring 친화적인 API를 제공하는 프로젝트인가요?","예, Spring for Apache Pulsar는 Apache Pulsar(https://pulsar.apache.org/) 애플리케이션을 개발하기 위한 기본 Spring 친화적인 API를 제공하는 프로젝트입니다. (출처: {https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/intro.html})"
"Spring for Apache Pulsar에서 PulsarTemplate은 어떤 역할을 하나요?","Spring for Apache Pulsar에서 PulsarTemplate은 Pulsar 토픽에 게시하기 위한 기본 Spring 친화적인 API를 제공합니다. (출처: {https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/intro.html})"
"Spring for Apache Pulsar에서 PulsarListener 어노테이션은 어떤 역할을 하나요?","Spring for Apache Pulsar에서 PulsarListener 어노테이션은 Pulsar 토픽에서 소비하기 위한 기본 Spring 친화적인 API를 제공합니다. (출처: {https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/intro.html})"
"Spring for Apache Pulsar 1.1.4를 사용하기 위해 필요한 Java 버전은 무엇인가요?","Java 17(https://www.java.com)입니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/intro/system-requirements.html)"
"Spring for Apache Pulsar 1.1.4와 호환되는 Spring Framework 버전은 무엇인가요?","Spring Framework 6.1.13(https://spring.io/projects/spring-framework#learn) 이상입니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/intro/system-requirements.html)"
"Spring for Apache Pulsar 1.1.4와 호환되는 Apache Pulsar Java Client 버전은 무엇인가요?","Apache Pulsar Java Client 3.2.4(https://pulsar.apache.org/docs/3.2.x/client-libraries-java/) 이상입니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/intro/system-requirements.html)"
"프로젝트를 로컬에서 빌드하려면 어떤 단계를 따라야 하나요?","프로젝트를 로컬에서 빌드하려면 소스코드에서 다음 단계를 따르세요: Gradle 8.x (8.3 이상)를 사용하여 빌드를 수행합니다. 프로젝트의 전체 빌드를 수행하려면 다음 명령어를 실행하세요: ./gradlew clean build. 테스트를 실행하지 않고 빌드하려면 다음 명령어를 사용하세요: ./gradlew clean build -x test. 참조 문서를 빌드하려면 다음 명령어를 사용하세요: ./gradlew :spring-pulsar-docs:antora. 생성된 HTML은 docs/build/site 디렉토리에서 확인할 수 있습니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/intro/building.html)"
"프로젝트를 빌드하는 데 필요한 Gradle 버전은 무엇인가요?","프로젝트를 빌드하려면 Gradle 8.x (8.3 이상)가 필요합니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/intro/building.html)"
"프로젝트의 참조 문서를 빌드하려면 어떤 명령어를 사용해야 하나요?","참조 문서를 빌드하려면 다음 명령어를 사용하세요: ./gradlew :spring-pulsar-docs:antora. 생성된 HTML은 docs/build/site 디렉토리에서 확인할 수 있습니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/intro/building.html)"
"Spring for Apache Pulsar에 문제가 발생했을 때 도움을 받을 수 있는 방법은 무엇인가요?","Spring for Apache Pulsar에 문제가 발생하면 stackoverflow.com에서 spring-pulsar 태그를 사용하여 질문을 할 수 있습니다. 또한 github.com/spring-projects/spring-pulsar/issues에서 버그를 보고할 수도 있습니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/intro/getting-help.html)"
"Spring for Apache Pulsar를 처음 사용하는 경우 어떻게 시작해야 하나요?","Spring for Apache Pulsar를 처음 사용하는 경우 spring.io 웹사이트에서 다양한 가이드를 찾아볼 수 있습니다. 또한 stackoverflow.com에서 spring-pulsar 태그를 사용하여 질문을 할 수도 있습니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/intro/getting-help.html)"
"Spring for Apache Pulsar의 문서를 개선하고 싶은 경우 어떻게 해야 하나요?","Spring for Apache Pulsar의 문서를 개선하고 싶은 경우 github.com/spring-projects/spring-pulsar/issues에서 문제를 보고하거나 문서를 개선하는 데 참여할 수 있습니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/intro/getting-help.html)"
"스프링 부트 애플리케이션에서 Pulsar와 함께 작동하기 위해 필요한 의존성은 무엇인가요?","스프링 부트 애플리케이션은 spring-boot-starter-pulsar 의존성만 필요합니다. 이 의존성은 Maven과 Gradle 모두에서 해당 목록에 표시된 대로 정의할 수 있습니다."
"PulsarBootHelloWorld 애플리케이션의 주요 구성 요소는 무엇인가요?","PulsarBootHelloWorld 애플리케이션은 Spring Boot auto-configuration을 사용하여 여러 구성 요소를 제공합니다. Spring Boot는 애플리케이션에 대한 PulsarClient 및 PulsarTemplate을 자동으로 구성합니다. 애플리케이션은 hello-pulsar 주제로 메시지를 보내고 hello-pulsar 주제에 PulsarListener를 사용하여 데이터를 소비합니다. PulsarListener는 Pulsar 소비자를 생성하고 관리하기 위해 메시지 리스너 컨테이너를 만듭니다."
"PulsarBootHelloWorld 애플리케이션에서 Pulsar 템플릿을 사용하여 메시지를 보내는 방법은 무엇인가요?","PulsarBootHelloWorld 애플리케이션은 PulsarTemplate을 사용하여 hello-pulsar-topic 주제로 메시지를 보냅니다. PulsarTemplate은 애플리케이션에 주입되어 데이터를 보내기 시작합니다. 애플리케이션은 hello-pulsar 주제로 메시지를 보내고, 스키마 정보는 지정하지 않습니다. 왜냐하면 Apache Pulsar 라이브러리가 보내는 데이터의 유형에서 스키마 유형을 자동으로 추론하기 때문입니다."
"스프링 포 아파치 펄사(Spring for Apache Pulsar)에서 PulsarListener를 사용하는 것이 권장되는 이유는 무엇인가요?","스프링 포 아파치 펄사(Spring for Apache Pulsar)에서 PulsarListener를 사용하는 것이 권장되는 이유는 PulsarListener를 사용하면 엔드 유저 애플리케이션이 Pulsar 메시지 리스너 컨테이너 인프라에 의해 생성되고 관리되는 Pulsar 소비자를 사용하여 Pulsar 토픽에서 메시지를 쉽게 소비할 수 있기 때문입니다. 또한, PulsarListener를 사용하면 대부분의 구성된 속성이 존중되지만 몇 가지 예외가 있습니다. 즉, subscriptionName 속성은 무시되고 대신 주석에 지정되지 않은 경우 생성됩니다. subscription-type 속성은 무시되고 대신 주석의 값에서 가져옵니다. 그러나 주석에서 subscriptionType = {}를 설정하여 기본값으로 속성 값을 사용할 수 있습니다."
"스프링 포 아파치 펄사(Spring for Apache Pulsar)에서 PulsarListener를 사용하여 토픽에서 일반적인 레코드를 소비하려면 어떻게 해야 하나요?","스프링 포 아파치 펄사(Spring for Apache Pulsar)에서 PulsarListener를 사용하여 토픽에서 일반적인 레코드를 소비하려면 @PulsarListener 주석에서 schemaType = SchemaType.AUTO_CONSUME을 설정하고 메시지 매개변수로 GenericRecord 유형의 Pulsar 메시지를 사용해야 합니다. GenericRecord API를 사용하면 필드 및 관련 값에 액세스할 수 있습니다."
"스프링 포 아파치 펄사(Spring for Apache Pulsar)에서 PulsarListenerConsumerBuilderCustomizer를 사용하여 Pulsar 소비자 빌더를 사용자 지정하는 방법은 무엇인가요?","스프링 포 아파치 펄사(Spring for Apache Pulsar)에서 PulsarListenerConsumerBuilderCustomizer를 사용하여 Pulsar 소비자 빌더를 사용자 지정하려면 PulsarListenerConsumerBuilderCustomizer 유형의 @Bean을 제공하고 PulsarListener에 사용할 수 있도록 만들어야 합니다. 그런 다음 PulsarConsumerFactory를 생성하고 PulsarContainerProperties를 생성하여 소비자 빌더를 사용자 지정할 수 있습니다. 그런 다음 사용자 지정된 소비자 빌더를 사용하여 PulsarConsumerFactory를 생성하고 PulsarContainerProperties를 생성하면 됩니다."
"스프링 부트 애플리케이션에서 커스텀 파티셔닝을 설정하려면 어떻게 해야 하나요?","스프링 부트 애플리케이션에서 커스텀 파티셔닝을 설정하려면, 메시지 라우팅 모드를 `CustomPartition`으로 설정하고, sendAsync 메서드에 메시지 라우터를 전달해야 합니다. 메시지 라우터는 메시지를 보낼 파티션을 결정하는 역할을 합니다. 이 예제에서는 FooRouter, BarRouter, BuzzRouter라는 세 가지 메시지 라우터를 구현하여, 각각의 라우터가 특정 파티션으로 데이터를 전송하도록 설정하였습니다. 또한, PulsarTemplate 클래스의 sendAsync 메서드를 사용해야 합니다."
"Pulsar의 Failover 구독 유형은 어떻게 작동하나요?","Pulsar의 Failover 구독 유형은 각 파티션을 하나의 전용 소비자로 소비하도록 보장합니다. Failover 구독 모드를 사용하려면, 동일한 구독 이름을 가진 여러 소비자를 생성하면 됩니다. 이 예제에서는 hello-pulsar-partitioned 토픽에 대해 Failover 유형의 구독을 가진 세 개의 소비자를 생성하였습니다. 이렇게 하면, 하나의 파티션은 항상 하나의 소비자에 의해 소비됩니다."
"Pulsar의 Shared 구독 유형은 어떤가요?","Pulsar의 Shared 구독 유형은 모든 파티션의 데이터가 동일한 소비자에게 전달되도록 합니다. 이 예제에서는 hello-pulsar-partitioned 토픽에 대해 Shared 유형의 구독을 가진 두 개의 소비자를 생성하였습니다. 이 모드에서는 동일한 소비자가 다른 소비자보다 먼저 모든 파티션의 메시지를 수신할 가능성이 있기 때문에 순서 보장이 없습니다."
"Spring for Apache Pulsar에서 어떤 Reactive counterpart가 제공되나요?","Spring for Apache Pulsar는 PulsarTemplate, PulsarListener, PulsarConsumerFactory와 같은 대부분의 지원되는 기능에 대해 Reactive counterpart를 제공합니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/reference/reactive-pulsar.html)"
"Spring for Apache Pulsar에서 아직 지원되지 않는 기능은 무엇인가요?","Spring for Apache Pulsar에서는 non-shared 구독에서의 에러 처리, 스트리밍 모드에서 @Header를 통한 Pulsar 헤더에 접근, 그리고 'Tombstone' 레코드의 Null Payloads 및 Log Compaction이 아직 지원되지 않습니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/reference/reactive-pulsar.html)"
"Spring for Apache Pulsar 기반 애플리케이션에서 권장되는 접근 방식은 무엇인가요?","Spring for Apache Pulsar 기반 애플리케이션에서는 Spring-Boot-First 접근 방식을 사용하는 것이 좋습니다. 이를 위해 spring-pulsar-reactive-spring-boot-starter 모듈을 의존성으로 추가할 수 있습니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/reference/reactive-pulsar.html)"
"Spring의 Reactive 지원으로 Apache Pulsar를 사용하는 Spring Boot 애플리케이션에서 사용되는 의존성은 무엇인가요?","spring-boot-starter-pulsar-reactive"
"Maven과 Gradle에서 spring-boot-starter-pulsar-reactive 의존성을 정의하는 방법은 무엇인가요?","Maven에서는 <dependency> 요소에 <groupId>org.springframework.boot</groupId>, <artifactId>spring-boot-starter-pulsar-reactive</artifactId>, <version>3.3.4</version> 속성을 포함해야 합니다. Gradle에서는 dependencies 블록에 implementation 'org.springframework.boot:spring-boot-starter-pulsar-reactive:3.3.4' 문을 추가해야 합니다."
"ReactiveSpringPulsarHelloWorld 애플리케이션 코드에서 ReactivePulsarTemplate을 사용하여 메시지를 보내는 방법은 무엇인가요?","ReactiveSpringPulsarHelloWorld 클래스에서 @Bean ApplicationRunner runner 메서드를 사용하여 ReactivePulsarTemplate을 생성합니다. 그런 다음, pulsarTemplate.send('hello-pulsar-topic', 'Hello Reactive Pulsar World!') 메서드를 사용하여 hello-pulsar-topic 주제로 메시지를 보냅니다. 이 작업은 subscribe 메서드를 통해 구독됩니다."
"Spring Pulsar의 Reactive 클라이언트 구현 방식은 무엇인가요?","Spring Pulsar의 Reactive 클라이언트는 Apache Pulsar Reactive 클라이언트에 의해 지원되며, 현재 구현은 일반 Pulsar 클라이언트의 비동기 API를 완전히 비차단 방식으로 적응한 것입니다. 이는 Reactive 클라이언트가 일반 클라이언트를 필요로 한다는 것을 의미합니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/html/#reactive-pulsar)"
"Spring Pulsar의 Reactive 및 Imperative 자동 구성의 차이점은 무엇인가요?","일반 (명령형) 클라이언트에 대한 의존성으로 인해, 프레임워크에서 제공하는 Reactive 자동 구성은 명령형 자동 구성에 추가됩니다. 즉, 명령형 스타터는 명령형 구성 요소만 포함하고, Reactive 스타터는 명령형 및 Reactive 구성 요소를 모두 포함합니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/html/#reactive-pulsar)"
"Spring Pulsar Reactive 클라이언트에서 Reactive API는 어떻게 사용되나요?","Spring Pulsar의 Reactive API는 일반 Pulsar 클라이언트의 비동기 API를 완전히 비차단 방식으로 적응한 Apache Pulsar Reactive 클라이언트를 통해 제공됩니다. 이는 Reactive API가 일반 클라이언트를 필요로 한다는 것을 의미합니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/html/#reactive-pulsar)"
"Reactive Pulsar Spring Boot Starter를 사용할 때 ReactivePulsarClient는 어떻게 구성되나요?","ReactivePulsarClient는 Reactive Pulsar Spring Boot Starter를 사용할 때 자동으로 구성됩니다. 기본적으로 애플리케이션은 pulsar://localhost:6650에 있는 로컬 Pulsar 인스턴스에 연결하려고 시도합니다. 이를 조정하려면 spring.pulsar.client.service 속성을 다른 값으로 설정하면 됩니다. 이 값은 유효한 Pulsar Protocol URL이어야 합니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/reference/reactive-pulsar/reactive-pulsar-client.html)"
"Reactive Pulsar Spring Boot Starter에서 spring.pulsar.client.service 속성을 설정할 때 어떤 값을 사용해야 하나요?","spring.pulsar.client.service 속성을 설정할 때는 유효한 Pulsar Protocol URL을 사용해야 합니다. 이 URL은 연결할 Pulsar 클러스터의 위치를 지정합니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/reference/reactive-pulsar/reactive-pulsar-client.html)"
"Reactive Pulsar Spring Boot Starter에서 ReactivePulsarClient를 사용하여 Pulsar 클러스터에 인증이 필요한 경우 어떻게 해야 하나요?","ReactivePulsarClient를 사용하여 Pulsar 클러스터에 인증이 필요한 경우, 명령형 클라이언트와 동일한 단계를 따라야 합니다. 이는 반응형 클라이언트가 모든 보안 구성을 처리하는 명령형 클라이언트를 적응시키기 때문입니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/reference/reactive-pulsar/reactive-pulsar-client.html)"
"Spring Boot에서 Apache Pulsar에 레코드를 게시하기 위해 어떤 템플릿을 사용하나요?","Spring Boot는 Apache Pulsar에 레코드를 게시하기 위해 ReactivePulsarTemplate을 제공합니다. 이 템플릿은 ReactivePulsarOperations 인터페이스를 구현하며, 계약을 통해 레코드를 게시하는 메서드를 제공합니다."
"ReactivePulsarTemplate에서 출구 메시지를 구성하는 방법은 무엇인가요?","ReactivePulsarTemplate에서는 ReactiveMessageSenderBuilderCustomizer를 사용하여 출구 메시지를 전송하는 데 사용되는 기본 Pulsar sender builder를 구성할 수 있습니다. 그러나 sender builder에 대한 전체 액세스 권한이 부여되므로 일부 메서드(예: create)를 호출하면 예기치 않은 부작용이 발생할 수 있으므로 주의해야 합니다."
"ReactivePulsarTemplate에서 커스텀 스키마 매핑을 구성하려면 어떻게 해야 하나요?","ReactivePulsarTemplate에서 커스텀 스키마 매핑을 구성하는 한 가지 방법은 spring.pulsar.defaults.type-mappings 속성을 사용하는 것입니다. 이 속성을 사용하여 스키마 해결자에 매핑을 추가할 수 있으며, 해결자는 스키마 정보를 검색할 때 이를 참조합니다. 그러나 더 세밀한 제어가 필요한 경우 스키마 해결자 커스터마이저를 사용하여 매핑을 추가할 수 있습니다."
"ReactivePulsarListener를 사용할 때, 메시지 리스너 컨테이너는 어떻게 작동하나요?","ReactivePulsarListener는 메시지 리스너 컨테이너 인프라를 사용하여 내부적으로 작동합니다. 이 인프라의 핵심은 Apache Pulsar Reactive 소비자를 생성하고 관리하는 ReactivePulsarMessageListenerContainer입니다. 또한, 파이프라인은 데이터를 반응적으로 수신한 다음 생성된 소비자를 사용하는 메시지 핸들러로 전달하는 데 사용되는 Apache Pulsar Reactive 클라이언트의 기능인 ReactiveMessagePipeline도 포함됩니다. 마지막으로, ReactivePulsarMessageHandler는 메시지를 처리하는 데 사용되며, 단일 메시지를 하나씩 처리하는 ReactivePulsarOneByOneMessageHandler와 여러 메시지를 Flux를 통해 처리하는 ReactivePulsarStreamingHandler 두 가지 제공된 구현이 있습니다."
"Spring for Apache Pulsar 프레임워크는 복합 유형에 대한 올바른 스키마를 어떻게 추론할 수 있나요?","Spring for Apache Pulsar 프레임워크는 Java 원시 유형에 대해 ReactivePulsarListener에서 사용할 적절한 스키마를 추론할 수 있습니다. 비원시 유형의 경우, 스키마가 주석에 명시적으로 지정되지 않은 경우 프레임워크는 해당 유형에서 Schema.JSON을 빌드하려고 시도합니다. 현재 지원되는 복잡한 스키마 유형은 JSON, AVRO, PROTOBUF, AUTO_CONSUME, INLINE 인코딩이 있는 KEY_VALUE입니다."
"Pulsar에서 메시지 리디리버리 및 오류 처리를 어떻게 구성하나요?","Pulsar는 메시지 리디리버리 및 오류 처리를 위한 다양한 기본 전략을 제공하며, Spring for Apache Pulsar를 통해 이를 구성할 수 있습니다. 예를 들어, 소비자 커스터마이저를 사용하여 Pulsar 소비자 속성으로 ack 타임아웃을 설정할 수 있습니다. 또한, 소비자 커스터마이저를 사용하여 nack 리디리버리 지연 시간을 변경하고, DeadLetterPolicy를 구성하여 메시지가 일정 횟수만큼 리디리버리된 후 Dead Letter Queue(DLQ)로 전송되도록 지정할 수 있습니다. DLQ를 사용할 때는 공유 구독 유형을 사용해야 하며, 그렇지 않으면 작동하지 않습니다."
"스프링 Pulsar에서 메시지를 소비할 때 사용되는 기본 토픽을 구성하는 방법은 무엇인가요?","스프링 Pulsar에서 메시지를 소비할 때 사용되는 기본 토픽은 imperative API를 사용할 때 spring.pulsar.consumer.topics 또는 spring.pulsar.consumer.topics-pattern 속성을 통해 구성할 수 있습니다. Reactive API를 사용할 때는 spring.pulsar.reactive.consumer.topics 또는 spring.pulsar.reactive.consumer.topics-pattern 속성 중 하나를 사용할 수 있습니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/html/#topic-resolution)"
"스프링 Pulsar에서 사용자 지정 토픽 해결자를 구성하는 방법은 무엇인가요?","스프링 Pulsar에서 사용자 지정 토픽 해결자를 구성하려면 spring.pulsar.defaults.type-mappings 속성을 사용하여 매핑을 추가하는 것이 권장됩니다. 그러나 더 많은 제어가 필요한 경우 자체 구현을 제공하여 기본 해결자를 대체할 수 있습니다. 예를 들어, @Bean 주석이 달린 메서드에서 사용자 지정 토픽 해결자를 반환할 수 있습니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/html/#topic-resolution)"
"스프링 Pulsar에서 메시지를 생산할 때 사용되는 기본 토픽을 구성하는 방법은 무엇인가요?","스프링 Pulsar에서 메시지를 생산할 때 사용되는 기본 토픽은 imperative API를 사용할 때 spring.pulsar.producer.topic-name 속성을 통해 구성할 수 있습니다. Reactive API를 사용할 때는 spring.pulsar.reactive.sender.topic-name 속성을 사용할 수 있습니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/html/#topic-resolution)"
"스프링 부트에서 Pulsar 클러스터를 관리하기 위해 제공되는 관리 클래스는 무엇인가요?","PulsarAdministration (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/reference/pulsar-admin.html)"
"PulsarAdminOperations 인터페이스에서 어떤 메서드를 사용하여 Pulsar 토픽 관리를 처리할 수 있나요?","createOrModify 메서드 (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/api/org/springframework/pulsar/core/PulsarAdminOperations.html)"
"PulsarAdminClient를 사용하여 인증이 필요한 Pulsar 클러스터에 액세스하려면 어떤 보안 구성을 사용해야 하나요?","일반 Pulsar 클라이언트와 동일한 보안 구성이 필요합니다. spring.pulsar.client를 spring.pulsar.admin으로 대체하여 앞서 언급한 보안 구성을 사용할 수 있습니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/reference/pulsar-admin.html)"
"Pulsar Functions를 관리하기 위해 프레임워크에서 제공하는 구성 요소는 무엇인가요?","PulsarFunctionAdministration"
"Apache Pulsar에서 Pulsar Functions를 사용하려면 어떤 전제 조건이 필요한가요?","Pulsar IO 및 Pulsar Functions에 대한 어느 정도의 이해와 기능이 활성화되어 있어야 합니다."
"Pulsar Functions에서 커스텀 커넥터를 사용하는 방법은 무엇인가요?","Java8을 사용하여 코드를 작성하고, java.util.Function 또는 org.apache.pulsar.functions.api.Function을 구현한 후, uber jar로 패키징하여 사용할 수 있습니다."
"Spring for Apache Pulsar에서 Micrometer Observations를 통해 관리되는 가시성은 무엇인가요?","Spring for Apache Pulsar에서 Micrometer Observations를 통해 관리되는 가시성은 PulsarTemplate과 PulsarListener입니다. Micrometer ObservationRegistry 빈이 제공되면, send 및 receive 작업이 추적되고 시간이 측정됩니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/htmlsingle/#observability)"
"PulsarListenerObservation에서 저카드리티 키는 무엇인가요?","PulsarListenerObservation에서 저카드리티 키는 'spring.pulsar.listener.id'로, 메시지를 수신한 리스너 컨테이너의 ID를 나타냅니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/htmlsingle/#observability)"
"PulsarTemplateObservation에서 저카드리티 키는 무엇인가요?","PulsarTemplateObservation에서 저카드리티 키는 'spring.pulsar.template.name'으로, 메시지를 보낸 템플릿의 빈 이름을 나타냅니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/htmlsingle/#observability)"
"Spring Cloud Stream에서 Apache Pulsar 바인더를 사용하려면 어떤 종속성을 추가해야 하나요?","Maven 또는 Gradle 프로젝트에서 다음 종속성을 추가해야 합니다: <dependency> <groupId>org.springframework.pulsar</groupId> <artifactId>spring-pulsar-spring-cloud-stream-binder</artifactId> </dependency>"
"Spring Cloud Stream 바인더를 사용하면 어떤 이점이 있나요?","Spring Cloud Stream 바인더를 사용하면 애플리케이션이 Pulsar를 관리하고 유지하는 데 필요한 저수준 세부 정보에 대해 신경 쓰지 않고 비즈니스 로직에 집중할 수 있습니다. 바인더는 애플리케이션 개발자를 위해 이러한 세부 정보를 처리합니다."
"Spring Cloud Stream 애플리케이션에서 Apache Pulsar와 상호 작용하려면 어떻게 해야 하나요?","Spring Cloud Stream에서 Apache Pulsar 바인더를 사용하려면 해당 종속성을 애플리케이션에 포함해야 합니다. 그런 다음 spring.cloud.function.definition 및 spring.cloud.stream.bindings와 같은 구성 속성을 제공해야 합니다. 이렇게 하면 기본 Spring Boot 애플리케이션이 Spring Cloud Stream을 기반으로 하는 엔드 투 엔드 이벤트 기반 애플리케이션이 됩니다."
"Spring for Apache Pulsar의 1.0.x 버전에서 필요한 최소 Spring Boot 버전은 무엇인가요?","1.0.x 버전을 사용할 때 필요한 최소 Spring Boot 버전은 3.2.x입니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/appendix/version-compatibility.html)"
"Spring for Apache Pulsar의 0.2.x 버전에서 어떤 버전의 Pulsar Client와 Pulsar Reactive Client를 사용할 수 있나요?","0.2.x 버전과 호환되는 Pulsar Client 버전은 2.11.x이고, Pulsar Reactive Client 버전은 0.2.x입니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/appendix/version-compatibility.html)"
"Spring Boot의 3.1.x 버전에서 Spring for Apache Pulsar의 1.0.x 버전을 사용할 수 있나요?","1.0.x 버전은 Spring Boot 3.2.x에서 autoconfiguration이 이동되었기 때문에 3.2.x가 최소 지원되는 Spring Boot 버전입니다. 3.1.x 버전에서는 테스트되지 않았으므로 호환성이 보장되지 않습니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/appendix/version-compatibility.html)"
"Spring Boot 애플리케이션에서 Spring for Apache Pulsar를 사용할 때 Apache Pulsar 의존성 버전을 어떻게 설정하나요?","Spring Boot의 의존성 관리를 통해 Apache Pulsar 의존성 버전이 결정됩니다. pulsar-client-all 또는 pulsar-client-reactive-adapter의 다른 버전을 사용하려면, 각각 pulsar.version 또는 pulsar-reactive.version 속성을 설정하여 Spring Boot 의존성 관리에서 사용되는 버전을 재정의해야 합니다. 또는 지원되는 Spring Boot 버전과 함께 다른 Spring for Apache Pulsar 버전을 사용하려면 spring-pulsar.version 속성을 설정하세요. 다음 예제에서는 Pulsar 클라이언트 및 Spring for Apache Pulsar의 스냅샷 버전이 사용되고 있습니다. Gradle: ext['pulsar.version'] = '3.1.2-SNAPSHOT' ext['pulsar-reactive.version'] = '0.5.1-SNAPSHOT' ext['spring-pulsar.version'] = '1.0.2-SNAPSHOT' dependencies { implementation 'org.springframework.boot:spring-boot-starter-pulsar-reactive' } Maven: <properties> <pulsar.version>3.1.2-SNAPSHOT</pulsar.version> <pulsar-reactive.version>0.5.1-SNAPSHOT</pulsar-reactive.version> <spring-pulsar.version>1.0.2-SNAPSHOT</spring-pulsar.version> </properties> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-pulsar-reactive</artifactId> </dependency>"
"Spring Boot 애플리케이션에서 Spring for Apache Pulsar의 버전을 재정의하려면 어떻게 해야 하나요?","Spring Boot 애플리케이션에서 Spring for Apache Pulsar의 버전을 재정의하려면 Spring Boot의 의존성 관리를 사용하여 버전을 설정할 수 있습니다. spring-pulsar.version 속성을 설정하여 지원되는 Spring Boot 버전과 함께 다른 Spring for Apache Pulsar 버전을 사용할 수 있습니다. 다음 예제에서는 Pulsar 클라이언트 및 Spring for Apache Pulsar의 스냅샷 버전이 사용되고 있습니다. Gradle: ext['spring-pulsar.version'] = '1.0.2-SNAPSHOT' dependencies { implementation 'org.springframework.boot:spring-boot-starter-pulsar-reactive' } Maven: <properties> <spring-pulsar.version>1.0.2-SNAPSHOT</spring-pulsar.version> </properties> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-pulsar-reactive</artifactId> </dependency>"
"Spring Boot 애플리케이션에서 Spring for Apache Pulsar의 다른 버전을 사용하려면 어떻게 해야 하나요?","Spring Boot 애플리케이션에서 Spring for Apache Pulsar의 다른 버전을 사용하려면 Spring Boot의 의존성 관리를 사용하여 버전을 설정할 수 있습니다. pulsar.version 또는 pulsar-reactive.version 속성을 설정하여 pulsar-client-all 또는 pulsar-client-reactive-adapter의 다른 버전을 사용할 수 있습니다. 다음 예제에서는 Pulsar 클라이언트 및 Spring for Apache Pulsar의 스냅샷 버전이 사용되고 있습니다. Gradle: ext['pulsar.version'] = '3.1.2-SNAPSHOT' ext['pulsar-reactive.version'] = '0.5.1-SNAPSHOT' dependencies { implementation 'org.springframework.boot:spring-boot-starter-pulsar-reactive' } Maven: <properties> <pulsar.version>3.1.2-SNAPSHOT</pulsar.version> <pulsar-reactive.version>0.5.1-SNAPSHOT</pulsar-reactive.version> </properties> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-pulsar-reactive</artifactId> </dependency>"
"스프링 포 아파치 펄사 프로젝트에서 일관된 모듈 버전을 보장하려면 어떻게 해야 하나요?","프로젝트 전체에서 일관된 모듈 버전을 보장하려면 제공된 BOM을 사용하여 종속성을 가져오는 것이 좋습니다. 다음 예제는 Maven 및 Gradle 모두에 대해 이를 수행하는 방법을 보여줍니다. (출처: <https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/appendix/getting-dependencies-without-boot.html>)"
"스프링 포 아파치 펄사의 최소 종속성 세트는 어떻게 생겼나요?","최소 스프링 포 아파치 펄사 종속성 세트는 일반적으로 다음과 같습니다. (출처: <https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/appendix/getting-dependencies-without-boot.html>)"
"스프링 포 아파치 펄사의 전이 종속성에서 발생할 수 있는 클래스패스 문제를 어떻게 해결할 수 있나요?","이 문제를 해결하는 가장 쉬운 방법은 다음과 같이 dependencyManagement 섹션 내에서 spring-framework-bom을 사용하는 것입니다. (출처: <https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/appendix/getting-dependencies-without-boot.html>)"
"Maven과 Gradle에서 Spring의 비 GA 버전을 어떻게 찾을 수 있나요?","Maven과 Gradle에서 Spring의 스냅샷 또는 마일스톤 버전을 찾으려면 다음 저장소를 사용할 수 있습니다: <repository> <id>spring-milestones</id> <name>Spring Milestones</name> <url>https://repo.spring.io/milestone</url> </repository> <repository> <id>spring-snapshots</id> <name>Spring Snapshots</name> <url>https://repo.spring.io/snapshot</url> </repository> <repository> <id>apache-snapshots</id> <name>Apache Snapshots</name> <url>https://repository.apache.org/content/repositories/snapshots</url> </repository> (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/appendix/non-ga-versions.html)"
"이 저장소에서 어떤 Spring 버전을 사용할 수 있나요?","이 저장소에서는 Spring의 스냅샷 또는 마일스톤 버전을 사용할 수 있습니다. (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/appendix/non-ga-versions.html)"
"Gradle에서 저장소를 포함하려면 어떻게 해야 하나요?","Gradle에서 저장소를 포함하려면 build.gradle 파일에 다음 코드를 추가하십시오: repositories { maven { name = 'spring-milestones' url = 'https://repo.spring.io/milestone' } maven { name = 'spring-snapshots' url = 'https://repo.spring.io/snapshot' } maven { name = 'apache-snapshot' url = 'https://repository.apache.org/content/repositories/snapshots' } } (출처: https://docs.spring.io/spring-pulsar/docs/1.1.4/reference/appendix/non-ga-versions.html)"
