"Spring Cloud Contract는 어떤 유형의 테스트를 허용하나요?","Spring Cloud Contract는 소비자 주도 및 생산자 주도 계약 테스트를 허용합니다. (출처: {https://docs.spring.io/spring-cloud-contract/reference/index.html})"
"Spring Cloud Contract를 만든 주요 인물은 누구인가요?","Adam Dudczak, Mathias Düsterhöft, Marcin Grzejszczak, Dennis Kieselhorst, Jakub Kubryński, Karol Lassak, Olga Maciaszek-Sharma, Mariusz Smykuła, Dave Syer, Jay Bryant 등이 Spring Cloud Contract를 만들었습니다. (출처: {https://docs.spring.io/spring-cloud-contract/reference/index.html})"
"Spring Cloud Contract의 주요 목표는 무엇인가요?","Spring Cloud Contract의 주요 목표는 TDD를 소프트웨어 아키텍처 수준으로 끌어올리는 것입니다. (출처: {https://docs.spring.io/spring-cloud-contract/reference/index.html})"
"이 문서의 복사본은 어떻게 배포할 수 있나요?","이 문서의 복사본은 배포할 때 어떠한 수수료도 부과하지 않고, 배포된 복사본에 이 저작권 고지가 포함되어야 합니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/legal.html)"
"이 문서를 배포할 때 저작권 고지를 포함해야 하는 이유는 무엇인가요?","이 문서를 배포할 때 저작권 고지를 포함해야 하는 이유는, 저작권을 존중하고 원작자의 권리를 보호하기 위함입니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/legal.html)"
"이 문서를 배포할 때 복사본에 수수료를 부과할 수 있나요?","아니요, 이 문서의 복사본은 어떠한 수수료도 부과하지 않고 배포해야 합니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/legal.html)"
"Spring Cloud Contract와 Spring에 대해 처음 접하는 사용자를 위한 시작 가이드는 어떤 내용을 포함하고 있나요?","Spring Cloud Contract 시작 가이드는 Spring Cloud Contract에 대한 소개와 함께 설치 지침, 첫 번째 Spring Cloud Contract 애플리케이션 구축 과정, 그리고 핵심 원칙에 대한 설명을 포함하고 있습니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/getting-started.html)"
"Spring Cloud Contract 시작 가이드에서 어떤 내용을 다루고 있나요?","Spring Cloud Contract 시작 가이드는 Spring Cloud Contract에 대한 기본 정보, 사용 방법, 그리고 왜 사용해야 하는지에 대한 내용을 다루고 있습니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/getting-started.html)"
"Spring Cloud Contract 시작 가이드를 통해 첫 번째 Spring Cloud Contract 애플리케이션을 구축하는 방법은 무엇인가요?","Spring Cloud Contract 시작 가이드를 통해 첫 번째 Spring Cloud Contract 애플리케이션을 구축하는 방법은 가이드를 따라가며 단계별로 진행하면 됩니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/getting-started.html)"
"Spring Cloud Contract의 목적은 무엇인가요?","Spring Cloud Contract는 TDD를 소프트웨어 아키텍처 수준으로 이동시키는 프로젝트입니다. 소비자 주도 및 프로듀서 주도 계약 테스트를 가능하게 합니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/)"
"Spring Cloud Contract는 어떻게 개발되었나요?","Spring Cloud Contract는 원래 Accurest라는 이름으로 Codearte의 Marcin Grzejszczak과 Jakub Kubrynski에 의해 개발되었습니다. 0.1.0 버전은 2015년 1월 26일에 출시되었으며, 1.0.0 버전은 2016년 2월 29일에 안정화되었습니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/)"
"Spring Cloud Contract의 주요 목적은 무엇인가요?","Spring Cloud Contract의 주요 목적은 HTTP 및 메시징 스텁(클라이언트 개발 시 사용)이 실제 서버 측 구현과 정확히 일치하는지 확인하는 것입니다. 또한, ATDD(Acceptance Test-Driven Development) 방법과 마이크로서비스 아키텍처 스타일을 촉진합니다. 계약 변경 사항을 즉시 양측에서 확인할 수 있는 방법을 제공합니다. 서버 측에서 사용할 암시적 테스트 코드를 생성합니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/)"
"Spring Cloud Contract의 3초 투어에서 생산자 측에서 어떻게 작동하기 시작하나요?","Spring Cloud Contract의 3초 투어에서 생산자 측에서 작동하기 시작하려면, contracts 디렉토리에 REST 또는 메시징 계약이 Groovy DSL 또는 YAML로 표현된 파일을 추가해야 합니다. 이 디렉토리는 contractsDslDir 속성에 의해 설정됩니다. 기본적으로 $rootDir/src/test/resources/contracts입니다. 그런 다음 build 파일에 Spring Cloud Contract Verifier 종속성과 플러그인을 추가할 수 있습니다. 예를 들어: <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-contract-verifier</artifactId> <scope>test</scope> </dependency> 그리고 build/plugins 부분에 다음 플러그인을 추가할 수 있습니다: <plugin> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-contract-maven-plugin</artifactId> <version>${spring-cloud-contract.version}</version> <extensions>true</extensions> </plugin> ./mvnw clean install을 실행하면 추가된 계약과 애플리케이션의 호환성을 확인하는 테스트가 자동으로 생성됩니다. (출처: <https://docs.spring.io/spring-cloud-contract/reference/html/#getting-started-three-second-tour-producer>)"
"Spring Cloud Contract Verifier 플러그인을 Maven 빌드 파일에 어떻게 추가하나요?","Spring Cloud Contract Verifier 플러그인을 Maven 빌드 파일에 추가하려면 build/plugins 부분에 다음 플러그인을 추가할 수 있습니다: <plugin> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-contract-maven-plugin</artifactId> <version>${spring-cloud-contract.version}</version> <extensions>true</extensions> </plugin> (출처: <https://docs.spring.io/spring-cloud-contract/reference/html/#getting-started-three-second-tour-producer>)"
"Spring Cloud Contract에서 기본 테스트 클래스를 지정하는 방법은 무엇인가요?","Spring Cloud Contract에서 기본 테스트 클래스를 지정하려면 spring-cloud-contract-maven-plugin 내의 configuration 요소 내에 있는 baseClassForTests 요소를 사용하면 됩니다. 예를 들어: <build> <plugins> <plugin> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-contract-maven-plugin</artifactId> <version>2.1.2.RELEASE</version> <extensions>true</extensions> <configuration> <baseClassForTests>com.example.contractTest.BaseTestClass</baseClassForTests> </configuration> </plugin> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> (출처: <https://docs.spring.io/spring-cloud-contract/reference/html/#getting-started-three-second-tour-producer>)"
"Spring Cloud Contract를 사용하기 위해 어떤 의존성과 플러그인을 빌드 파일에 추가해야 하나요?","Spring Cloud Contract Verifier 의존성과 플러그인을 빌드 파일에 추가해야 합니다. 의존성 요소는 다음과 같습니다: <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-contract-verifier</artifactId> <scope>test</scope> </dependency>. 플러그인 요소는 다음과 같습니다: <plugin> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-contract-maven-plugin</artifactId> <version>${spring-cloud-contract.version}</version> <extensions>true</extensions> </plugin>"
"Spring Initializr에서 Spring Cloud Contract를 사용하기 위해 어떤 설정을 해야 하나요?","Spring Initializr에서 'Web'과 'Contract Verifier'를 의존성으로 추가해야 합니다."
"Spring Cloud Contract에서 REST/메시징 계약은 어떤 디렉토리에 위치해야 하나요?","REST/메시징 계약은 contracts 디렉토리에 위치해야 합니다. 이 디렉토리는 contractsDslDir 속성에 의해 설정됩니다. 기본적으로 $rootDir/src/test/resources/contracts입니다."
"Consumer Driven Contracts (CDC)의 주요 목표는 무엇인가요?","Consumer Driven Contracts (CDC)의 주요 목표는 소비자 측에서 producer와의 통신을 테스트하여 생산자 측에서 API 계약의 준수를 확인하는 것입니다. 이를 통해 소비자 측에서는 생산자 측의 변경 사항에 대한 영향을 미리 파악하고, 생산자 측에서는 소비자 측과의 호환성을 유지할 수 있습니다. (Source: https://docs.spring.io/spring-cloud-contract/reference/html/#consumer-driven-contracts)"
"Consumer Driven Contracts (CDC)에서 생산자 측과 소비자 측의 역할은 어떻게 되나요?","Consumer Driven Contracts (CDC)에서 생산자 측은 API를 노출하는 서비스를 개발하고, 소비자 측은 해당 API를 사용하는 서비스를 개발합니다. 생산자 측은 API 계약을 작성하고, 소비자 측은 해당 계약을 기반으로 통합 테스트를 작성하여 생산자 측과의 통신을 테스트합니다. 이를 통해 생산자 측과 소비자 측 간의 통신을 안정화하고, 통합 테스트의 품질을 높일 수 있습니다. (Source: https://docs.spring.io/spring-cloud-contract/reference/html/#consumer-driven-contracts)"
"Consumer Driven Contracts (CDC)에서 Maven과 Gradle 플러그인의 목적은 무엇인가요?","Consumer Driven Contracts (CDC)에서 Maven과 Gradle 플러그인은 계약을 기반으로 테스트를 생성하고 실행하며, 스텁을 생성하고 설치하는 기능을 제공합니다. 이를 통해 개발자는 통합 테스트의 품질을 높이고, 생산자 측과 소비자 측 간의 통신을 안정화할 수 있습니다. (Source: https://docs.spring.io/spring-cloud-contract/reference/html/#maven-and-gradle-plugins)"
"Spring Cloud Contract를 사용하여 마이크로서비스 아키텍처를 구축하는 데 도움이 되는 'how-to' 참조 문서를 찾을 수 있는 위치는 어디인가요?","Spring Cloud Contract-specific 'how-to' 참조 문서는 <https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#howto>에서 찾을 수 있습니다."
"Spring Cloud Contract 기능을 사용하는 데 대한 자세한 정보를 얻을 수 있는 자료는 어디에서 찾을 수 있나요?","Spring Cloud Contract 기능에 대한 자세한 정보는 <https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#project-features>에서 확인할 수 있습니다."
"Spring Cloud Contract를 사용하여 마이크로서비스 아키텍처를 구축하는 데 대한 비디오 튜토리얼을 찾을 수 있는 위치는 어디인가요?","Spring Cloud Contract를 사용하여 마이크로서비스 아키텍처를 구축하는 데 대한 비디오 튜토리얼은 <https://github.com/spring-cloud-samples/spring-cloud-contract-samples>에서 찾을 수 있습니다."
"Nexus 또는 Artifactory에서 Spring Cloud Contract를 사용하여 제공자 계약 테스트를 수행하는 방법은 무엇인가요?","Nexus 또는 Artifactory에서 Spring Cloud Contract를 사용하여 제공자 계약 테스트를 수행하려면, https://docs.spring.io/spring-cloud-contract/reference/using/provider-contract-testing-with-stubs.html의 링크를 따라가서 첫 번째 Spring Cloud Contract 기반 애플리케이션 개발 문서를 참조하세요."
"Spring Cloud Contract를 사용하여 제공자 계약 테스트를 수행할 때 Nexus 또는 Artifactory 저장소가 필요한 이유는 무엇인가요?","제공자 계약 테스트와 관련하여 Nexus 또는 Artifactory 저장소의 구체적인 필요성에 대한 정보는 직접적으로 제공되지 않았습니다. 그러나 Nexus 또는 Artifactory 저장소는 일반적으로 소프트웨어 패키지를 저장하고 배포하기 위해 사용되며, Spring Cloud Contract를 사용하여 제공자 계약 테스트를 수행할 때도 비슷한 목적으로 사용될 수 있습니다."
"Nexus 또는 Artifactory에서 Spring Cloud Contract를 사용하여 제공자 계약 테스트를 수행하는 데 필요한 설정은 무엇인가요?","Nexus 또는 Artifactory에서 Spring Cloud Contract를 사용하여 제공자 계약 테스트를 수행하는 데 필요한 구체적인 설정에 대한 정보는 직접적으로 제공되지 않았습니다. 그러나 Spring Cloud Contract 문서에서는 제공자 계약 테스트와 관련하여 필요한 설정 및 구성 옵션에 대한 자세한 정보를 제공하고 있습니다. 자세한 내용은 https://docs.spring.io/spring-cloud-contract/reference/html/의 Spring Cloud Contract 공식 문서를 참조하세요."
"Spring Cloud Contract에서 Stubs in Git을 사용하여 Provider Contract Testing을 어떻게 수행하나요?","먼저, git 저장소를 제공하여 각 Producer에 대한 모든 Stubs를 포함해야 합니다. 그런 다음, Stub Runner의 URL에 git 프로토콜을 사용하여 Nexus 또는 Artifactory 대신 git 저장소에서 Stubs를 가져오도록 Consumer를 설정해야 합니다. 마지막으로, Plugin 설정의 URL에 git 프로토콜을 사용하여 Nexus 또는 Artifactory 대신 git 저장소에 Stubs를 푸시하도록 Producer를 설정해야 합니다."
"Spring Cloud Contract에서 git을 저장소로 사용하는 방법은 무엇인가요?","Consumer와 Producer 양쪽을 설정하는 방법은 Spring Cloud Contract 문서에서 git을 저장소로 사용하는 방법에 대한 How To 페이지에서 확인할 수 있습니다. Consumer를 설정하려면 Stub Runner의 URL에 git 프로토콜을 사용하여 Nexus 또는 Artifactory 대신 git 저장소에서 Stubs를 가져와야 합니다. Producer를 설정하려면 Plugin 설정의 URL에 git 프로토콜을 사용하여 Nexus 또는 Artifactory 대신 git 저장소에 Stubs를 푸시해야 하며, 빌드 프로세스의 끝에서 Stubs를 푸시하도록 명시적으로 Plugin에 알려야 합니다."
"Spring Cloud Contract에서 git을 사용하여 Stubs를 저장하는 예제 프로젝트가 있나요?","네, git을 사용하여 Stubs를 저장하는 예제 프로젝트는 Spring Cloud Contract 샘플 Git 저장소에서 확인할 수 있습니다. Consumer 예제는 <https://github.com/spring-cloud-samples/spring-cloud-contract-samples/tree/main/consumer>에서, Producer 예제는 <https://github.com/spring-cloud-samples/spring-cloud-contract-samples/tree/main/producer_with_empty_git>에서 찾을 수 있습니다."
"소비자 주도 계약(CDC)에 대해 설명하고, 생산자 측에 계약이 있는 경우 어떻게 작동하는지 알려주세요.","소비자 주도 계약(CDC)은 소비자 측에서 계약 구현을 생성하고, 이를 사용하여 생산자 측에서 API의 동작을 테스트하는 방식입니다. 생산자 측에 계약이 있는 경우, 생산자 측에서 API를 구현하고, 이를 사용하여 소비자 측에서 API를 테스트할 수 있습니다. Step-by-step Guide to Consumer Driven Contracts(CDC) with contracts laying on the producer side(../getting-started/cdc.html) 문서에서 자세한 내용을 확인할 수 있습니다. (출처: <https://docs.spring.io/spring-cloud-contract/reference/using/cdc-git.html>)"
"스텁 저장소 구현은 어떤 방식으로 이루어지나요?","스텁 저장소 구현은 git 저장소를 사용하여 이루어집니다. Provider Contract Testing with Stubs in Git(provider-contract-testing-with-stubs-in-git.html) 섹션에서 이에 대한 자세한 설정 방법을 설명하고 있습니다. 소비자 측과 생산자 측에서 git 저장소를 설정하는 방법에 대한 자세한 내용은 How To 섹션(../howto/how-to-use-git-as-storage.html)에서 확인할 수 있습니다. (출처: <https://docs.spring.io/spring-cloud-contract/reference/using/cdc-git.html>)"
"Spring Cloud Contract에서 git 저장소를 사용하여 소비자 주도 계약(CDC)을 구현하는 방법은 어떻게 되나요?","Spring Cloud Contract에서 git 저장소를 사용하여 소비자 주도 계약(CDC)을 구현하려면, 먼저 How To 섹션(../howto/how-to-use-git-as-storage.html)에서 설명된 지침에 따라 git 저장소를 설정해야 합니다. 그런 다음, Step-by-step Guide to Consumer Driven Contracts(CDC) with contracts laying on the producer side(../getting-started/cdc.html) 문서에서 설명된 단계를 따라 소비자 주도 계약을 구현할 수 있습니다. Provider Contract Testing with Stubs in Git(provider-contract-testing-with-stubs-in-git.html) 섹션에서는 git 저장소를 사용하여 스텁 구현을 테스트하는 방법에 대한 자세한 내용을 설명하고 있습니다. (출처: <https://docs.spring.io/spring-cloud-contract/reference/using/cdc-git.html>)"
"Spring Cloud Contract에서 Artifactory와 함께 Provider Contract Testing을 수행하는 방법은 무엇인가요?","Artifactory에서 Stub과 함께 Provider Contract Testing을 수행하는 방법은 Nexus 또는 Artifactory에서 Stub과 함께 Provider Contract Testing의 흐름을 보여주는 Developing Your First Spring Cloud Contract-based Application 페이지를 참조하십시오. 소비자 설정에는 JUnit 규칙을 사용할 수 있으며, 생산자 설정에는 Spring Cloud Contract 플러그인을 사용하여 EXPLICIT 모드를 설정할 수 있습니다."
"Spring Cloud Contract에서 JUnit 4와 5에서 StubRunnerRule 및 StubRunnerExtension을 설정하는 방법은 무엇인가요?","Spring Cloud Contract에서 JUnit 4에서 StubRunnerRule을 설정하려면 @Rule 주석을 사용하고 StubRunnerRule 클래스를 인스턴스화하여 다운로드할 스텁, 저장소 루트 및 스텁 모드를 지정합니다. JUnit 5에서 StubRunnerExtension을 설정하려면 @RegisterExtension 주석을 사용하고 StubRunnerExtension 클래스를 인스턴스화하여 동일한 속성을 지정합니다."
"Spring Cloud Contract에서 Maven 및 Gradle에서 EXPLICIT 모드를 구성하는 방법은 무엇인가요?","Spring Cloud Contract에서 Maven에서 EXPLICIT 모드를 구성하려면 Spring Cloud Contract Maven 플러그인의 구성 섹션에 testMode 속성을 추가하고 EXPLICIT으로 설정합니다. Gradle에서 EXPLICIT 모드를 구성하려면 contracts 블록에 testMode 속성을 추가하고 EXPLICIT으로 설정합니다."
"비 JVM 애플리케이션에서 Spring Cloud Contract를 사용하여 계약 테스트를 수행하는 방법은 무엇인가요?","비 JVM 애플리케이션에서 Spring Cloud Contract를 사용하여 계약 테스트를 수행하려면, 계약 정의를 YAML로 작성하고, Artifactory 또는 Nexus를 스텁 저장소로 사용해야 합니다. 또한, Spring Cloud Contract Docker (SCC Docker) 및 Spring Cloud Contract Stub Runner Docker (SCC Stub Runner Docker) 이미지를 사용해야 합니다. 자세한 내용은 다음 링크에서 확인할 수 있습니다: <https://docs.spring.io/spring-cloud-contract/reference/using/provider-contract-testing-non-jvm.html>"
"Spring Cloud Contract를 사용하여 폴리글랏 환경에서 계약 테스트를 수행하는 방법은 무엇인가요?","Spring Cloud Contract를 사용하여 폴리글랏 환경에서 계약 테스트를 수행하려면, Spring Cloud Contract를 프로듀서 및 컨슈머로 사용하는 NodeJS 애플리케이션의 샘플을 참조할 수 있습니다. 자세한 내용은 다음 블로그 포스트를 참조하십시오: <https://spring.io/blog/2018/02/13/spring-cloud-contract-in-a-polyglot-world>"
"Spring Cloud Contract를 사용하여 프로듀서 및 컨슈머의 계약 테스트 흐름을 생성하는 방법은 무엇인가요?","Spring Cloud Contract를 사용하여 프로듀서 및 컨슈머의 계약 테스트 흐름을 생성하려면, 프로듀서는 YAML로 계약 정의를 작성하고, 빌드 도구를 설정하여 모의 서비스를 시작하고, Spring Cloud Contract Docker 이미지를 사용하여 테스트를 생성하고 실행해야 합니다. 컨슈머는 빌드 도구를 설정하여 스텁을 시작하고, Spring Cloud Contract Stub Runner Docker 이미지를 사용하여 실행 중인 스텁에 대한 애플리케이션 테스트를 실행해야 합니다. 이러한 흐름의 UML 다이어그램은 다음 링크에서 확인할 수 있습니다: <https://docs.spring.io/spring-cloud-contract/reference/using/provider-contract-testing-non-jvm.html>"
"Nexus 또는 Artifactory에서 REST Docs 및 Stubs를 사용하여 공급자 계약 테스트를 수행하는 방법은 무엇인가요?","Spring Cloud Contract 플러그인을 사용하여 테스트 및 스텁을 생성하는 대신, Spring RESTDocs를 작성하고 이를 통해 스텁을 자동으로 생성합니다. 그런 다음 빌드를 설정하여 스텁을 패키징하고 스텁 저장소 사이트(예: Nexus 또는 Artifactory)에 업로드합니다. Maven 또는 Gradle과 같은 빌드 도구를 사용하여 스텁을 패키징하고, 'spring-cloud-starter-contract-stub-runner' 종속성을 추가하여 스텁을 실행하고 게시할 수 있습니다. 스텁은 테스트를 실행할 때 자동으로 패키징되고 게시됩니다. 이 흐름을 보여주는 UML 다이어그램이 있습니다."
"Spring Cloud Contract 공급자 측에서 'spring-cloud-starter-contract-stub-runner' 종속성을 Maven 또는 Gradle 프로젝트에 추가하는 방법은 무엇인가요?","Maven 프로젝트에서는 'dependencies' 섹션에 종속성을 추가하고 'test' 범위를 지정합니다. Gradle 프로젝트에서는 'dependencies' 섹션에 종속성을 'testImplementation'으로 추가합니다. 또한, 'spring-cloud-dependencies' 종속성 관리를 추가하여 종속성 버전을 관리합니다. 종속성을 추가한 후에는 빌드 도구를 설정하여 스텁을 패키징하고 게시해야 합니다."
"Spring Cloud Contract 공급자 측에서 RESTDocs 테스트를 작성하고 스텁을 생성하는 방법은 무엇인가요?","RESTDocs 테스트를 작성하려면 Spring RESTDocs 라이브러리를 사용합니다. RESTDocs는 API 문서를 생성하고 API와 상호 작용하는 테스트를 작성하는 데 사용됩니다. RESTDocs 테스트를 작성하면 Spring Cloud Contract Stub Runner 스타터를 사용하여 스텁을 자동으로 생성할 수 있습니다. 스텁은 RESTDocs 테스트를 기반으로 하며, 계약의 프로듀서 측을 나타냅니다. 스텁은 테스트를 실행할 때 자동으로 패키징되고 게시됩니다."
"Spring Cloud Contract의 주요 기능은 무엇인가요?","Spring Cloud Contract의 주요 기능은 무엇인가요? (출처: <https://docs.spring.io/spring-cloud-contract/reference/project-features.html>)"
"Spring Cloud Contract를 사용하기 전에 어떤 섹션을 먼저 읽어야 하나요?","Spring Cloud Contract를 사용하기 전에 'Getting Started(getting-started.html)' 및 'Using Spring Cloud Contract(using.html)' 섹션을 먼저 읽는 것이 좋습니다. (출처: <https://docs.spring.io/spring-cloud-contract/reference/project-features.html>)"
"Spring Cloud Contract를 사용자 정의하려면 어떻게 해야 하나요?","Spring Cloud Contract를 사용자 정의하려면 주요 기능을 학습하고 사용자 정의할 수 있습니다. 이 섹션에서는 Spring Cloud Contract의 세부 정보와 사용자 정의할 수 있는 주요 기능에 대해 알아봅니다. 아직 읽지 않았다면 'Getting Started(getting-started.html)' 및 'Using Spring Cloud Contract(using.html)' 섹션을 읽어보는 것이 좋습니다. (출처: <https://docs.spring.io/spring-cloud-contract/reference/project-features.html>)"
"Spring Cloud Contract는 어떤 언어의 DSL을 지원하나요?","Spring Cloud Contract는 Groovy, YAML, Java, Kotlin 언어의 DSL을 지원합니다."
"하나의 파일에서 여러 개의 계약을 정의할 수 있나요?","네, 하나의 파일에서 여러 개의 계약을 정의할 수 있습니다. Groovy에서는 단일 계약 대신 리스트를 반환하면 됩니다. YAML에서는 --- 구분자를 사용하여 여러 개의 계약을 정의할 수 있습니다. Java에서는 Supplier<Collection<Contract>> 인터페이스를 구현하는 클래스를 만들고, Kotlin에서는 contract 함수를 사용하여 여러 개의 계약을 정의할 수 있습니다."
"Spring Cloud Contract의 YAML DSL에 대한 스키마를 볼 수 있는 곳은 어디인가요?","YAML 계약의 스키마를 보려면 YML Schema(yml-schema.html) 페이지를 방문하세요."
"스프링 클라우드 계약(Spring Cloud Contract)에서 공통 최상위 요소(common top-level elements)란 무엇인가요?","스프링 클라우드 계약(Spring Cloud Contract)에서 공통 최상위 요소는 가장 일반적으로 사용되는 최상위 요소들로, Description, Name, Ignoring Contracts, Contracts in Progress, Passing Values from Files, Metadata 등이 있습니다."
"스프링 클라우드 계약(Spring Cloud Contract)에서 Description 요소는 어떻게 사용되나요?","Description 요소는 계약에 설명을 추가하는 데 사용됩니다. 설명은 임의의 텍스트로 구성될 수 있으며, Groovy, YAML, Kotlin, Java 등 다양한 방법으로 구성할 수 있습니다. 예를 들어, Groovy에서는 Contract.make { description(''' given: An input when: Sth happens then: Output ''') }와 같이 구성할 수 있습니다."
"스프링 클라우드 계약(Spring Cloud Contract)에서 Name 요소는 어떻게 사용되나요?","Name 요소는 계약에 이름을 지정하는 데 사용됩니다. 이름을 지정하면 자동 생성된 테스트의 이름과 와이어Mock 스텁의 이름이 결정됩니다. 이름은 생성된 테스트가 컴파일되지 않도록 하는 문자를 포함해서는 안 됩니다. 또한, 여러 계약에 동일한 이름을 지정하면 자동 생성된 테스트가 컴파일되지 않고 생성된 스텁이 서로 덮어쓰여집니다. Groovy에서는 Contract.make { name('some_special_name') }와 같이 구성할 수 있습니다."
"Spring Cloud Contract에서 동적 속성을 사용하는 목적은 무엇인가요?","Spring Cloud Contract에서 동적 속성을 사용하면, 테스트에서 고정된 값을 사용하는 대신, 소비자 또는 생산자에서 가져온 값을 사용하여 계약에 동적인 값을 포함시킬 수 있습니다. 이를 통해 더 유연하고 정확한 계약 테스트를 작성할 수 있습니다."
"Spring Cloud Contract에서 동적 속성을 사용하는 방법은 무엇인가요?","Spring Cloud Contract에서 동적 속성을 사용하려면, body 또는 bodyMatchers 섹션에서 동적 값을 지정하면 됩니다. Coded DSL에서는 value 메서드 또는 Groovy 맵 표기법을 사용하여 body 내에서 속성을 설정할 수 있습니다. YAML에서는 matchers 섹션에서만 사용할 수 있습니다."
"Spring Cloud Contract에서 정규 표현식을 사용할 수 있는 경우는 어떤 경우인가요?","Spring Cloud Contract에서는 요청 또는 응답 본문에서 정규 표현식을 사용할 수 있습니다. 이를 통해 특정 패턴에 맞는 요청 또는 응답에 대해 계약을 작성할 수 있습니다. 정규 표현식을 사용하면 정확한 값이 아닌 패턴과 일치하는 값을 사용할 수 있습니다. 단, 내부적으로 Pattern.matches()가 호출되므로, 정규 표현식은 시퀀스의 전체 영역과 일치해야 합니다."
"Spring Cloud Contract Integrations란 무엇인가요?","Spring Cloud Contract Integrations는 다양한 Spring Cloud Contract 통합에 대해 배울 수 있는 페이지입니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/project-features-integrations.html)"
"Spring Cloud Contract Integrations 페이지에서 어떤 정보를 얻을 수 있나요?","Spring Cloud Contract Integrations 페이지에서는 다양한 Spring Cloud Contract 통합에 대한 정보를 얻을 수 있습니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/project-features-integrations.html)"
"Spring Cloud Contract Integrations 페이지에서 제공되는 통합에는 어떤 것들이 있나요?","Spring Cloud Contract Integrations 페이지에서는 다양한 Spring Cloud Contract 통합에 대한 정보를 제공합니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/project-features-integrations.html)"
"JAX-RS 2 Client API를 사용하는 Spring Cloud Contract에서 base class는 어떤 protected 필드를 정의해야 하나요?","WebTarget (출처: {https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#_jax_rs})"
"JAX-RS API를 테스트하기 위해 필요한 유일한 옵션은 무엇인가요?","웹 서버를 시작해야 합니다. (출처: {https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#_jax_rs})"
"JAX-RS 모드를 사용하려면 어떤 설정을 사용해야 하나요?","testMode = 'JAXRSCLIENT' (출처: {https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#_jax_rs})"
"Spring Cloud Contract에서 WebFlux를 사용하기 위해 WebTestClient를 어떻게 구성하나요?","WebTestClient를 구성하기 위해 Maven 설정에서 <testMode>WEBTESTCLIENT</testMode>를 사용하고, Gradle 설정에서 testMode = 'WEBTESTCLIENT'를 지정하면 됩니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/project-features-flows/feature-webflux.html)"
"Spring Cloud Contract에서 WebTestClient와 함께 RestAssured를 WebFlux와 함께 사용하려면 어떻게 설정해야 하나요?","RestAssuredWebTestClient.standaloneSetup() 메서드를 사용하여 WebTestClient 기본 클래스와 RestAssured를 설정할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/project-features-flows/feature-webflux.html)"
"Spring Cloud Contract에서 WebTestClient 모드는 EXPLICIT 모드와 비교하여 어떤 이점이 있나요?","WebTestClient 모드는 EXPLICIT 모드보다 더 빠릅니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/project-features-flows/feature-webflux.html)"
"Spring Cloud Contract를 사용하여 WebFlux로 생성된 테스트를 명시적으로 구성하는 방법은 무엇인가요?","Maven에서는 <testMode>EXPLICIT</testMode>를 구성하여, Gradle에서는 contracts { testMode = 'EXPLICIT' }를 설정하여 명시적으로 구성할 수 있습니다. (출처: {https://docs.spring.io/spring-cloud-contract/reference/html/project-features-flows.html#_webflux_explicit})"
"WebFlux를 사용하여 Spring Cloud Contract로 생성된 테스트의 기본 클래스를 설정하는 방법은 무엇인가요?","RestAssured를 사용하여 WebFlux를 지원하는 기본 클래스를 설정하는 방법은 다음 예제(https://raw.githubusercontent.com/spring-cloud-samples/spring-cloud-contract-samples/main/producer_webflux/)에서 확인할 수 있습니다. (출처: {https://docs.spring.io/spring-cloud-contract/reference/html/project-features-flows.html#_webflux_explicit})"
"Spring Cloud Contract의 명시적 모드를 사용하여 WebFlux를 사용하는 경우, Maven 및 Gradle의 구성 예시는 무엇인가요?","Maven에서는 <plugin> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-contract-maven-plugin</artifactId> <version>${spring-cloud-contract.version}</version> <extensions>true</extensions> <configuration> <testMode>EXPLICIT</testMode> </configuration> </plugin>을 사용하고, Gradle에서는 contracts { testMode = 'EXPLICIT' }를 설정합니다. (출처: {https://docs.spring.io/spring-cloud-contract/reference/html/project-features-flows.html#_webflux_explicit})"
"Spring Cloud Contract에서 Custom Mode란 무엇이며, 어떤 경우에 사용해야 하나요?","Spring Cloud Contract에서 Custom Mode는 실험적인 기능으로, 사용자가 원하는 클라이언트를 사용하여 요청을 보내고 받을 수 있도록 허용합니다. 이 모드는 기본 구현인 OkHttpHttpVerifier를 사용하지 않고 다른 HTTP 클라이언트를 사용하려는 경우에 사용해야 합니다. 이 모드를 사용하려면 testMode를 'CUSTOM'으로 설정해야 합니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/html/project-features-flows.html#custom-mode)"
"Spring Cloud Contract의 Custom Mode에서 org.springframework.cloud.contract.verifier.http.HttpVerifier 인터페이스를 구현하는 방법은 무엇인가요?","Spring Cloud Contract의 Custom Mode에서 org.springframework.cloud.contract.verifier.http.HttpVerifier 인터페이스를 구현하려면, 해당 인터페이스를 구현하는 사용자 정의 클래스를 작성하고, request와 response를 주고받는 로직을 구현해야 합니다. 그리고 테스트 클래스에서 해당 HttpVerifier 객체를 인스턴스화하여 사용하면 됩니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/html/project-features-flows.html#custom-mode)"
"Spring Cloud Contract의 Custom Mode를 사용하려면 어떻게 설정해야 하나요?","Spring Cloud Contract의 Custom Mode를 사용하려면, 테스트 클래스에서 testMode를 'CUSTOM'으로 설정해야 합니다. 이를 위해 @Test 메서드 위에 @TestPropertySource 어노테이션을 추가하고, 'testMode' 속성을 'CUSTOM'으로 설정하면 됩니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/html/project-features-flows.html#custom-mode)"
"스프링 클라우드 계약에서 컨텍스트 패스를 지원하기 위해 프로듀서 측에서 필요한 변경 사항은 무엇인가요?","스프링 클라우드 계약에서 컨텍스트 패스를 지원하기 위해 프로듀서 측에서 필요한 유일한 변경 사항은 스위치입니다. 또한, 자동으로 생성된 테스트는 명시적 모드를 사용해야 합니다. 소비자 측은 변경되지 않습니다. 생성된 테스트가 통과하려면 명시적 모드를 사용해야 합니다. 다음 예제는 Maven에서 테스트 모드를 EXPLICIT으로 설정하는 방법을 보여줍니다."
"스프링 클라우드 계약에서 컨텍스트 패스에 대한 계약을 작성하는 방법은 무엇인가요?","스프링 클라우드 계약에서 컨텍스트 패스에 대한 계약을 작성하려면 다음과 같은 예제 계약을 사용하십시오: org.springframework.cloud.contract.spec.Contract.make { request { method 'GET' https://docs.spring.io/spring-cloud-contract/reference/project-features-flows/context-paths.html '/my-context-path/https://docs.spring.io/spring-cloud-contract/reference/project-features-flows/context-paths.html' } response { status OK() } } 이 계약은 컨텍스트 패스가 있는 계약을 작성하는 방법을 반영합니다."
"스프링 클라우드 계약에서 자동으로 생성된 테스트를 실제 소켓에서 작동하도록 설정하려면 어떻게 해야 하나요?","스프링 클라우드 계약에서 자동으로 생성된 테스트를 실제 소켓에서 작동하도록 설정하려면 베이스 클래스와 RestAssured를 다음과 같이 설정해야 합니다. import io.restassured.RestAssured; import org.junit.Before; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.boot.test.web.server.LocalServerPort; @SpringBootTest(classes = ContextPathTestingBaseClass.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) class ContextPathTestingBaseClass { @LocalServerPort int port; @Before public void setup() { RestAssured.baseURI = 'http://localhost'; RestAssured.port = this.port; } } 이렇게 하면 자동으로 생성된 테스트의 모든 요청이 컨텍스트 패스가 포함된 실제 엔드포인트로 전송됩니다. 예를 들어, /my-context-path/https://docs.spring.io/spring-cloud-contract/reference/project-features-flows/context-paths.html 입니다."
"Spring REST Docs는 어떤 목적으로 사용되나요?","Spring REST Docs는 Spring MockMvc, WebTestClient 또는 RestAssured를 사용하여 HTTP API에 대한 문서(예: Asciidoc 형식)를 생성하는 데 사용됩니다. (출처: <https://docs.spring.io/spring-cloud-contract/reference/project-features-flows/rest-docs.html>)"
"Spring Cloud Contract WireMock을 사용하여 WireMock 스텁을 생성하려면 어떻게 해야 하나요?","Spring Cloud Contract WireMock을 사용하여 WireMock 스텁을 생성하려면 일반적인 REST Docs 테스트 케이스를 작성하고 @AutoConfigureRestDocs를 사용하여 REST Docs 출력 디렉토리에 스텁이 자동으로 생성되도록 하면 됩니다. (출처: <https://docs.spring.io/spring-cloud-contract/reference/project-features-flows/rest-docs.html>)"
"Spring REST Docs를 사용하여 계약 및 문서를 생성하려면 어떻게 해야 하나요?","Spring REST Docs를 사용하여 Spring Cloud Contract DSL 파일 및 문서를 생성하려면 Spring Cloud WireMock과 함께 사용하면 계약 및 스텁을 모두 얻을 수 있습니다. 테스트에서 SpringCloudContractRestDocs.dslContract() 메서드를 사용하여 계약 및 문서 파일을 생성할 수 있습니다. (출처: <https://docs.spring.io/spring-cloud-contract/reference/project-features-flows/rest-docs.html>)"
"Spring Cloud Contract에서 GRPC를 사용하면 어떤 문제가 발생할까요?","Spring Cloud Contract에서 GRPC를 사용하면 HTTP/2 Header 프레임을 수정하는 GRPC의 특성으로 인해 grpc-status 헤더를 어서트할 수 없습니다. 이 문제는 HTTP/2를 지원하는 커스텀 테스트 모드를 설정하여 해결할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/html/project-features-flows.html#_grpc)"
"Spring Cloud Contract에서 GRPC를 지원하는 프로듀서 측 설정은 어떻게 할까요?","Spring Cloud Contract에서 GRPC를 지원하는 프로듀서 측 설정은 Maven 또는 Gradle 플러그인을 사용하여 CUSTOM 테스트 모드를 설정하고, 해당 기본 클래스가 임의의 포트에서 실행되는 애플리케이션을 설정하고, HTTP/2 프로토콜을 사용할 수 있는 HttpVerifier 구현을 구성해야 합니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/html/project-features-flows.html#_grpc)"
"Spring Cloud Contract에서 GRPC를 지원하는 소비자 측 설정은 어떻게 할까요?","Spring Cloud Contract에서 GRPC를 지원하는 소비자 측 설정은 GRPC 서버 측의 비정상적인 동작으로 인해 grpc-status 헤더를 적절한 순간에 반환할 수 없으므로, 반환된 상태를 항상 OK로 설정하는 ClientInterceptor를 사용해야 합니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/html/project-features-flows.html#_grpc)"
"Spring Cloud Contract를 사용하여 메시징을 통신 수단으로 사용하는 애플리케이션을 어떻게 확인할 수 있나요?","Spring Cloud Contract를 사용하여 메시징을 통신 수단으로 사용하는 애플리케이션을 확인하려면 Spring Cloud Contract를 사용하여 계약 테스트를 생성하고 실행해야 합니다. 이 테스트는 메시징을 사용하여 애플리케이션의 통신을 확인하고 예상 메시지 형식과 내용을 확인합니다."
"Spring Cloud Contract의 메시징 DSL에서 상위 수준 요소는 어떤 것이 있나요?","Spring Cloud Contract의 메시징 DSL에서 상위 수준 요소는 출력 트리거된 메서드, 소비자/생산자 및 공통입니다. 출력 트리거된 메서드 섹션에서는 메서드 호출에 따라 출력 메시지를 생성할 수 있으며, 소비자/생산자 섹션에서는 Groovy DSL에 특정한 매개변수를 사용하여 소비자 및 생산자 부분을 정의할 수 있습니다. 공통 섹션에서는 assertThat 메서드를 사용하여 입력 또는 outputMessage 섹션에 정의된 계약에 대한 어설션을 수행할 수 있습니다."
"Spring Cloud Contract에서 메시징 통합을 사용하여 메시지를 수동으로 통합 테스트하는 방법은 무엇인가요?","Spring Cloud Contract에서 메시징 통합을 사용하여 메시지를 수동으로 통합 테스트하려면 메시징 테스트에서 사용되는 주요 인터페이스인 org.springframework.cloud.contract.verifier.messaging.MessageVerifierSender 및 org.springframework.cloud.contract.verifier.messaging.MessageVerifierReceiver를 사용해야 합니다. 이 인터페이스를 사용하여 메시지를 보내고 받는 방법을 정의할 수 있습니다. 테스트에서는 계약을 따르는 메시지를 보내고 받기 위해 ContractVerifierMessageExchange를 주입할 수 있습니다. 또한 테스트에 @AutoConfigureMessageVerifier를 추가해야 합니다."
"Spring Cloud Contract Verifier를 사용하면서 서버 측에서 생성된 WireMock JSON 스텁을 클라이언트 측으로 전달하는 방법은 무엇인가요?","Spring Cloud Contract Stub Runner를 사용하여 JSON 파일을 복사하고 수동으로 설정하는 대신, 스텁을 자동으로 다운로드하고 실행할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/project-features-stubrunner.html)"
"Spring Cloud Contract Stub Runner를 사용하는 이유는 무엇인가요?","Spring Cloud Contract Stub Runner는 서버 측에서 생성된 WireMock JSON 스텁을 클라이언트 측으로 복사하고 수동으로 설정하는 번거로움을 없애기 위해 사용됩니다. 또한, 메시징을 위한 클라이언트 측 생성도 처리합니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/project-features-stubrunner.html)"
"Spring Cloud Contract Stub Runner는 메시징에 어떻게 도움이 되나요?","Spring Cloud Contract Stub Runner는 메시징을 위한 클라이언트 측 생성을 자동으로 처리하여, JSON 파일을 복사하고 수동으로 설정하는 번거로움을 줄여줍니다. 이를 통해 클라이언트 측에서 메시징을 위한 스텁을 쉽게 설정할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/project-features-stubrunner.html)"
"스프링 스냅샷 버전을 사용하는 방법은 무엇인가요?","스프링 스냅샷 버전을 사용하려면 빌드 파일에 추가 스냅샷 저장소를 추가해야 합니다. Maven의 경우 <repositories> 섹션에 다음을 추가하십시오: <repository> <id>spring-snapshots</id> <name>Spring Snapshots</name> <url>https://repo.spring.io/snapshot</url> <snapshots> <enabled>true</enabled> </snapshots> </repository>. 이 저장소는 성공적인 빌드 후 자동 업로드되는 스냅샷 버전을 제공합니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/project-features-stubrunner/stub-runner-snapshot-versions.html)"
"스프링 마일스톤 버전을 사용하려면 빌드 파일에 어떤 변경을 해야 하나요?","스프링 마일스톤 버전을 사용하려면 빌드 파일에 추가 마일스톤 저장소를 추가해야 합니다. Maven의 경우 <repositories> 섹션에 다음을 추가하십시오: <repository> <id>spring-milestones</id> <name>Spring Milestones</name> <url>https://repo.spring.io/milestone</url> <snapshots> <enabled>false</enabled> </snapshots> </repository>. (출처: https://docs.spring.io/spring-cloud-contract/reference/project-features-stubrunner/stub-runner-snapshot-versions.html)"
"Gradle의 경우 스냅샷 및 마일스톤 버전을 사용하려면 어떤 구성을 해야 하나요?","Gradle의 경우 settings.xml 파일의 <pluginManagement> 섹션에 다음을 추가하십시오: <repositories> <mavenLocal> <maven> <url>https://repo.spring.io/snapshot</url> </maven> <maven> <url>https://repo.spring.io/milestone</url> </maven> <gradlePluginPortal> </repositories>. 이 구성은 성공적인 빌드 후 자동 업로드되는 스냅샷 버전을 제공합니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/project-features-stubrunner/stub-runner-snapshot-versions.html)"
"스텁을 JAR로 게시하는 가장 쉬운 접근 방식은 무엇인가요?","스텁을 JAR로 게시하는 가장 쉬운 접근 방식은 스텁을 중앙 집중식으로 보관하는 것입니다. 예를 들어, Maven 저장소에 JAR로 보관할 수 있습니다. Maven 및 Gradle 모두 설정이 준비되어 작동합니다. 그러나 원하는 경우 사용자 지정할 수 있습니다. Maven 및 Gradle 샘플을 확인하려면 다음 URL을 참조하세요. (출처: <https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#publishing-stubs-as-jars>)"
"Maven 저장소에 스텁을 JAR로 보관하는 방법은 무엇인가요?","Maven 저장소에 스텁을 JAR로 보관하려면 Maven 중앙 저장소에 스텁 JAR를 업로드하면 됩니다. 이를 위해 Maven Release Plugin 또는 유사한 도구를 사용할 수 있습니다. 자세한 내용은 Maven 중앙 저장소 문서(<https://maven.apache.org/repository>)를 참조하세요. (출처: <https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#publishing-stubs-as-jars>)"
"Maven 및 Gradle 샘플에서 스텁을 JAR로 게시하기 위해 사용자 지정할 수 있는 설정은 무엇인가요?","Maven 및 Gradle 샘플에서 스텁을 JAR로 게시하기 위해 사용자 지정할 수 있는 설정은 Maven 또는 Gradle 설정 파일에서 스텁 JAR를 게시하는 방법을 구성하는 것입니다. 예를 들어, 스텁 JAR를 업로드할 저장소, 스텁 JAR의 버전 및 기타 설정을 구성할 수 있습니다. 자세한 내용은 Maven 또는 Gradle 설정 파일 및 해당 문서를 참조하세요. (출처: <https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#publishing-stubs-as-jars>)"
"스텁 러너 코어란 무엇인가요?","스텁 러너 코어는 서비스 협업자를 위한 스텁을 실행하는 역할을 합니다. 스텁을 서비스의 계약으로 취급하면 스텁 러너를 소비자 주도 계약(Consumer-driven Contracts)의 구현으로 사용할 수 있습니다. 스텁 러너는 제공된 의존성의 스텁을 자동으로 다운로드하고, WireMock 서버를 시작하여 적절한 스텁 정의를 제공합니다."
"스텁을 다운로드하는 방법은 무엇인가요?","스텁을 다운로드하는 방법은 Artifactory 또는 Nexus에서 스텁이 포함된 JAR를 다운로드하는 Aether 기반 솔루션, 패턴을 사용하여 클래스패스에서 스텁을 검색하는 클래스패스 스캐닝 솔루션, 또는 org.springframework.cloud.contract.stubrunner.StubDownloaderBuilder의 사용자 정의 구현을 작성하는 방법이 있습니다. 사용자 정의 구현에 대한 자세한 내용은 Custom Stub Runner 섹션에서 확인할 수 있습니다."
"클래스패스 스캐닝은 어떻게 이루어지나요?","스텁 러너의 stubsMode 속성을 StubRunnerProperties.StubsMode.CLASSPATH로 설정하면(또는 기본값으로 설정하면) 클래스패스가 스캔됩니다. Maven 또는 Gradle 의존성을 프로젝트에 추가하고, 해당 의존성이 클래스패스에서 검색될 수 있는 위치에 있는지 확인해야 합니다. 스텁 러너는 JAR 파일의 특정 위치를 스캔하여 계약을 추출합니다. 프로듀서 측에서는 계약을 적절한 구조로 패키징해야 합니다. 이렇게 패키징된 스텁은 메시징 또는 HTTP 스텁을 다운로드하지 않고도 사용할 수 있습니다."
"Spring에서 Stub Runner JUnit Rule은 어떤 기능을 제공하나요?","Stub Runner JUnit Rule은 주어진 그룹 및 아티팩트 ID에 대한 스텁을 다운로드하고 실행할 수 있는 기능을 제공합니다. 이는 Maven 저장소에 연결하여 주어진 의존성 목록에 대해 스텁을 다운로드하고, 캐시하고, 압축을 풀고, 임의의 포트에서 WireMock 서버를 시작하고, 메시지를 보내는 등의 작업을 수행합니다. Stub Runner는 Maven 의존성을 다운로드하기 위해 Eclipse Aether 메커니즘을 사용합니다."
"Spring에서 Stub Runner JUnit5 Extension의 목적은 무엇인가요?","Stub Runner Extension은 JUnit 5를 위해 사용 가능한 확장 기능으로, Stub Runner JUnit Rule과 유사한 기능을 제공합니다. 이 확장 기능은 Maven 저장소에 연결하여 주어진 의존성 목록에 대해 스텁을 다운로드하고, 캐시하고, 압축을 풀고, 임의의 포트에서 WireMock 서버를 시작하고, 메시지를 보내는 등의 작업을 수행합니다."
"Spring에서 Stub Runner를 사용할 때 StubFinder 인터페이스는 어떤 역할을 하나요?","StubFinder 인터페이스는 실행 중인 스텁을 찾는 역할을 합니다. StubFinder를 사용하면 실행 중인 스텁의 URL을 검색하거나 모든 실행 중인 스텁을 찾을 수 있습니다. StubRunnerRule 및 StubRunnerExtension은 StubFinder를 구현하므로 시작된 스텁을 찾을 수 있습니다."
"Spring Cloud Contract Stub Runner Boot는 무엇인가요?","Spring Cloud Contract Stub Runner Boot는 REST 엔드포인트를 노출하여 메시징 레이블을 트리거하고 WireMock 서버에 액세스하는 Spring Boot 애플리케이션입니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/html/project-features-stubrunner/stub-runner-boot.html)"
"Stub Runner Boot 애플리케이션은 어떻게 보안되나요?","Stub Runner Boot 애플리케이션은 기본적으로 보안되지 않습니다. 보안이 필요한 경우 모든 스텁에 보안을 추가해야 하지만, 이는 테스트 유틸리티이므로 신뢰할 수 있는 클라이언트만 Stub Runner Boot 서버에 액세스할 수 있어야 합니다. 신뢰할 수 없는 위치에서 Fat Jar 또는 Docker 이미지로 실행해서는 안 됩니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/html/project-features-stubrunner/stub-runner-boot.html)"
"Stub Runner Server를 어떻게 사용하나요?","Stub Runner Server를 사용하려면 'org.springframework.cloud:spring-cloud-starter-stub-runner' 종속성을 추가하고, @EnableStubRunnerServer로 클래스를 주석 처리하고, Fat Jar를 빌드하면 사용할 준비가 됩니다. 속성은 Stub Runner Spring 섹션을 참조하세요. (출처: https://docs.spring.io/spring-cloud-contract/reference/html/project-features-stubrunner/stub-runner-boot.html)"
"스프링 클라우드 계약에서 'stubsPerConsumer' 기능이란 무엇인가요?","스프링 클라우드 계약에서 'stubsPerConsumer' 기능은 API의 소비자가 해당 소비자의 계약에 따라 다른 스텁을 사용할 수 있도록 하는 기능입니다. 이를 통해 API의 생산자가 여러 소비자를 가지고 있을 때, 각 소비자의 계약에 따라 다른 스텁을 사용할 수 있습니다. 이 기능을 활성화하면, 생산자 측에서 소비자와 관련된 계약만 포함하도록 폴더를 구성하고, 소비자 애플리케이션의 이름과 일치하는 스텁만 등록합니다. 이 기능을 사용하면, API의 생산자가 동일한 요청에 대해 두 가지 다른 응답을 생성할 수 있으므로, 계약의 적절한 패키징 및 스텁을 사용할 수 있습니다."
"스프링 클라우드 계약에서 'stubsPerConsumer' 기능을 활성화하려면 어떻게 해야 하나요?","스프링 클라우드 계약에서 'stubsPerConsumer' 기능을 활성화하려면, 소비자 애플리케이션의 spring.application.name 또는 stubrunner.consumer-name 속성을 관련 소비자의 이름으로 설정하거나, @SpringBootTest 또는 @AutoConfigureStubRunner 어노테이션에서 consumerName 속성을 사용하여 직접 설정할 수 있습니다. 이렇게 설정하면, 해당 소비자의 이름과 일치하는 경로에서 등록된 스텁만 참조할 수 있습니다. 이 기능은 spring.cloud.contract.stubrunner.stubs-per-consumer 속성을 true로 설정하여 활성화할 수 있습니다."
"스프링 클라우드 계약에서 'stubsPerConsumer' 기능을 사용하는 것의 장점은 무엇인가요?","스프링 클라우드 계약에서 'stubsPerConsumer' 기능을 사용하면 몇 가지 장점이 있습니다. 이 기능을 사용하면 각 소비자가 해당 소비자의 계약에 따라 다른 스텁을 사용할 수 있으므로, 여러 소비자를 가진 API를 다룰 때 유용합니다. 또한, API가 생성하는 응답의 일부를 제거하고 자동으로 생성된 테스트 중 어떤 것이 실패하는지 확인할 수 있습니다. 실패하는 테스트가 없다면, 해당 부분을 안전하게 삭제할 수 있습니다. 이 기능은 또한 API의 어떤 부분이 사용되고 있는지 명확하게 파악할 수 있도록 도와줍니다. 이 기능을 사용하면 계약의 적절한 패키징을 수행하고, 스텁을 사용하여 이점을 얻을 수 있습니다."
"Spring Cloud Contract의 Stub Runner에서 기본 동작은 무엇인가요?","Spring Cloud Contract의 Stub Runner에서 기본 동작은 stubs를 찾을 수 없는 경우 테스트를 실패시키는 것입니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/html/project-features-stubrunner.html#stubrunner-fail-on-no-stubs)"
"Stub Runner의 fail-on-no-stubs 동작을 비활성화하는 방법은 무엇인가요?","Annotation에서 failOnNoStubs 속성을 false로 설정하거나 JUnit Rule 또는 Extension에서 withFailOnNoStubs(false) 메서드를 호출하여 fail-on-no-stubs 동작을 비활성화할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/html/project-features-stubrunner.html#stubrunner-fail-on-no-stubs)"
"JUnit 4에서 Stub Runner의 fail-on-no-stubs 동작을 비활성화하는 방법은 무엇인가요?","JUnit 4 Rule에서 StubRunnerRule 클래스를 사용하고 withFailOnNoStubs(false) 메서드를 호출하여 fail-on-no-stubs 동작을 비활성화할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/html/project-features-stubrunner.html#stubrunner-fail-on-no-stubs)"
"스텁 런너의 공통 속성 중 어떤 것들이 있고, 어떤 역할을 하나요?","스텁 런너의 공통 속성으로는 `stubrunner.minPort`, `stubrunner.maxPort`, `stubrunner.repositoryRoot`, `stubrunner.classifier`, `stubrunner.stubsMode`, `stubrunner.ids`, `stubrunner.username`, `stubrunner.password`, `stubrunner.stubsPerConsumer`, `stubrunner.consumerName`이 있습니다. 이들은 스텁 런너를 설정하고, 스텁을 다운로드하고 등록하는 방식에 영향을 줍니다. 자세한 내용은 https://docs.spring.io/spring-cloud-contract/reference/project-features-stubrunner/stub-runner-common.html을 참조하세요."
"스텁 런너의 `stubrunner.ids` 속성은 어떤 역할을 하며, 어떤 형식으로 사용해야 하나요?","`stubrunner.ids` 속성은 다운로드할 스텁을 설정하는 데 사용됩니다. 이 속성은 `groupId:artifactId:version:classifier:port` 형식을 따르며, `version`, `classifier`, `port`는 선택 사항입니다. `port`를 제공하지 않으면 임의의 포트가 선택됩니다. `classifier`를 제공하지 않으면 기본값이 사용됩니다. `version`을 제공하지 않으면 `+`가 전달되어 최신 버전이 다운로드됩니다. `port`는 WireMock 서버의 포트를 나타냅니다. 자세한 내용은 https://docs.spring.io/spring-cloud-contract/reference/project-features-stubrunner/stub-runner-common.html을 참조하세요."
"스텁 런너의 `stubrunner.stubsPerConsumer` 속성은 어떤 역할을 하며, 어떻게 사용하나요?","`stubrunner.stubsPerConsumer` 속성은 각 소비자에 대해 다른 스텁을 사용하려는 경우 `true`로 설정하면 됩니다. 이 속성을 사용하면 모든 소비자에 대해 모든 스텁을 등록하는 대신 각 소비자에 대해 다른 스텁을 사용할 수 있습니다. 자세한 내용은 https://docs.spring.io/spring-cloud-contract/reference/project-features-stubrunner/stub-runner-common.html을 참조하세요."
"WireMock은 어떻게 Spring Boot 애플리케이션에서 사용될 수 있나요?","Spring Cloud Contract WireMock 모듈을 사용하여 WireMock을 Spring Boot 애플리케이션에서 사용할 수 있습니다. 이를 위해 spring-cloud-starter-contract-stub-runner를 클래스패스에 추가하고 테스트에서 @AutoConfigureWireMock을 사용하면 됩니다. Wiremock은 스텁 서버로 실행되며, Java API 또는 정적 JSON 선언을 사용하여 스텁 동작을 등록할 수 있습니다."
"WireMock 스텁은 어떻게 자동으로 등록되나요?","WireMock은 기본적으로 파일 시스템이나 클래스패스(file:src/test/resources/mappings)에서 JSON 스텁을 등록합니다. 이는 스텁 속성을 사용하여 사용자 정의할 수 있으며, 이는 Ant 스타일 리소스 패턴 또는 디렉토리일 수 있습니다. 디렉토리의 경우 */.json이 추가됩니다. 또한, 스텁을 로드하는 위치를 사용자 정의할 수 있습니다."
"WireMock의 SSL 유효성 검사를 어떻게 무시할 수 있나요?","WireMock은 스텁 서버를 안전하게 만들기 위해 HTTPS URL 프로토콜을 사용할 수 있습니다. 그러나 SSL 인증서가 유효하지 않은 경우, 클라이언트를 HTTP를 사용하도록 다시 구성하거나 Spring에게 SSL 유효성 검사 오류를 무시하도록 HTTP 클라이언트를 구성하도록 요청할 수 있습니다. 이는 물론 테스트 전용으로 수행되어야 합니다."
"Spring Cloud Contract의 Docker 이미지는 무엇이며, 어떤 기능을 실행하나요?","Spring Cloud Contract의 Docker 이미지는 테스트를 생성하고 실행하는 프로젝트를 포함한 springcloud/spring-cloud-contract 이미지를 게시합니다. 이 이미지는 EXPLICIT 모드에서 테스트를 실행하며, 이는 테스트가 모의된 요청이 아닌 실제 요청을 보낸다는 것을 의미합니다. 또한, 이 프로젝트는 Stub Runner의 독립 실행형 버전을 시작하는 spring-cloud/spring-cloud-contract-stub-runner Docker 이미지도 게시합니다."
"Artifact Manager란 무엇인가요?","Artifact Manager는 바이너리, 소스 또는 패키지를 저장하여 다른 사람들이 다운로드, 참조 또는 재사용할 수 있도록 하는 곳입니다. 예를 들어, JVM 세계의 경우 이러한 아티팩트는 일반적으로 JAR입니다."
"Spring Cloud Contract에서 JAR란 무엇인가요?","Spring Cloud Contract는 JAR 파일에 계약 및 생성된 스텁을 패키징합니다. JAR는 Java ARchive의 약자로, 형식은 ZIP 파일 형식을 기반으로 합니다."
"Gradle Project에서 Spring Cloud Contract Verifier와 WireMock을 사용하려면 어떤 플러그인을 사용해야 하나요?","Gradle 또는 Maven 플러그인을 사용해야 합니다."
"Gradle 플러그인에 종속성을 추가하려면 어떤 코드를 사용해야 하나요?","Plugin DSL GA versions Plugin DSL non GA versions Legacy Plugin Application // build.gradle plugins { id 'groovy' // this will work only for GA versions of Spring Cloud Contract id 'org.springframework.cloud.contract' version '${GAVerifierVersion}' } dependencyManagement { imports { mavenBom 'org.springframework.cloud:spring-cloud-contract-dependencies:${GAVerifierVersion}' } } dependencies { testImplementation 'org.apache.groovy:groovy-all:${groovyVersion}' // example with adding Spock core and Spock Spring testImplementation 'org.spockframework:spock-core:${spockVersion}' testImplementation 'org.spockframework:spock-spring:${spockVersion}' testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier' } // settings.gradle pluginManagement { plugins { id 'org.springframework.cloud.contract' version '${verifierVersion}' } repositories { // to pick from local .m2 mavenLocal() // for snapshots maven { https://docs.spring.io/spring-cloud-contract/reference/gradle-project.html 'https://repo.spring.io/snapshot' } // for milestones maven { https://docs.spring.io/spring-cloud-contract/reference/gradle-project.html 'https://repo.spring.io/milestone' } // for GA versions gradlePluginPortal() } } // build.gradle plugins { id 'groovy' id 'org.springframework.cloud.contract' } dependencyManagement { imports { mavenBom 'org.springframework.cloud:spring-cloud-contract-dependencies:${verifier_version}' } } dependencies { testImplementation 'org.apache.groovy:groovy-all:${groovyVersion}' // example with adding Spock core and Spock Spring testImplementation 'org.spockframework:spock-core:${spockVersion}' testImplementation 'org.spockframework:spock-spring:${spockVersion}' testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier' }"
"Spring Cloud Contract를 사용하는 이유는 무엇인가요?","Spring Cloud Contract는 다양한 언어와 프레임워크를 사용하는 환경에서 소비자 주도 계약(CDC)을 생성하고 검증하는 데 도움이 됩니다. 메시징을 통한 CDC, 명확하고 사용하기 쉬운 정적 유형 DSL, JSON 파일의 요소만 편집하여 계약을 생성하는 기능, 테스트 자동 생성, Stub Runner 기능, Spring Cloud와의 통합, Docker를 통한 언어와 프레임워크 지원 추가 등의 흥미로운 기능을 제공합니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/)"
"Spring Cloud Contract Verifier의 어떤 기능이 시장에서 돋보이는가요?","Spring Cloud Contract Verifier는 메시징을 통한 CDC, 명확하고 사용하기 쉬운 정적 유형 DSL, JSON 파일의 요소만 편집하여 계약을 생성하는 기능, 테스트 자동 생성, Stub Runner 기능 등의 기능으로 시장에서 돋보입니다. 이러한 기능들은 소비자 주도 계약(CDC) 도구 시장에서 Spring Cloud Contract Verifier를 독특하게 만들어줍니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/)"
"Spring Cloud Contract의 Stub Runner 기능은 어떤 역할을 하나요?","Spring Cloud Contract의 Stub Runner 기능은 Nexus 또는 Artifactory에서 런타임에 자동으로 스텁을 다운로드합니다. 이를 통해 통합 테스트에 필요한 발견 서비스 없이 스텁을 사용할 수 있습니다. 이 기능은 폴리글랏 환경에서 소비자 주도 계약(CDC)을 생성하고 검증하는 데 도움이 됩니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/)"
"Spring Cloud Contract에서 Groovy가 아닌 다른 언어로 계약을 작성하려면 어떤 방법이 있나요?","YAML로 계약을 작성할 수 있습니다. 자세한 내용은 이 섹션(../project-features-contract.html)을 참조하세요. 더 많은 계약 설명 방법을 허용하기 위해 노력하고 있으며, 자세한 내용은 github-issues(https://github.com/spring-cloud/spring-cloud-contract/issues/)를 확인할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#how-to-not-write-contracts-in-groovy)"
"Spring Cloud Contract에서 YAML로 작성된 계약의 예시를 볼 수 있는 곳은 어디인가요?","YAML로 작성된 계약의 예시는 제공된 정보에서 명시되어 있지 않습니다. 그러나 이 섹션(../project-features-contract.html)에서 자세한 내용을 확인할 수 있으며, 더 많은 계약 설명 방법을 허용하기 위해 노력하고 있으며, 자세한 내용은 github-issues(https://github.com/spring-cloud/spring-cloud-contract/issues/)를 확인할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#how-to-not-write-contracts-in-groovy)"
"Spring Cloud Contract에서 계약 설명 방법을 확장하기 위한 계획은 어떻게 되나요?","더 많은 계약 설명 방법을 허용하기 위해 노력하고 있으며, 자세한 내용은 github-issues(https://github.com/spring-cloud/spring-cloud-contract/issues/)를 확인할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#how-to-not-write-contracts-in-groovy)"
"스텁의 재사용성과 관련된 가장 큰 도전은 무엇인가요?","스텁의 재사용성과 관련된 가장 큰 도전은 요청 및 응답 요소의 하드코딩된 값(예: 날짜 및 ID)으로 인해 일반적으로 어렵다는 것입니다. 이는 시스템의 시계를 변경하거나 데이터 제공 업체의 스텁 구현을 제공하는 등 프로듀서 측에서 적절한 값을 설정하는 데 필요한 고통을 상상해보십시오."
"소비자가 어떤 형태의 시간 또는 UUID와 일치하는 요청을 보내고자 하는 이유는 무엇인가요?","소비자가 어떤 형태의 시간 또는 UUID와 일치하는 요청을 보내고자 하는 이유는 자신의 시스템이 평소처럼 데이터를 생성하도록 하면서 스텁을 출현시키지 않아도 되기 때문입니다. 이를 통해 다른 필드에 대한 일치를 제공하고 가장 중요한 부분인 본문 필드에 집중할 수 있습니다."
"프로듀서의 측면에서 실제 요청을 엔드포인트로 보내려면 어떻게 해야 하나요?","프로듀서의 측면에서 실제 요청을 엔드포인트로 보내려면 제공된 계약을 구문 분석하고 테스트에서 프로듀서의 백엔드에서 작동할 수 있는 실제 값을 가진 요청을 보내야 합니다. 따라서 요청의 경우 프로듀서의 측면에서 일치하는 것은 가질 수 없으며 프로듀서의 백엔드에서 작동할 수 있는 실제 값이 필요합니다."
"스텁 버전 관리를 위한 API 버전 관리 방식은 무엇인가요?","스텁 버전 관리를 위한 API 버전 관리 방식은 하이퍼미디어 링크를 사용하여 API 버전을 지정하지 않거나, 헤더와 URL을 통해 버전을 전달하거나, 두 가지 접근 방식을 조합하는 것입니다. 어떤 방식이 더 나은지는 상황에 따라 다르며, 비즈니스 가치를 창출하는 데 도움이 되는 방식을 선택해야 합니다. API 버전 관리를 하는 경우, 지원하는 모든 버전에 대한 계약을 제공해야 합니다. 버전 폴더를 생성하거나 계약 이름에 버전을 추가할 수 있습니다. (출처: <https://docs.spring.io/spring-cloud-contract/reference/html/howto.html#how-to-do-stubs-versioning>)"
"스텁을 포함하는 JAR의 버전 관리를 JAR 버전 관리를 통해 수행하는 방법은 무엇인가요?","스텁을 포함하는 JAR의 버전 관리를 JAR 버전 관리를 통해 수행하는 방법은 두 가지 주요 접근 방식이 있습니다. 지속적인 빌드 및 배포를 하는 경우, 파이프라인을 통과할 때마다 새로운 JAR 버전이 생성되고 언제든지 프로덕션에 배포될 수 있습니다. JAR 버전에는 빌드된 날짜와 시간이 포함됩니다. 이 경우, 생성된 스텁 JAR은 다음과 같이 표시되어야 합니다: 1.0.0.20161020-201521-RELEASE-stubs.jar 애플리케이션.yml 파일이나 @AutoConfigureStubRunner를 사용하여 스텁을 참조할 때, 최신 버전의 스텁을 + 기호를 사용하여 참조해야 합니다. 버전 관리가 고정된 경우, jar 버전의 구체적인 값을 설정해야 합니다. (출처: <https://docs.spring.io/spring-cloud-contract/reference/html/howto.html#how-to-do-stubs-versioning>)"
"개발 또는 프로덕션 스텁을 사용하여 테스트를 실행하는 방법은 무엇인가요?","클래스파이어를 조작하여 다른 서비스의 현재 개발 버전 또는 프로덕션에 배포된 스텁을 사용하여 테스트를 실행할 수 있습니다. 스텁을 프로덕션 배포에 도달하면 prod-stubs 클래스파이어로 배포하도록 빌드를 수정합니다. + 기호를 사용하여 애플리케이션.yml 파일이나 @AutoConfigureStubRunner를 사용하여 최신 버전의 스텁을 참조하거나, 배포 파이프라인에서 속성을 사용하여 이러한 값을 전달할 수 있습니다. (출처: <https://docs.spring.io/spring-cloud-contract/reference/html/howto.html#how-to-do-stubs-versioning>)"
"Spring Cloud Contract에서 Git을 사용하여 계약 및 스텁을 저장하는 방법은 무엇인가요?","Spring Cloud Contract 버전 2.0.0 이상부터 SCM(Source Control Management) 저장소에서 계약 및 스텁을 저장할 수 있는 메커니즘을 제공합니다. 현재 지원되는 유일한 SCM은 Git입니다. 저장소는 다음 설정을 가져야 합니다: {https://github.com/spring-cloud-samples/spring-cloud-contract-samples/tree/main/contracts_git/}. META-INF 폴더 아래에서 애플리케이션은 groupId(예: com.example)로 그룹화됩니다. 각 애플리케이션은 artifactId(예: beer-api-producer-git)로 표시됩니다. 그런 다음 각 애플리케이션은 버전(예: 0.0.1-SNAPSHOT)으로 구성됩니다. Spring Cloud Contract 버전 2.1.0 이상부터 다음과 같이 버전을 지정할 수 있습니다: 최신 버전의 스텁을 찾으려면 + 또는 latest를 사용하십시오. 릴리스 버전의 스텁을 찾으려면 release를 사용하십시오. 마지막으로, contracts 및 mappings 두 개의 폴더가 있습니다. 좋은 방법은 각 소비자가 필요로하는 계약을 consumer name(예: beer-api-consumer) 폴더에 저장하는 것입니다. 이렇게하면 stub-per-consumer 기능을 사용할 수 있습니다. 추가 디렉토리 구조는 임의적입니다. Maven 또는 Gradle Spring Cloud Contract 플러그인은이 폴더에 스텁 서버 매핑을 푸시합니다. 소비자 측에서 Stub Runner는이 폴더를 스캔하여 스텁 정의가있는 스텁 서버를 시작합니다. 폴더 구조는 contracts 하위 폴더에서 생성 된 것과 동일합니다. URL의 프로토콜을 사용하여 계약의 소스 유형 및 위치(이진 저장소 또는 SCM 저장소)를 제어할 수 있습니다. Spring Cloud Contract는 등록된 프로토콜 해결자를 반복하고 계약을 가져오려고 시도합니다(플러그인을 사용하여) 또는 스텁(Stub Runner에서). SCM 기능의 경우 현재 Git 저장소를 지원합니다. 사용하려면 저장소 URL의 프로토콜에서 git://으로 접두사를 지정해야합니다. 다음 목록은 몇 가지 예제를 보여줍니다: git://file:///foo/bar, git://https://github.com/spring-cloud-samples/spring-cloud-contract-nodejs-contracts-git.git, git:// [email protected](/cdn-cgi/l/email-protection) :spring-cloud-samples/spring-cloud-contract-nodejs-contracts-git.git"
"Spring Cloud Contract에서 SCM 저장소에서 계약을 가져오는 방법은 무엇인가요?","Spring Cloud Contract에서 SCM 저장소에서 계약을 가져오려면 @AutoConfigureStubRunner 어노테이션, JUnit 4 규칙, JUnit 5 확장 또는 속성에서 repositoryRoot 매개 변수를 전달할 때 git:// 프로토콜로 접두사가 지정된 SCM 저장소의 URL을 전달할 수 있습니다. git 프로젝트는 임시 디렉토리에 복제됩니다. SCM 스텁 다운로더는 META-INF/groupId/artifactId/version/ 폴더로 이동하여 스텁 정의를 찾고 계약을 찾습니다. 예를 들어 com.example:foo:1.0.0의 경우 경로는 META-INF/com.example/foo/1.0.0/입니다. 스텁 서버가 시작되고 매핑이 공급됩니다. 메시징 정의가 읽히고 메시징 테스트에 사용됩니다."
"Spring Cloud Contract에서 프로듀서에서 계약을 유지하고 스텁을 외부 저장소에 유지하는 방법은 무엇인가요?","프로듀서 저장소에 계약을 유지하고 스텁을 외부 git 저장소에 유지하려면 일반적인 프로듀서 설정을 사용한 다음 pushStubsToScm 목표를 추가하고 contractsRepositoryUrl을 스텁을 유지하려는 저장소로 설정하십시오."
"Spring Boot 애플리케이션에서 RestAssured를 사용하여 생성된 테스트 클라이언트가 보내는 요청/응답을 어떻게 디버그할 수 있나요?","Spring Boot 애플리케이션에서 RestAssured를 사용하여 생성된 테스트 클라이언트가 보내는 요청/응답을 디버그하려면, Apache HttpClient의 wire logging 기능을 사용할 수 있습니다. 이를 활성화하려면 application.properties 파일에 다음을 추가하세요: logging.level.org.apache.http.wire=DEBUG. 이렇게 하면 HttpClient를 통해 전송되는 전체 요청 및 응답이 로깅되어 디버깅에 도움이 됩니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/howto/how-to-debug.html)"
"Spring Boot 애플리케이션에서 RestAssured와 관련된 문제를 어떻게 해결할 수 있나요?","Spring Boot 애플리케이션에서 RestAssured와 관련된 문제를 해결하기 위해 wire logging을 사용할 수 있습니다. 이를 위해 application.properties 파일에 logging.level.org.apache.http.wire=DEBUG를 추가하면 됩니다. 이렇게 하면 요청과 응답이 디스크에 기록되어 문제를 식별하고 디버깅하는 데 도움이 됩니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/howto/how-to-debug.html)"
"Spring Boot 애플리케이션에서 RestAssured를 사용하여 생성된 테스트 클라이언트의 디버깅 레벨을 어떻게 설정할 수 있나요?","Spring Boot 애플리케이션에서 RestAssured를 사용하여 생성된 테스트 클라이언트의 디버깅 레벨을 설정하려면, application.properties 파일에 logging.level.org.apache.http.wire=DEBUG를 추가하세요. 이렇게 하면 HttpClient를 통해 전송되는 전체 요청 및 응답이 로깅되어 디버깅에 도움이 됩니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/howto/how-to-debug.html)"
"WireMock에서 전송되는 매핑, 요청 또는 응답을 디버그하는 방법은 무엇인가요?","WireMock의 로깅을 info로 설정하고 WireMock notifier를 verbose로 설정하면, WireMock 서버에서 수신된 요청과 일치하는 응답 정의가 정확히 어떤 것인지 알 수 있습니다. 이 기능을 끄려면, logging.level.com.github.tomakehurst.wiremock=ERROR와 같이 WireMock 로깅을 ERROR로 설정하세요. (출처: https://docs.spring.io/spring-cloud-contract/reference/howto/how-to-debug-wiremock.html)"
"WireMock 로깅을 info로 설정하려면 어떻게 해야 하나요?","logging.level.com.github.tomakehurst.wiremock=INFO와 같이 설정하면 WireMock 로깅이 info로 설정됩니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/howto/how-to-debug-wiremock.html)"
"WireMock에서 수신된 요청과 일치하는 응답 정의를 어떻게 알 수 있나요?","WireMock의 로깅을 info로 설정하고 WireMock notifier를 verbose로 설정하면, 어떤 요청이 수신되었는지와 어떤 일치하는 응답 정의가 선택되었는지 정확히 알 수 있습니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/howto/how-to-debug-wiremock.html)"
"@AutoConfigureStubRunner, StubRunnerRule, 또는 StubRunnerExtension에서 mappingsOutputFolder 속성을 사용하여 각 artifact ID의 모든 매핑을 덤프하는 방법은 무엇인가요?","https://docs.spring.io/spring-cloud-contract/reference/howto/how-to-see-registered-stubs.html에서 확인할 수 있습니다."
"HTTP 서버 스텁에서 등록된 내용을 확인하는 방법은 무엇인가요?","https://docs.spring.io/spring-cloud-contract/reference/howto/how-to-see-registered-stubs.html에서 확인할 수 있습니다."
"HTTP 서버 스텁에서 등록된 내용을 확인하는 데 사용할 수 있는 속성은 무엇인가요?","https://docs.spring.io/spring-cloud-contract/reference/howto/how-to-see-registered-stubs.html에서 확인할 수 있습니다."
"Spring Cloud Contract에서 버전 1.2.0에서 어떤 기능이 추가되었나요?","파일에서 텍스트를 참조하는 기능이 추가되었습니다. DSL에서 file(…​) 메서드를 호출하고 계약이 위치한 곳에서 상대적인 경로를 제공하면 됩니다. YAML을 사용하는 경우 bodyFromFile 속성을 사용할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/)"
"Spring Cloud Contract에서 YAML을 사용하여 파일에서 텍스트를 참조하는 방법은 무엇인가요?","bodyFromFile 속성을 사용하면 됩니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/)"
"Spring Cloud Contract에서 파일에서 텍스트를 참조할 때 file(…​) 메서드를 사용하는 방법은 무엇인가요?","DSL에서 file(…​) 메서드를 호출하고 계약이 위치한 곳에서 상대적인 경로를 제공하면 됩니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/)"
"Spring Cloud Contract에서 ToFileContractsTransformer 클래스의 주요 기능은 무엇인가요?","ToFileContractsTransformer 클래스는 주어진 ContractConverter에 대한 계약을 파일로 덤프하는 기능을 제공합니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#how-to-generate-from-scc)"
"ToFileContractsTransformer를 실행 가능한 애플리케이션으로 실행하는 방법은 무엇인가요?","ToFileContractsTransformer는 실행 가능한 애플리케이션으로 실행할 수 있는 정적 void main 메소드를 포함하고 있습니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#how-to-generate-from-scc)"
"ToFileContractsTransformer의 기본 출력 폴더는 어디인가요?","ToFileContractsTransformer의 기본 출력 폴더는 target/converted-contracts입니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#how-to-generate-from-scc)"
"Spring Cloud Contract에서 트랜지티브 의존성을 어떻게 처리할 수 있나요?","Spring Cloud Contract 플러그인은 스텁 jar를 생성하는 작업을 추가합니다. 스텁을 재사용할 때, 해당 스텁의 모든 의존성을 실수로 가져올 수 있는 문제가 발생합니다. Maven 아티팩트를 빌드할 때, 여러 개의 다른 jar 파일이 있더라도 모두 하나의 pom.xml 파일을 공유합니다. 이러한 의존성을 처리하는 세 가지 가능한 방법은 모든 애플리케이션 의존성을 선택적으로 표시하거나, 스텁을 위한 별도의 아티팩트 ID를 생성하거나, 소비자 측에서 의존성을 제외하는 것입니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#howto.work-with-transitive-dependencies)"
"Spring Cloud Contract에서 모든 애플리케이션 의존성을 선택적으로 표시하는 방법은 무엇인가요?","프로듀서 애플리케이션에서 모든 의존성을 선택적으로 표시하면, 다른 애플리케이션에서 프로듀서 스텁을 포함할 때 (또는 Stub Runner에서 해당 의존성을 다운로드할 때), 모든 의존성이 선택적이므로 다운로드되지 않습니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#howto.work-with-transitive-dependencies)"
"Spring Cloud Contract에서 스텁을 위한 별도의 아티팩트 ID를 생성하는 방법은 무엇인가요?","별도의 아티팩트 ID를 생성하면 원하는 방식으로 설정할 수 있습니다. 예를 들어, 의존성을 전혀 사용하지 않기로 결정할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#howto.work-with-transitive-dependencies)"
"Spring REST Docs 스니펫을 계약에서 생성하려면 어떻게 해야 하나요?","Spring REST Docs를 사용하여 API의 요청 및 응답을 포함하려면 MockMvc 및 RestAssuredMockMvc를 사용하는 경우 설정에 약간의 변경만 필요합니다. 이 작업을 수행하려면 다음 종속성을 포함하십시오(이미 수행 한 경우 제외)."
"Spring REST Docs를 사용하여 요청 및 응답을 포함하려면 어떤 종속성이 필요한가요?","Spring REST Docs를 사용하여 API의 요청 및 응답을 포함하려면 다음 종속성을 포함해야 합니다. <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-contract-verifier</artifactId> <scope>test</scope> </dependency> <dependency> <groupId>org.springframework.restdocs</groupId> <artifactId>spring-restdocs-mockmvc</artifactId> <optional>true</optional> </dependency> testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier' testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'"
"Spring REST Docs에서 출력 디렉토리를 지정해야 하나요?","Spring REST Docs의 버전 1.2.0.RELEASE부터는 생성된 스니펫의 출력 디렉토리를 지정할 필요가 없습니다."
"스텁 실행기 또는 Spring Cloud Contract 플러그인에서 리포지토리 루트 인수를 제공할 때, 저장소를 복제하거나 JAR를 가져오지 않고 주어진 위치에서 계약 또는 스텁을 가져오려면 어떤 프로토콜을 사용해야 하나요?","stubs:// 프로토콜을 사용해야 합니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#how-to-use-stubs-from-a-location)"
"스텁 실행기를 사용하여 주어진 위치에서 계약 또는 스텁을 가져오는 방법에 대한 자세한 정보는 어디에서 찾을 수 있나요?","문서의 이 섹션(https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#_using_the_stubs_protocol)에서 확인할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#how-to-use-stubs-from-a-location)"
"스텁 실행기에서 리포지토리 루트 인수를 제공할 때, 주어진 위치에서 계약 또는 스텁을 가져오는 프로토콜은 무엇인가요?","stubs:// 프로토콜을 사용해야 합니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#how-to-use-stubs-from-a-location)"
"스프링 클라우드 계약에서 런타임에 스텁을 생성하려면 어떻게 해야 하나요?","@AutoConfigureStubRunner 어노테이션의 generateStubs 속성을 전환하거나 JUnit Rule 또는 Extension에서 withGenerateStubs(true) 메서드를 호출하여 런타임에 스텁을 생성할 수 있습니다. 자세한 내용은 다음 문서를 참조하십시오: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#project-features-stubrunner-generate-stubs-at-runtime"
"스프링 클라우드 계약에서 런타임에 스텁을 생성하는 데 어떤 속성을 사용해야 하나요?","@AutoConfigureStubRunner 어노테이션의 generateStubs 속성을 전환하거나 JUnit Rule 또는 Extension에서 withGenerateStubs(true) 메서드를 호출하여 런타임에 스텁을 생성할 수 있습니다. 자세한 내용은 다음 문서를 참조하십시오: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#project-features-stubrunner-generate-stubs-at-runtime"
"스프링 클라우드 계약에서 런타임에 스텁을 생성하는 데 사용할 수 있는 메서드는 무엇인가요?","JUnit Rule 또는 Extension에서 withGenerateStubs(true) 메서드를 호출하여 런타임에 스텁을 생성할 수 있습니다. 자세한 내용은 다음 문서를 참조하십시오: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#project-features-stubrunner-generate-stubs-at-runtime"
"Stub Runner에서 stub이 없을 때 빌드를 통과시키려면 어떻게 해야 하나요?","Stub Runner에서 stub이 없을 때 빌드를 실패시키지 않으려면, @AutoConfigureStubRunner 어노테이션의 generateStubs 속성을 전환하거나 JUnit Rule 또는 Extension의 withFailOnNoStubs(false) 메서드를 호출하십시오. 자세한 내용은 이 섹션(../project-features-stubrunner/stub-runner-fail-on-no-stubs.html)에서 확인할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/html/howto-use-the-failonnostubs-feature.html)"
"Maven에서 contracts가 없을 때 빌드를 실패시키지 않으려면 어떻게 해야 하나요?","Maven에서 contracts가 없을 때 빌드를 실패시키지 않으려면, failOnNoStubs 플래그를 설정하십시오. (출처: https://docs.spring.io/spring-cloud-contract/reference/html/howto-use-the-failonnostubs-feature.html)"
"Gradle에서 contracts가 없을 때 빌드를 실패시키지 않으려면 어떻게 해야 하나요?","Gradle에서 contracts가 없을 때 빌드를 실패시키지 않으려면, contractRepository { failOnNoStubs(false) } 클로저를 호출하십시오. (출처: https://docs.spring.io/spring-cloud-contract/reference/html/howto-use-the-failonnostubs-feature.html)"
"Spring Cloud Contract에서 in-progress contracts를 어떻게 처리하나요?","in-progress contracts를 처리하기 위해 기본적으로 failOnInProgress 플래그를 true로 설정합니다. 그러나 테스트를 생성할 때 이러한 계약을 허용하려면 플래그를 false로 설정할 수 있습니다. 이 정보는 다음 링크에서 확인할 수 있습니다: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#_fail_on_in_progress_contracts"
"in-progress contracts가 false positives를 유발하는 이유는 무엇인가요?","in-progress contracts는 프로듀서 측에서 테스트가 생성되지 않고 스텁만 생성되기 때문에 false positives를 유발할 수 있습니다. 이 정보는 다음 링크에서 확인할 수 있습니다: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#_in_progress_contracts"
"테스트를 생성할 때 in-progress contracts를 허용하려면 어떻게 해야 하나요?","테스트를 생성할 때 in-progress contracts를 허용하려면 failOnInProgress 플래그를 false로 설정하면 됩니다. 이 정보는 다음 링크에서 확인할 수 있습니다: https://docs.spring.io/spring-cloud-contract/reference/htmlsingle/#_fail_on_in_progress_contracts"
"Spring Cloud Contract를 사용자 정의하는 방법은 무엇인가요?","Spring Cloud Contract의 다양한 부분을 사용자 정의하는 방법에 대해 설명합니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/advanced.html)"
"Spring Cloud Contract를 사용자 정의하는 데 어떤 방법을 사용할 수 있나요?","Spring Cloud Contract의 다양한 부분을 사용자 정의하는 방법에 대해 설명합니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/advanced.html)"
"Spring Cloud Contract에서 사용자 정의할 수 있는 부분은 어떤 것이 있나요?","Spring Cloud Contract의 다양한 부분을 사용자 정의하는 방법에 대해 설명합니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/advanced.html)"
"스프링 클라우드 계약 검증기를 DSL을 확장하여 커스터마이징할 수 있는 경우와 그 조건은 무엇인가요?","그루비 DSL을 사용하는 경우, 스프링 클라우드 계약 검증기를 DSL을 확장하여 커스터마이징할 수 있습니다. DSL을 확장하려면, 정적 호환성을 유지하면서 DSL에 자체 함수를 제공할 수 있습니다. 키 요구 사항은 정적 호환성을 유지하는 것입니다."
"재사용 가능한 클래스를 포함하는 JAR를 만들고 이를 DSL에서 참조하는 방법은 무엇인가요?","재사용 가능한 클래스를 포함하는 JAR를 만들고 이를 DSL에서 참조하려면, 먼저 공통 JAR 종속성을 테스트 종속성으로 추가해야 합니다. 계약 파일이 테스트 리소스 경로에 있으므로, 공통 JAR 클래스는 자동으로 Groovy 파일에서 보이게 됩니다. 예시 코드는 다음 링크에서 확인할 수 있습니다: https://raw.githubusercontent.com/spring-cloud-samples/spring-cloud-contract-samples/main/producer/."
"스프링 클라우드 계약 플러그인의 convertToYaml 속성은 어떤 역할을 하나요?","스프링 클라우드 계약 플러그인의 convertToYaml 속성은 YAML 계약을 사용하도록 설정하는 데 사용됩니다. 이 속성을 true로 설정하면, Groovy 계약 대신 YAML 계약을 사용하는 소비자 측에 확장된 기능을 가진 종속성을 추가하지 않아도 됩니다."
"스프링 클라우드의 ContractConverter 인터페이스는 무엇인가요?","ContractConverter 인터페이스는 다른 형식(YAML, RAML, PACT 등)으로 정의된 계약을 테스트 및 스텁의 자동 생성 이점을 활용할 수 있도록 구현할 수 있습니다. 이 인터페이스를 사용하면 테스트 및 스텁 생성 방식을 사용자 정의할 수도 있습니다. ContractConverter 인터페이스를 구현하려면 변환을 시작해야 하는 조건과 양방향 변환 방법을 정의해야 합니다. 구현을 완료하면 구현의 전체 자격 이름을 제공하는 /META-INF/spring.factories 파일을 만들어야 합니다."
"스프링 클라우드 계약에서 SingleTestGenerator 인터페이스를 사용하는 목적은 무엇인가요?","SingleTestGenerator 인터페이스는 Java 이외의 언어에 대한 테스트를 생성하거나 검증기가 Java 테스트를 빌드하는 방식에 만족하지 않는 경우 자체 구현을 등록할 수 있도록 합니다. 이 인터페이스를 구현하여 테스트를 빌드하고 spring.factories 파일에 등록하여 사용할 수 있습니다."
"스프링 클라우드의 StubGenerator 인터페이스를 사용하여 어떻게 사용자 정의 스텁 생성을 할 수 있나요?","StubGenerator 인터페이스를 사용하여 WireMock 이외의 스텁 서버에 대한 스텁을 생성할 수 있습니다. 제공된 코드를 사용하여 스텁을 변환하고 스텁 매핑을 후처리하는 방법을 정의하여 자체 구현을 만들고 spring.factories 파일에 등록하여 사용할 수 있습니다. 이 인터페이스를 사용하면 단일 DSL에서 WireMock 스텁 및 Pact 파일과 같은 여러 스텁 생성 구현을 제공할 수도 있습니다."
"스프링 클라우드 계약에서 애플리케이션 속성은 어떤 파일과 명령줄 스위치에서 지정할 수 있나요?","애플리케이션 속성은 application.properties 파일, application.yml 파일 또는 명령줄 스위치에서 지정할 수 있습니다. (출처: {https://docs.spring.io/spring-cloud-contract/reference/appendix.html})"
"스프링 클라우드 계약에서 추가 jar 파일은 어떻게 속성을 제공할 수 있나요?","추가 jar 파일은 클래스패스에서 속성을 제공할 수 있습니다. (출처: {https://docs.spring.io/spring-cloud-contract/reference/appendix.html})"
"스프링 클라우드 계약에서 공통 속성은 어디에서 문서화되어 있나요?","공통 스프링 클라우드 계약 속성은 참조 매뉴얼의 부록에 문서화되어 있습니다. (출처: {https://docs.spring.io/spring-cloud-contract/reference/appendix.html})"
"윈도우에서 Spring Cloud Contract를 빌드할 때 Git 저장소의 파일이 윈도우의 최대 파일 경로 제한인 255자를 초과하는 문제를 어떻게 해결할 수 있나요?","이 문제를 해결하려면 core.longPaths 속성을 true로 설정하거나 Spring Cloud Contract 저장소를 복제할 때 core.longPaths=true 옵션을 사용해야 합니다. 이렇게 하려면 git config --system core.longPaths true git clone https://github.com/spring-cloud/spring-cloud-contract.git 명령어를 사용하여 시스템의 모든 사용자에게 적용하거나, git config --global core.longPaths true git clone https://github.com/spring-cloud/spring-cloud-contract.git 명령어를 사용하여 현재 사용자에게만 적용하거나, git clone -c core.longPaths=true https://github.com/spring-cloud/spring-cloud-contract.git 명령어를 사용하여 이 저장소에만 적용할 수 있습니다. 어떤 옵션을 사용하든, IDE에서 필요한 Groovy 플러그인을 모두 설치하여 소스를 올바르게 해결해야 합니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/building.html)"
"Spring Cloud Contract 프로젝트의 폴더 구조는 어떻게 되나요?","Spring Cloud Contract 폴더 구조는 config, docker, samples, scripts, specs, spring-cloud-contract-dependencies, spring-cloud-contract-shade, spring-cloud-contract-starters, spring-cloud-contract-stub-runner, spring-cloud-contract-stub-runner-boot, spring-cloud-contract-tools, spring-cloud-contract-verifier, spring-cloud-contract-wiremock, tests의 상위 폴더로 구성됩니다. 각 상위 폴더의 구체적인 내용은 Spring Cloud Contract Building 문서에서 확인할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/building.html)"
"Spring Cloud Contract의 핵심 기능과 Maven 플러그인을 빌드하려면 어떤 명령어를 사용해야 하나요?","Spring Cloud Contract의 핵심 기능과 Maven 플러그인을 빌드하려면 다음 명령어를 사용하면 됩니다: ./mvnw clean install -P integration. 이 명령어를 실행하면 핵심 기능, Maven 플러그인, Gradle 플러그인이 빌드되고, 독립 실행형 샘플 프로젝트에서 end-to-end 테스트가 실행됩니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/building.html)"
"Spring Cloud Contract의 Stub Runner에서 Consul에 스텁을 등록하려면 어떻게 설정하나요?","Spring Cloud Contract의 Stub Runner에서 Consul에 스텁을 등록하려면, application.properties 파일에 `stubrunner.cloud.consul.enabled=true` 속성을 추가하면 됩니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/configprops.html)"
"Spring Cloud Contract의 Stub Runner에서 HTTP 서버 스텁을 위한 구성 옵션을 변경하려면 어떻게 해야 하나요?","Spring Cloud Contract의 Stub Runner에서 HTTP 서버 스텁을 위한 구성 옵션을 변경하려면, application.properties 파일에 `stubrunner.http-server-stub-configurer` 속성을 추가하면 됩니다. 이 속성을 통해 HTTP 서버 스텁을 위한 다양한 옵션을 구성할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/configprops.html)"
"Spring Cloud Contract의 Stub Runner에서 Kafka 스텁 초기화기를 활성화하려면 어떻게 해야 하나요?","Spring Cloud Contract의 Stub Runner에서 Kafka 스텁 초기화기를 활성화하려면, application.properties 파일에 `stubrunner.kafka.initializer.enabled=true` 속성을 추가하면 됩니다. 이 속성을 통해 Kafka 스텁 초기화기를 활성화할 수 있습니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/configprops.html)"
"YML 스키마 정의에서 Spring Cloud Contract Verifier converter YamlContract의 'request' 속성은 무엇인가요?","YML 스키마 정의에서 Spring Cloud Contract Verifier converter YamlContract의 'request' 속성은 'method', 'url', 'path', 'queryParameters', 'headers', 'cookies', 'body', 'bodyFromFile', 'bodyFromFileAsBytes', 'matchers'와 같은 속성을 가진 객체입니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/html/#yaml-schema)"
"YML 스키마 정의에서 Spring Cloud Contract Verifier converter YamlContract의 'response' 속성은 무엇인가요?","YML 스키마 정의에서 Spring Cloud Contract Verifier converter YamlContract의 'response' 속성은 'status', 'headers', 'cookies', 'body', 'bodyFromFile', 'bodyFromFileAsBytes', 'matchers'와 같은 속성을 가진 객체입니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/html/#yaml-schema)"
"YML 스키마 정의에서 Spring Cloud Contract Verifier converter YamlContract의 'matchers' 속성은 무엇인가요?","YML 스키마 정의에서 Spring Cloud Contract Verifier converter YamlContract의 'matchers' 속성은 'body', 'headers', 'queryParameters', 'cookies'와 같은 속성을 가진 객체입니다. (출처: https://docs.spring.io/spring-cloud-contract/reference/html/#yaml-schema)"
